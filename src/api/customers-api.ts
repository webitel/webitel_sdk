// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { ApiGetCustomerResponse } from '../api'
// @ts-ignore
import { ApiLicenseUsageResponse } from '../api'
// @ts-ignore
import { ApiLicenseUsersResponse } from '../api'
// @ts-ignore
import { ApiServerInfoResponse } from '../api'
// @ts-ignore
import { ApiUpdateCustomerResponse } from '../api'
/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
     * @param {string} [id] Available Filters  show by customer id; serial number (uuid)
     * @param {boolean} [valid] show if valid only!
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {Array<string>} [fields] Request Controls  serial,
     * @param {Array<string>} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer: async (
      id?: string,
      valid?: boolean,
      domainId?: string,
      domainName?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/customer`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      if (valid !== undefined) {
        localVarQueryParameter['valid'] = valid
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain.id'] = domainId
      }

      if (domainName !== undefined) {
        localVarQueryParameter['domain.name'] = domainName
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
     * @param {string} id Available Filters  show by customer id; serial number (uuid)
     * @param {boolean} [valid] show if valid only!
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {Array<string>} [fields] Request Controls  serial,
     * @param {Array<string>} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer2: async (
      id: string,
      valid?: boolean,
      domainId?: string,
      domainName?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling getCustomer2.'
        )
      }
      const localVarPath = `/customer/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (valid !== undefined) {
        localVarQueryParameter['valid'] = valid
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain.id'] = domainId
      }

      if (domainName !== undefined) {
        localVarQueryParameter['domain.name'] = domainName
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} customerId
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [userId] identifier
     * @param {string} [userName] display name
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {Array<string>} [id] by serial number(s)
     * @param {Array<string>} [product] by product name(s)
     * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
     * @param {string} [q] filter: term of search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    licenseUsage: async (
      customerId: string,
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      userId?: string,
      userName?: string,
      domainId?: string,
      domainName?: string,
      id?: Array<string>,
      product?: Array<string>,
      valid?: boolean,
      q?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerId' is not null or undefined
      if (customerId === null || customerId === undefined) {
        throw new RequiredError(
          'customerId',
          'Required parameter customerId was null or undefined when calling licenseUsage.'
        )
      }
      const localVarPath = `/customer/{customer_id}/license`.replace(
        `{${'customer_id'}}`,
        encodeURIComponent(String(customerId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (userId !== undefined) {
        localVarQueryParameter['user.id'] = userId
      }

      if (userName !== undefined) {
        localVarQueryParameter['user.name'] = userName
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain.id'] = domainId
      }

      if (domainName !== undefined) {
        localVarQueryParameter['domain.name'] = domainName
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (product) {
        localVarQueryParameter['product'] = product
      }

      if (valid !== undefined) {
        localVarQueryParameter['valid'] = valid
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [userId] identifier
     * @param {string} [userName] display name
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {string} [customerId]
     * @param {Array<string>} [id] by serial number(s)
     * @param {Array<string>} [product] by product name(s)
     * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
     * @param {string} [q] filter: term of search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    licenseUsage2: async (
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      userId?: string,
      userName?: string,
      domainId?: string,
      domainName?: string,
      customerId?: string,
      id?: Array<string>,
      product?: Array<string>,
      valid?: boolean,
      q?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/license`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (userId !== undefined) {
        localVarQueryParameter['user.id'] = userId
      }

      if (userName !== undefined) {
        localVarQueryParameter['user.name'] = userName
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain.id'] = domainId
      }

      if (domainName !== undefined) {
        localVarQueryParameter['domain.name'] = domainName
      }

      if (customerId !== undefined) {
        localVarQueryParameter['customer_id'] = customerId
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (product) {
        localVarQueryParameter['product'] = product
      }

      if (valid !== undefined) {
        localVarQueryParameter['valid'] = valid
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [userId] identifier
     * @param {string} [userName] display name
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {string} [customerId]
     * @param {Array<string>} [id] by serial number(s)
     * @param {Array<string>} [product] by product name(s)
     * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
     * @param {string} [q] filter: term of search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    licenseUsage3: async (
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      userId?: string,
      userName?: string,
      domainId?: string,
      domainName?: string,
      customerId?: string,
      id?: Array<string>,
      product?: Array<string>,
      valid?: boolean,
      q?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/products`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (userId !== undefined) {
        localVarQueryParameter['user.id'] = userId
      }

      if (userName !== undefined) {
        localVarQueryParameter['user.name'] = userName
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain.id'] = domainId
      }

      if (domainName !== undefined) {
        localVarQueryParameter['domain.name'] = domainName
      }

      if (customerId !== undefined) {
        localVarQueryParameter['customer_id'] = customerId
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (product) {
        localVarQueryParameter['product'] = product
      }

      if (valid !== undefined) {
        localVarQueryParameter['valid'] = valid
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id ----- Search Filters ----- //  REQUIRED Product ID
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [q] filter: term of search (username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    licenseUsers: async (
      id: string,
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      q?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling licenseUsers.'
        )
      }
      const localVarPath = `/products/{id}/users`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serverInfo: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/srvinfo`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [organization] [optional] e.g.: Example Org.
     * @param {string} [logoPicture] [optional] logo source image
     * @param {string} [certificate] [optional] raw bytes protobuf::base64.RawStdEncoding !&#x3D; certificate::base64.StdEncoding
     * @param {boolean} [revoke]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer: async (
      organization?: string,
      logoPicture?: string,
      certificate?: string,
      revoke?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/customer`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (organization !== undefined) {
        localVarQueryParameter['organization'] = organization
      }

      if (logoPicture !== undefined) {
        localVarQueryParameter['logo_picture'] = logoPicture
      }

      if (certificate !== undefined) {
        localVarQueryParameter['certificate'] = certificate
      }

      if (revoke !== undefined) {
        localVarQueryParameter['revoke'] = revoke
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
     * @param {string} [id] Available Filters  show by customer id; serial number (uuid)
     * @param {boolean} [valid] show if valid only!
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {Array<string>} [fields] Request Controls  serial,
     * @param {Array<string>} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCustomer(
      id?: string,
      valid?: boolean,
      domainId?: string,
      domainName?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiGetCustomerResponse>
    > {
      const localVarAxiosArgs = await CustomersApiAxiosParamCreator(
        configuration
      ).getCustomer(id, valid, domainId, domainName, fields, sort, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
     * @param {string} id Available Filters  show by customer id; serial number (uuid)
     * @param {boolean} [valid] show if valid only!
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {Array<string>} [fields] Request Controls  serial,
     * @param {Array<string>} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCustomer2(
      id: string,
      valid?: boolean,
      domainId?: string,
      domainName?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiGetCustomerResponse>
    > {
      const localVarAxiosArgs = await CustomersApiAxiosParamCreator(
        configuration
      ).getCustomer2(id, valid, domainId, domainName, fields, sort, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} customerId
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [userId] identifier
     * @param {string} [userName] display name
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {Array<string>} [id] by serial number(s)
     * @param {Array<string>} [product] by product name(s)
     * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
     * @param {string} [q] filter: term of search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async licenseUsage(
      customerId: string,
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      userId?: string,
      userName?: string,
      domainId?: string,
      domainName?: string,
      id?: Array<string>,
      product?: Array<string>,
      valid?: boolean,
      q?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiLicenseUsageResponse>
    > {
      const localVarAxiosArgs = await CustomersApiAxiosParamCreator(
        configuration
      ).licenseUsage(
        customerId,
        size,
        page,
        fields,
        sort,
        userId,
        userName,
        domainId,
        domainName,
        id,
        product,
        valid,
        q,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [userId] identifier
     * @param {string} [userName] display name
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {string} [customerId]
     * @param {Array<string>} [id] by serial number(s)
     * @param {Array<string>} [product] by product name(s)
     * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
     * @param {string} [q] filter: term of search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async licenseUsage2(
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      userId?: string,
      userName?: string,
      domainId?: string,
      domainName?: string,
      customerId?: string,
      id?: Array<string>,
      product?: Array<string>,
      valid?: boolean,
      q?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiLicenseUsageResponse>
    > {
      const localVarAxiosArgs = await CustomersApiAxiosParamCreator(
        configuration
      ).licenseUsage2(
        size,
        page,
        fields,
        sort,
        userId,
        userName,
        domainId,
        domainName,
        customerId,
        id,
        product,
        valid,
        q,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [userId] identifier
     * @param {string} [userName] display name
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {string} [customerId]
     * @param {Array<string>} [id] by serial number(s)
     * @param {Array<string>} [product] by product name(s)
     * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
     * @param {string} [q] filter: term of search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async licenseUsage3(
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      userId?: string,
      userName?: string,
      domainId?: string,
      domainName?: string,
      customerId?: string,
      id?: Array<string>,
      product?: Array<string>,
      valid?: boolean,
      q?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiLicenseUsageResponse>
    > {
      const localVarAxiosArgs = await CustomersApiAxiosParamCreator(
        configuration
      ).licenseUsage3(
        size,
        page,
        fields,
        sort,
        userId,
        userName,
        domainId,
        domainName,
        customerId,
        id,
        product,
        valid,
        q,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id ----- Search Filters ----- //  REQUIRED Product ID
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [q] filter: term of search (username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async licenseUsers(
      id: string,
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      q?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiLicenseUsersResponse>
    > {
      const localVarAxiosArgs = await CustomersApiAxiosParamCreator(
        configuration
      ).licenseUsers(id, size, page, fields, sort, q, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async serverInfo(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiServerInfoResponse>
    > {
      const localVarAxiosArgs = await CustomersApiAxiosParamCreator(
        configuration
      ).serverInfo(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} [organization] [optional] e.g.: Example Org.
     * @param {string} [logoPicture] [optional] logo source image
     * @param {string} [certificate] [optional] raw bytes protobuf::base64.RawStdEncoding !&#x3D; certificate::base64.StdEncoding
     * @param {boolean} [revoke]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCustomer(
      organization?: string,
      logoPicture?: string,
      certificate?: string,
      revoke?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiUpdateCustomerResponse>
    > {
      const localVarAxiosArgs = await CustomersApiAxiosParamCreator(
        configuration
      ).updateCustomer(organization, logoPicture, certificate, revoke, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
     * @param {string} [id] Available Filters  show by customer id; serial number (uuid)
     * @param {boolean} [valid] show if valid only!
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {Array<string>} [fields] Request Controls  serial,
     * @param {Array<string>} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer(
      id?: string,
      valid?: boolean,
      domainId?: string,
      domainName?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<ApiGetCustomerResponse> {
      return CustomersApiFp(configuration)
        .getCustomer(id, valid, domainId, domainName, fields, sort, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
     * @param {string} id Available Filters  show by customer id; serial number (uuid)
     * @param {boolean} [valid] show if valid only!
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {Array<string>} [fields] Request Controls  serial,
     * @param {Array<string>} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer2(
      id: string,
      valid?: boolean,
      domainId?: string,
      domainName?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<ApiGetCustomerResponse> {
      return CustomersApiFp(configuration)
        .getCustomer2(id, valid, domainId, domainName, fields, sort, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} customerId
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [userId] identifier
     * @param {string} [userName] display name
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {Array<string>} [id] by serial number(s)
     * @param {Array<string>} [product] by product name(s)
     * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
     * @param {string} [q] filter: term of search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    licenseUsage(
      customerId: string,
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      userId?: string,
      userName?: string,
      domainId?: string,
      domainName?: string,
      id?: Array<string>,
      product?: Array<string>,
      valid?: boolean,
      q?: string,
      options?: any
    ): AxiosPromise<ApiLicenseUsageResponse> {
      return CustomersApiFp(configuration)
        .licenseUsage(
          customerId,
          size,
          page,
          fields,
          sort,
          userId,
          userName,
          domainId,
          domainName,
          id,
          product,
          valid,
          q,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [userId] identifier
     * @param {string} [userName] display name
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {string} [customerId]
     * @param {Array<string>} [id] by serial number(s)
     * @param {Array<string>} [product] by product name(s)
     * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
     * @param {string} [q] filter: term of search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    licenseUsage2(
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      userId?: string,
      userName?: string,
      domainId?: string,
      domainName?: string,
      customerId?: string,
      id?: Array<string>,
      product?: Array<string>,
      valid?: boolean,
      q?: string,
      options?: any
    ): AxiosPromise<ApiLicenseUsageResponse> {
      return CustomersApiFp(configuration)
        .licenseUsage2(
          size,
          page,
          fields,
          sort,
          userId,
          userName,
          domainId,
          domainName,
          customerId,
          id,
          product,
          valid,
          q,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [userId] identifier
     * @param {string} [userName] display name
     * @param {string} [domainId] identifier
     * @param {string} [domainName] display name
     * @param {string} [customerId]
     * @param {Array<string>} [id] by serial number(s)
     * @param {Array<string>} [product] by product name(s)
     * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
     * @param {string} [q] filter: term of search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    licenseUsage3(
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      userId?: string,
      userName?: string,
      domainId?: string,
      domainName?: string,
      customerId?: string,
      id?: Array<string>,
      product?: Array<string>,
      valid?: boolean,
      q?: string,
      options?: any
    ): AxiosPromise<ApiLicenseUsageResponse> {
      return CustomersApiFp(configuration)
        .licenseUsage3(
          size,
          page,
          fields,
          sort,
          userId,
          userName,
          domainId,
          domainName,
          customerId,
          id,
          product,
          valid,
          q,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id ----- Search Filters ----- //  REQUIRED Product ID
     * @param {number} [size] ----- Search Options ----- //  default: 16
     * @param {number} [page] default: 1
     * @param {Array<string>} [fields] set of output fields
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [q] filter: term of search (username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    licenseUsers(
      id: string,
      size?: number,
      page?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      q?: string,
      options?: any
    ): AxiosPromise<ApiLicenseUsersResponse> {
      return CustomersApiFp(configuration)
        .licenseUsers(id, size, page, fields, sort, q, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serverInfo(options?: any): AxiosPromise<ApiServerInfoResponse> {
      return CustomersApiFp(configuration)
        .serverInfo(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [organization] [optional] e.g.: Example Org.
     * @param {string} [logoPicture] [optional] logo source image
     * @param {string} [certificate] [optional] raw bytes protobuf::base64.RawStdEncoding !&#x3D; certificate::base64.StdEncoding
     * @param {boolean} [revoke]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomer(
      organization?: string,
      logoPicture?: string,
      certificate?: string,
      revoke?: boolean,
      options?: any
    ): AxiosPromise<ApiUpdateCustomerResponse> {
      return CustomersApiFp(configuration)
        .updateCustomer(organization, logoPicture, certificate, revoke, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI {
  /**
   *
   * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
   * @param {string} [id] Available Filters  show by customer id; serial number (uuid)
   * @param {boolean} [valid] show if valid only!
   * @param {string} [domainId] identifier
   * @param {string} [domainName] display name
   * @param {Array<string>} [fields] Request Controls  serial,
   * @param {Array<string>} [sort]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public getCustomer(
    id?: string,
    valid?: boolean,
    domainId?: string,
    domainName?: string,
    fields?: Array<string>,
    sort?: Array<string>,
    options?: any
  ) {
    return CustomersApiFp(this.configuration)
      .getCustomer(id, valid, domainId, domainName, fields, sort, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
   * @param {string} id Available Filters  show by customer id; serial number (uuid)
   * @param {boolean} [valid] show if valid only!
   * @param {string} [domainId] identifier
   * @param {string} [domainName] display name
   * @param {Array<string>} [fields] Request Controls  serial,
   * @param {Array<string>} [sort]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public getCustomer2(
    id: string,
    valid?: boolean,
    domainId?: string,
    domainName?: string,
    fields?: Array<string>,
    sort?: Array<string>,
    options?: any
  ) {
    return CustomersApiFp(this.configuration)
      .getCustomer2(id, valid, domainId, domainName, fields, sort, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} customerId
   * @param {number} [size] ----- Search Options ----- //  default: 16
   * @param {number} [page] default: 1
   * @param {Array<string>} [fields] set of output fields
   * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
   * @param {string} [userId] identifier
   * @param {string} [userName] display name
   * @param {string} [domainId] identifier
   * @param {string} [domainName] display name
   * @param {Array<string>} [id] by serial number(s)
   * @param {Array<string>} [product] by product name(s)
   * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
   * @param {string} [q] filter: term of search
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public licenseUsage(
    customerId: string,
    size?: number,
    page?: number,
    fields?: Array<string>,
    sort?: Array<string>,
    userId?: string,
    userName?: string,
    domainId?: string,
    domainName?: string,
    id?: Array<string>,
    product?: Array<string>,
    valid?: boolean,
    q?: string,
    options?: any
  ) {
    return CustomersApiFp(this.configuration)
      .licenseUsage(
        customerId,
        size,
        page,
        fields,
        sort,
        userId,
        userName,
        domainId,
        domainName,
        id,
        product,
        valid,
        q,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [size] ----- Search Options ----- //  default: 16
   * @param {number} [page] default: 1
   * @param {Array<string>} [fields] set of output fields
   * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
   * @param {string} [userId] identifier
   * @param {string} [userName] display name
   * @param {string} [domainId] identifier
   * @param {string} [domainName] display name
   * @param {string} [customerId]
   * @param {Array<string>} [id] by serial number(s)
   * @param {Array<string>} [product] by product name(s)
   * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
   * @param {string} [q] filter: term of search
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public licenseUsage2(
    size?: number,
    page?: number,
    fields?: Array<string>,
    sort?: Array<string>,
    userId?: string,
    userName?: string,
    domainId?: string,
    domainName?: string,
    customerId?: string,
    id?: Array<string>,
    product?: Array<string>,
    valid?: boolean,
    q?: string,
    options?: any
  ) {
    return CustomersApiFp(this.configuration)
      .licenseUsage2(
        size,
        page,
        fields,
        sort,
        userId,
        userName,
        domainId,
        domainName,
        customerId,
        id,
        product,
        valid,
        q,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [size] ----- Search Options ----- //  default: 16
   * @param {number} [page] default: 1
   * @param {Array<string>} [fields] set of output fields
   * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
   * @param {string} [userId] identifier
   * @param {string} [userName] display name
   * @param {string} [domainId] identifier
   * @param {string} [domainName] display name
   * @param {string} [customerId]
   * @param {Array<string>} [id] by serial number(s)
   * @param {Array<string>} [product] by product name(s)
   * @param {boolean} [valid] view: all|valid|grantable  show: available to be granted
   * @param {string} [q] filter: term of search
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public licenseUsage3(
    size?: number,
    page?: number,
    fields?: Array<string>,
    sort?: Array<string>,
    userId?: string,
    userName?: string,
    domainId?: string,
    domainName?: string,
    customerId?: string,
    id?: Array<string>,
    product?: Array<string>,
    valid?: boolean,
    q?: string,
    options?: any
  ) {
    return CustomersApiFp(this.configuration)
      .licenseUsage3(
        size,
        page,
        fields,
        sort,
        userId,
        userName,
        domainId,
        domainName,
        customerId,
        id,
        product,
        valid,
        q,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id ----- Search Filters ----- //  REQUIRED Product ID
   * @param {number} [size] ----- Search Options ----- //  default: 16
   * @param {number} [page] default: 1
   * @param {Array<string>} [fields] set of output fields
   * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
   * @param {string} [q] filter: term of search (username)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public licenseUsers(
    id: string,
    size?: number,
    page?: number,
    fields?: Array<string>,
    sort?: Array<string>,
    q?: string,
    options?: any
  ) {
    return CustomersApiFp(this.configuration)
      .licenseUsers(id, size, page, fields, sort, q, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public serverInfo(options?: any) {
    return CustomersApiFp(this.configuration)
      .serverInfo(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [organization] [optional] e.g.: Example Org.
   * @param {string} [logoPicture] [optional] logo source image
   * @param {string} [certificate] [optional] raw bytes protobuf::base64.RawStdEncoding !&#x3D; certificate::base64.StdEncoding
   * @param {boolean} [revoke]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public updateCustomer(
    organization?: string,
    logoPicture?: string,
    certificate?: string,
    revoke?: boolean,
    options?: any
  ) {
    return CustomersApiFp(this.configuration)
      .updateCustomer(organization, logoPicture, certificate, revoke, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
