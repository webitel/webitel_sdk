// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { ApiDeleteOAuthServiceRequest } from '../api'
// @ts-ignore
import { ApiOAuth2FederationDeleteOAuthServiceBody } from '../api'
// @ts-ignore
import { ApiOAuth2FederationUpdateOAuthServiceBody } from '../api'
// @ts-ignore
import { ApiOAuthService } from '../api'
// @ts-ignore
import { ApiSearchOAuthServiceResponse } from '../api'
/**
 * OAuth2FederationApi - axios parameter creator
 * @export
 */
export const OAuth2FederationApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {ApiOAuthService} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOAuthService: async (
      body: ApiOAuthService,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createOAuthService.'
        )
      }
      const localVarPath = `/oauth/apps`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {ApiDeleteOAuthServiceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOAuthService: async (
      body: ApiDeleteOAuthServiceRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling deleteOAuthService.'
        )
      }
      const localVarPath = `/oauth/apps`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {Array<string>} id
     * @param {ApiOAuth2FederationDeleteOAuthServiceBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOAuthService2: async (
      id: Array<string>,
      body: ApiOAuth2FederationDeleteOAuthServiceBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteOAuthService2.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling deleteOAuthService2.'
        )
      }
      const localVarPath = `/oauth/apps/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {Array<string>} id ----- Search Basic Filters ---------------------------  selection: by unique identifier
     * @param {number} [page] ----- Select Options -------------------------  default: 1
     * @param {number} [size] default: 16
     * @param {Array<string>} [fields] attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [q] term-of-search: lookup[name]
     * @param {string} [name] case-ignore substring match: ILIKE \&#39;*\&#39; - any; \&#39;?\&#39; - one
     * @param {string} [access] [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
     * @param {boolean} [enabled] ----- OAuthService-Specific Filters ----------------
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateOAuthService: async (
      id: Array<string>,
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      q?: string,
      name?: string,
      access?: string,
      enabled?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling locateOAuthService.'
        )
      }
      const localVarPath = `/oauth/apps/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      if (access !== undefined) {
        localVarQueryParameter['access'] = access
      }

      if (enabled !== undefined) {
        localVarQueryParameter['enabled'] = enabled
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [page] ----- Select Options -------------------------  default: 1
     * @param {number} [size] default: 16
     * @param {Array<string>} [fields] attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {Array<string>} [id] ----- Search Basic Filters ---------------------------  selection: by unique identifier
     * @param {string} [q] term-of-search: lookup[name]
     * @param {string} [name] case-ignore substring match: ILIKE \&#39;*\&#39; - any; \&#39;?\&#39; - one
     * @param {string} [access] [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
     * @param {boolean} [enabled] ----- OAuthService-Specific Filters ----------------
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOAuthService: async (
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      name?: string,
      access?: string,
      enabled?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/oauth/apps`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      if (access !== undefined) {
        localVarQueryParameter['access'] = access
      }

      if (enabled !== undefined) {
        localVarQueryParameter['enabled'] = enabled
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} changesId
     * @param {ApiOAuth2FederationUpdateOAuthServiceBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOAuthService: async (
      changesId: string,
      body: ApiOAuth2FederationUpdateOAuthServiceBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changesId' is not null or undefined
      if (changesId === null || changesId === undefined) {
        throw new RequiredError(
          'changesId',
          'Required parameter changesId was null or undefined when calling updateOAuthService.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateOAuthService.'
        )
      }
      const localVarPath = `/oauth/apps/{changes.id}`.replace(
        `{${'changes.id'}}`,
        encodeURIComponent(String(changesId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} changesId
     * @param {ApiOAuth2FederationUpdateOAuthServiceBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOAuthService2: async (
      changesId: string,
      body: ApiOAuth2FederationUpdateOAuthServiceBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changesId' is not null or undefined
      if (changesId === null || changesId === undefined) {
        throw new RequiredError(
          'changesId',
          'Required parameter changesId was null or undefined when calling updateOAuthService2.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateOAuthService2.'
        )
      }
      const localVarPath = `/oauth/apps/{changes.id}`.replace(
        `{${'changes.id'}}`,
        encodeURIComponent(String(changesId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OAuth2FederationApi - functional programming interface
 * @export
 */
export const OAuth2FederationApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {ApiOAuthService} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOAuthService(
      body: ApiOAuthService,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiOAuthService>
    > {
      const localVarAxiosArgs = await OAuth2FederationApiAxiosParamCreator(
        configuration
      ).createOAuthService(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {ApiDeleteOAuthServiceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOAuthService(
      body: ApiDeleteOAuthServiceRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await OAuth2FederationApiAxiosParamCreator(
        configuration
      ).deleteOAuthService(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {Array<string>} id
     * @param {ApiOAuth2FederationDeleteOAuthServiceBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOAuthService2(
      id: Array<string>,
      body: ApiOAuth2FederationDeleteOAuthServiceBody,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await OAuth2FederationApiAxiosParamCreator(
        configuration
      ).deleteOAuthService2(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {Array<string>} id ----- Search Basic Filters ---------------------------  selection: by unique identifier
     * @param {number} [page] ----- Select Options -------------------------  default: 1
     * @param {number} [size] default: 16
     * @param {Array<string>} [fields] attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [q] term-of-search: lookup[name]
     * @param {string} [name] case-ignore substring match: ILIKE \&#39;*\&#39; - any; \&#39;?\&#39; - one
     * @param {string} [access] [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
     * @param {boolean} [enabled] ----- OAuthService-Specific Filters ----------------
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locateOAuthService(
      id: Array<string>,
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      q?: string,
      name?: string,
      access?: string,
      enabled?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiOAuthService>
    > {
      const localVarAxiosArgs = await OAuth2FederationApiAxiosParamCreator(
        configuration
      ).locateOAuthService(
        id,
        page,
        size,
        fields,
        sort,
        q,
        name,
        access,
        enabled,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [page] ----- Select Options -------------------------  default: 1
     * @param {number} [size] default: 16
     * @param {Array<string>} [fields] attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {Array<string>} [id] ----- Search Basic Filters ---------------------------  selection: by unique identifier
     * @param {string} [q] term-of-search: lookup[name]
     * @param {string} [name] case-ignore substring match: ILIKE \&#39;*\&#39; - any; \&#39;?\&#39; - one
     * @param {string} [access] [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
     * @param {boolean} [enabled] ----- OAuthService-Specific Filters ----------------
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchOAuthService(
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      name?: string,
      access?: string,
      enabled?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiSearchOAuthServiceResponse>
    > {
      const localVarAxiosArgs = await OAuth2FederationApiAxiosParamCreator(
        configuration
      ).searchOAuthService(
        page,
        size,
        fields,
        sort,
        id,
        q,
        name,
        access,
        enabled,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} changesId
     * @param {ApiOAuth2FederationUpdateOAuthServiceBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOAuthService(
      changesId: string,
      body: ApiOAuth2FederationUpdateOAuthServiceBody,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiOAuthService>
    > {
      const localVarAxiosArgs = await OAuth2FederationApiAxiosParamCreator(
        configuration
      ).updateOAuthService(changesId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} changesId
     * @param {ApiOAuth2FederationUpdateOAuthServiceBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOAuthService2(
      changesId: string,
      body: ApiOAuth2FederationUpdateOAuthServiceBody,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiOAuthService>
    > {
      const localVarAxiosArgs = await OAuth2FederationApiAxiosParamCreator(
        configuration
      ).updateOAuthService2(changesId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * OAuth2FederationApi - factory interface
 * @export
 */
export const OAuth2FederationApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {ApiOAuthService} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOAuthService(
      body: ApiOAuthService,
      options?: any
    ): AxiosPromise<ApiOAuthService> {
      return OAuth2FederationApiFp(configuration)
        .createOAuthService(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {ApiDeleteOAuthServiceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOAuthService(
      body: ApiDeleteOAuthServiceRequest,
      options?: any
    ): AxiosPromise<object> {
      return OAuth2FederationApiFp(configuration)
        .deleteOAuthService(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {Array<string>} id
     * @param {ApiOAuth2FederationDeleteOAuthServiceBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOAuthService2(
      id: Array<string>,
      body: ApiOAuth2FederationDeleteOAuthServiceBody,
      options?: any
    ): AxiosPromise<object> {
      return OAuth2FederationApiFp(configuration)
        .deleteOAuthService2(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {Array<string>} id ----- Search Basic Filters ---------------------------  selection: by unique identifier
     * @param {number} [page] ----- Select Options -------------------------  default: 1
     * @param {number} [size] default: 16
     * @param {Array<string>} [fields] attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {string} [q] term-of-search: lookup[name]
     * @param {string} [name] case-ignore substring match: ILIKE \&#39;*\&#39; - any; \&#39;?\&#39; - one
     * @param {string} [access] [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
     * @param {boolean} [enabled] ----- OAuthService-Specific Filters ----------------
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateOAuthService(
      id: Array<string>,
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      q?: string,
      name?: string,
      access?: string,
      enabled?: boolean,
      options?: any
    ): AxiosPromise<ApiOAuthService> {
      return OAuth2FederationApiFp(configuration)
        .locateOAuthService(
          id,
          page,
          size,
          fields,
          sort,
          q,
          name,
          access,
          enabled,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [page] ----- Select Options -------------------------  default: 1
     * @param {number} [size] default: 16
     * @param {Array<string>} [fields] attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {Array<string>} [id] ----- Search Basic Filters ---------------------------  selection: by unique identifier
     * @param {string} [q] term-of-search: lookup[name]
     * @param {string} [name] case-ignore substring match: ILIKE \&#39;*\&#39; - any; \&#39;?\&#39; - one
     * @param {string} [access] [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
     * @param {boolean} [enabled] ----- OAuthService-Specific Filters ----------------
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOAuthService(
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      name?: string,
      access?: string,
      enabled?: boolean,
      options?: any
    ): AxiosPromise<ApiSearchOAuthServiceResponse> {
      return OAuth2FederationApiFp(configuration)
        .searchOAuthService(
          page,
          size,
          fields,
          sort,
          id,
          q,
          name,
          access,
          enabled,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} changesId
     * @param {ApiOAuth2FederationUpdateOAuthServiceBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOAuthService(
      changesId: string,
      body: ApiOAuth2FederationUpdateOAuthServiceBody,
      options?: any
    ): AxiosPromise<ApiOAuthService> {
      return OAuth2FederationApiFp(configuration)
        .updateOAuthService(changesId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} changesId
     * @param {ApiOAuth2FederationUpdateOAuthServiceBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOAuthService2(
      changesId: string,
      body: ApiOAuth2FederationUpdateOAuthServiceBody,
      options?: any
    ): AxiosPromise<ApiOAuthService> {
      return OAuth2FederationApiFp(configuration)
        .updateOAuthService2(changesId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * OAuth2FederationApi - object-oriented interface
 * @export
 * @class OAuth2FederationApi
 * @extends {BaseAPI}
 */
export class OAuth2FederationApi extends BaseAPI {
  /**
   *
   * @param {ApiOAuthService} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuth2FederationApi
   */
  public createOAuthService(body: ApiOAuthService, options?: any) {
    return OAuth2FederationApiFp(this.configuration)
      .createOAuthService(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {ApiDeleteOAuthServiceRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuth2FederationApi
   */
  public deleteOAuthService(body: ApiDeleteOAuthServiceRequest, options?: any) {
    return OAuth2FederationApiFp(this.configuration)
      .deleteOAuthService(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {Array<string>} id
   * @param {ApiOAuth2FederationDeleteOAuthServiceBody} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuth2FederationApi
   */
  public deleteOAuthService2(
    id: Array<string>,
    body: ApiOAuth2FederationDeleteOAuthServiceBody,
    options?: any
  ) {
    return OAuth2FederationApiFp(this.configuration)
      .deleteOAuthService2(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {Array<string>} id ----- Search Basic Filters ---------------------------  selection: by unique identifier
   * @param {number} [page] ----- Select Options -------------------------  default: 1
   * @param {number} [size] default: 16
   * @param {Array<string>} [fields] attributes list
   * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
   * @param {string} [q] term-of-search: lookup[name]
   * @param {string} [name] case-ignore substring match: ILIKE \&#39;*\&#39; - any; \&#39;?\&#39; - one
   * @param {string} [access] [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
   * @param {boolean} [enabled] ----- OAuthService-Specific Filters ----------------
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuth2FederationApi
   */
  public locateOAuthService(
    id: Array<string>,
    page?: number,
    size?: number,
    fields?: Array<string>,
    sort?: Array<string>,
    q?: string,
    name?: string,
    access?: string,
    enabled?: boolean,
    options?: any
  ) {
    return OAuth2FederationApiFp(this.configuration)
      .locateOAuthService(
        id,
        page,
        size,
        fields,
        sort,
        q,
        name,
        access,
        enabled,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [page] ----- Select Options -------------------------  default: 1
   * @param {number} [size] default: 16
   * @param {Array<string>} [fields] attributes list
   * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
   * @param {Array<string>} [id] ----- Search Basic Filters ---------------------------  selection: by unique identifier
   * @param {string} [q] term-of-search: lookup[name]
   * @param {string} [name] case-ignore substring match: ILIKE \&#39;*\&#39; - any; \&#39;?\&#39; - one
   * @param {string} [access] [M]andatory[A]ccess[C]ontrol: with access mode (action) granted!
   * @param {boolean} [enabled] ----- OAuthService-Specific Filters ----------------
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuth2FederationApi
   */
  public searchOAuthService(
    page?: number,
    size?: number,
    fields?: Array<string>,
    sort?: Array<string>,
    id?: Array<string>,
    q?: string,
    name?: string,
    access?: string,
    enabled?: boolean,
    options?: any
  ) {
    return OAuth2FederationApiFp(this.configuration)
      .searchOAuthService(
        page,
        size,
        fields,
        sort,
        id,
        q,
        name,
        access,
        enabled,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} changesId
   * @param {ApiOAuth2FederationUpdateOAuthServiceBody} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuth2FederationApi
   */
  public updateOAuthService(
    changesId: string,
    body: ApiOAuth2FederationUpdateOAuthServiceBody,
    options?: any
  ) {
    return OAuth2FederationApiFp(this.configuration)
      .updateOAuthService(changesId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} changesId
   * @param {ApiOAuth2FederationUpdateOAuthServiceBody} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuth2FederationApi
   */
  public updateOAuthService2(
    changesId: string,
    body: ApiOAuth2FederationUpdateOAuthServiceBody,
    options?: any
  ) {
    return OAuth2FederationApiFp(this.configuration)
      .updateOAuthService2(changesId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
