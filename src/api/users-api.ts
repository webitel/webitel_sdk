// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { ApiCreateUserRequest } from '../api'
// @ts-ignore
import { ApiCreateUserResponse } from '../api'
// @ts-ignore
import { ApiDeleteUsersResponse } from '../api'
// @ts-ignore
import { ApiReadUserResponse } from '../api'
// @ts-ignore
import { ApiSearchUsersRequest } from '../api'
// @ts-ignore
import { ApiSearchUsersResponse } from '../api'
// @ts-ignore
import { ApiUpdateUserResponse } from '../api'
// @ts-ignore
import { ApiUsersUpdateUserBody } from '../api'
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {ApiCreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: async (
      body: ApiCreateUserRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createUser.'
        )
      }
      const localVarPath = `/users`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id ONE /users/{id}
     * @param {Array<string>} [selection] MANY /users .ids&#x3D;[id,...]
     * @param {boolean} [permanent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers: async (
      id: string,
      selection?: Array<string>,
      permanent?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteUsers.'
        )
      }
      const localVarPath = `/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (selection) {
        localVarQueryParameter['selection'] = selection
      }

      if (permanent !== undefined) {
        localVarQueryParameter['permanent'] = permanent
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {Array<string>} selection MANY /users .ids&#x3D;[id,...]
     * @param {string} [id] ONE /users/{id}
     * @param {boolean} [permanent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers2: async (
      selection: Array<string>,
      id?: string,
      permanent?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'selection' is not null or undefined
      if (selection === null || selection === undefined) {
        throw new RequiredError(
          'selection',
          'Required parameter selection was null or undefined when calling deleteUsers2.'
        )
      }
      const localVarPath = `/users`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      if (permanent !== undefined) {
        localVarQueryParameter['permanent'] = permanent
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof selection !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(selection !== undefined ? selection : {})
        : selection || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUser: async (
      id: string,
      body: object,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling logoutUser.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling logoutUser.'
        )
      }
      const localVarPath = `/users/{id}/logout`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields] partial output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUser: async (
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readUser.'
        )
      }
      const localVarPath = `/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [id]
     * @param {Array<string>} [fields] partial output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUser2: async (
      id?: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {Array<string>} [id] ----- Base Filters ---------------------------  filter: .id &#x3D; any({id}...)
     * @param {Array<string>} [notId] filter: .id &lt;&gt; all({not_ids}...)
     * @param {string} [q] ----- User-specific Filters ------------------  filter: (.name|.username|.extension|.status) ILIKE \&#39;{q}\&#39;
     * @param {string} [name] filter: .name ILIKE \&#39;{name}\&#39;
     * @param {string} [status] filter: .status ILIKE \&#39;{status}\&#39;
     * @param {string} [username] filter: .username ILIKE \&#39;{username}\&#39;
     * @param {string} [extension] filter: .extension LIKE \&#39;{extension}\&#39;
     * @param {boolean} [any] ----- View Modes ----------------------------- NOTE: by default, search NOT \&#39;deleted\&#39; objects ONLY  filter: include \&#39;deleted\&#39; ALSO ! (inactive)
     * @param {boolean} [deleted] filter: .deleted_at NOTNULL (view: RECYCLE)
     * @param {string} [presenceStatus]
     * @param {string} [presenceNote]
     * @param {Array<string>} [fields] // navigation filter repeated int64 roles &#x3D; 7; ----- Search Options -------------------------  select: output (fields,...)
     * @param {Array<string>} [sort] select: order by (fields,...)
     * @param {number} [page] select: offset {page}
     * @param {number} [size] select: limit {size}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUsers: async (
      id?: Array<string>,
      notId?: Array<string>,
      q?: string,
      name?: string,
      status?: string,
      username?: string,
      extension?: string,
      any?: boolean,
      deleted?: boolean,
      presenceStatus?: string,
      presenceNote?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      page?: number,
      size?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (notId) {
        localVarQueryParameter['not_id'] = notId
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      if (status !== undefined) {
        localVarQueryParameter['status'] = status
      }

      if (username !== undefined) {
        localVarQueryParameter['username'] = username
      }

      if (extension !== undefined) {
        localVarQueryParameter['extension'] = extension
      }

      if (any !== undefined) {
        localVarQueryParameter['any'] = any
      }

      if (deleted !== undefined) {
        localVarQueryParameter['deleted'] = deleted
      }

      if (presenceStatus !== undefined) {
        localVarQueryParameter['presence.status'] = presenceStatus
      }

      if (presenceNote !== undefined) {
        localVarQueryParameter['presence.note'] = presenceNote
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {ApiSearchUsersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUsers2: async (
      body: ApiSearchUsersRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling searchUsers2.'
        )
      }
      const localVarPath = `/users/search`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} userId Object ID
     * @param {ApiUsersUpdateUserBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: async (
      userId: string,
      body: ApiUsersUpdateUserBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          'userId',
          'Required parameter userId was null or undefined when calling updateUser.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateUser.'
        )
      }
      const localVarPath = `/users/{user.id}`.replace(
        `{${'user.id'}}`,
        encodeURIComponent(String(userId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {ApiCreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUser(
      body: ApiCreateUserRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiCreateUserResponse>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).createUser(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id ONE /users/{id}
     * @param {Array<string>} [selection] MANY /users .ids&#x3D;[id,...]
     * @param {boolean} [permanent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUsers(
      id: string,
      selection?: Array<string>,
      permanent?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiDeleteUsersResponse>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).deleteUsers(id, selection, permanent, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {Array<string>} selection MANY /users .ids&#x3D;[id,...]
     * @param {string} [id] ONE /users/{id}
     * @param {boolean} [permanent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUsers2(
      selection: Array<string>,
      id?: string,
      permanent?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiDeleteUsersResponse>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).deleteUsers2(selection, id, permanent, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logoutUser(
      id: string,
      body: object,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).logoutUser(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields] partial output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readUser(
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiReadUserResponse>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).readUser(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} [id]
     * @param {Array<string>} [fields] partial output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readUser2(
      id?: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiReadUserResponse>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).readUser2(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {Array<string>} [id] ----- Base Filters ---------------------------  filter: .id &#x3D; any({id}...)
     * @param {Array<string>} [notId] filter: .id &lt;&gt; all({not_ids}...)
     * @param {string} [q] ----- User-specific Filters ------------------  filter: (.name|.username|.extension|.status) ILIKE \&#39;{q}\&#39;
     * @param {string} [name] filter: .name ILIKE \&#39;{name}\&#39;
     * @param {string} [status] filter: .status ILIKE \&#39;{status}\&#39;
     * @param {string} [username] filter: .username ILIKE \&#39;{username}\&#39;
     * @param {string} [extension] filter: .extension LIKE \&#39;{extension}\&#39;
     * @param {boolean} [any] ----- View Modes ----------------------------- NOTE: by default, search NOT \&#39;deleted\&#39; objects ONLY  filter: include \&#39;deleted\&#39; ALSO ! (inactive)
     * @param {boolean} [deleted] filter: .deleted_at NOTNULL (view: RECYCLE)
     * @param {string} [presenceStatus]
     * @param {string} [presenceNote]
     * @param {Array<string>} [fields] // navigation filter repeated int64 roles &#x3D; 7; ----- Search Options -------------------------  select: output (fields,...)
     * @param {Array<string>} [sort] select: order by (fields,...)
     * @param {number} [page] select: offset {page}
     * @param {number} [size] select: limit {size}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchUsers(
      id?: Array<string>,
      notId?: Array<string>,
      q?: string,
      name?: string,
      status?: string,
      username?: string,
      extension?: string,
      any?: boolean,
      deleted?: boolean,
      presenceStatus?: string,
      presenceNote?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiSearchUsersResponse>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).searchUsers(
        id,
        notId,
        q,
        name,
        status,
        username,
        extension,
        any,
        deleted,
        presenceStatus,
        presenceNote,
        fields,
        sort,
        page,
        size,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {ApiSearchUsersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchUsers2(
      body: ApiSearchUsersRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiSearchUsersResponse>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).searchUsers2(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} userId Object ID
     * @param {ApiUsersUpdateUserBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUser(
      userId: string,
      body: ApiUsersUpdateUserBody,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiUpdateUserResponse>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).updateUser(userId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {ApiCreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(
      body: ApiCreateUserRequest,
      options?: any
    ): AxiosPromise<ApiCreateUserResponse> {
      return UsersApiFp(configuration)
        .createUser(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id ONE /users/{id}
     * @param {Array<string>} [selection] MANY /users .ids&#x3D;[id,...]
     * @param {boolean} [permanent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers(
      id: string,
      selection?: Array<string>,
      permanent?: boolean,
      options?: any
    ): AxiosPromise<ApiDeleteUsersResponse> {
      return UsersApiFp(configuration)
        .deleteUsers(id, selection, permanent, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {Array<string>} selection MANY /users .ids&#x3D;[id,...]
     * @param {string} [id] ONE /users/{id}
     * @param {boolean} [permanent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers2(
      selection: Array<string>,
      id?: string,
      permanent?: boolean,
      options?: any
    ): AxiosPromise<ApiDeleteUsersResponse> {
      return UsersApiFp(configuration)
        .deleteUsers2(selection, id, permanent, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutUser(id: string, body: object, options?: any): AxiosPromise<object> {
      return UsersApiFp(configuration)
        .logoutUser(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields] partial output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUser(
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<ApiReadUserResponse> {
      return UsersApiFp(configuration)
        .readUser(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [id]
     * @param {Array<string>} [fields] partial output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUser2(
      id?: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<ApiReadUserResponse> {
      return UsersApiFp(configuration)
        .readUser2(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {Array<string>} [id] ----- Base Filters ---------------------------  filter: .id &#x3D; any({id}...)
     * @param {Array<string>} [notId] filter: .id &lt;&gt; all({not_ids}...)
     * @param {string} [q] ----- User-specific Filters ------------------  filter: (.name|.username|.extension|.status) ILIKE \&#39;{q}\&#39;
     * @param {string} [name] filter: .name ILIKE \&#39;{name}\&#39;
     * @param {string} [status] filter: .status ILIKE \&#39;{status}\&#39;
     * @param {string} [username] filter: .username ILIKE \&#39;{username}\&#39;
     * @param {string} [extension] filter: .extension LIKE \&#39;{extension}\&#39;
     * @param {boolean} [any] ----- View Modes ----------------------------- NOTE: by default, search NOT \&#39;deleted\&#39; objects ONLY  filter: include \&#39;deleted\&#39; ALSO ! (inactive)
     * @param {boolean} [deleted] filter: .deleted_at NOTNULL (view: RECYCLE)
     * @param {string} [presenceStatus]
     * @param {string} [presenceNote]
     * @param {Array<string>} [fields] // navigation filter repeated int64 roles &#x3D; 7; ----- Search Options -------------------------  select: output (fields,...)
     * @param {Array<string>} [sort] select: order by (fields,...)
     * @param {number} [page] select: offset {page}
     * @param {number} [size] select: limit {size}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUsers(
      id?: Array<string>,
      notId?: Array<string>,
      q?: string,
      name?: string,
      status?: string,
      username?: string,
      extension?: string,
      any?: boolean,
      deleted?: boolean,
      presenceStatus?: string,
      presenceNote?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      page?: number,
      size?: number,
      options?: any
    ): AxiosPromise<ApiSearchUsersResponse> {
      return UsersApiFp(configuration)
        .searchUsers(
          id,
          notId,
          q,
          name,
          status,
          username,
          extension,
          any,
          deleted,
          presenceStatus,
          presenceNote,
          fields,
          sort,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {ApiSearchUsersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUsers2(
      body: ApiSearchUsersRequest,
      options?: any
    ): AxiosPromise<ApiSearchUsersResponse> {
      return UsersApiFp(configuration)
        .searchUsers2(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} userId Object ID
     * @param {ApiUsersUpdateUserBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(
      userId: string,
      body: ApiUsersUpdateUserBody,
      options?: any
    ): AxiosPromise<ApiUpdateUserResponse> {
      return UsersApiFp(configuration)
        .updateUser(userId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @param {ApiCreateUserRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public createUser(body: ApiCreateUserRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .createUser(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id ONE /users/{id}
   * @param {Array<string>} [selection] MANY /users .ids&#x3D;[id,...]
   * @param {boolean} [permanent]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public deleteUsers(
    id: string,
    selection?: Array<string>,
    permanent?: boolean,
    options?: any
  ) {
    return UsersApiFp(this.configuration)
      .deleteUsers(id, selection, permanent, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {Array<string>} selection MANY /users .ids&#x3D;[id,...]
   * @param {string} [id] ONE /users/{id}
   * @param {boolean} [permanent]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public deleteUsers2(
    selection: Array<string>,
    id?: string,
    permanent?: boolean,
    options?: any
  ) {
    return UsersApiFp(this.configuration)
      .deleteUsers2(selection, id, permanent, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public logoutUser(id: string, body: object, options?: any) {
    return UsersApiFp(this.configuration)
      .logoutUser(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {Array<string>} [fields] partial output
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public readUser(id: string, fields?: Array<string>, options?: any) {
    return UsersApiFp(this.configuration)
      .readUser(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [id]
   * @param {Array<string>} [fields] partial output
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public readUser2(id?: string, fields?: Array<string>, options?: any) {
    return UsersApiFp(this.configuration)
      .readUser2(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {Array<string>} [id] ----- Base Filters ---------------------------  filter: .id &#x3D; any({id}...)
   * @param {Array<string>} [notId] filter: .id &lt;&gt; all({not_ids}...)
   * @param {string} [q] ----- User-specific Filters ------------------  filter: (.name|.username|.extension|.status) ILIKE \&#39;{q}\&#39;
   * @param {string} [name] filter: .name ILIKE \&#39;{name}\&#39;
   * @param {string} [status] filter: .status ILIKE \&#39;{status}\&#39;
   * @param {string} [username] filter: .username ILIKE \&#39;{username}\&#39;
   * @param {string} [extension] filter: .extension LIKE \&#39;{extension}\&#39;
   * @param {boolean} [any] ----- View Modes ----------------------------- NOTE: by default, search NOT \&#39;deleted\&#39; objects ONLY  filter: include \&#39;deleted\&#39; ALSO ! (inactive)
   * @param {boolean} [deleted] filter: .deleted_at NOTNULL (view: RECYCLE)
   * @param {string} [presenceStatus]
   * @param {string} [presenceNote]
   * @param {Array<string>} [fields] // navigation filter repeated int64 roles &#x3D; 7; ----- Search Options -------------------------  select: output (fields,...)
   * @param {Array<string>} [sort] select: order by (fields,...)
   * @param {number} [page] select: offset {page}
   * @param {number} [size] select: limit {size}
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public searchUsers(
    id?: Array<string>,
    notId?: Array<string>,
    q?: string,
    name?: string,
    status?: string,
    username?: string,
    extension?: string,
    any?: boolean,
    deleted?: boolean,
    presenceStatus?: string,
    presenceNote?: string,
    fields?: Array<string>,
    sort?: Array<string>,
    page?: number,
    size?: number,
    options?: any
  ) {
    return UsersApiFp(this.configuration)
      .searchUsers(
        id,
        notId,
        q,
        name,
        status,
        username,
        extension,
        any,
        deleted,
        presenceStatus,
        presenceNote,
        fields,
        sort,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {ApiSearchUsersRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public searchUsers2(body: ApiSearchUsersRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .searchUsers2(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} userId Object ID
   * @param {ApiUsersUpdateUserBody} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateUser(
    userId: string,
    body: ApiUsersUpdateUserBody,
    options?: any
  ) {
    return UsersApiFp(this.configuration)
      .updateUser(userId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
