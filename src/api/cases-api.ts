// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { CasesCase } from '../api'
// @ts-ignore
import { CasesCaseList } from '../api'
// @ts-ignore
import { CasesInputCreateCase } from '../api'
// @ts-ignore
import { GooglerpcStatus } from '../api'
// @ts-ignore
import { InputDataWithUpdatedFields } from '../api'
// @ts-ignore
import { InputDataWithUpdatedFields1 } from '../api'
/**
 * CasesApi - axios parameter creator
 * @export
 */
export const CasesApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary RPC method for creating a new case.
     * @param {CasesInputCreateCase} input Input data for creating the case.
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCase: async (
      input: CasesInputCreateCase,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling createCase.'
        )
      }
      const localVarPath = `/cases`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RPC method for deleting an existing case by its etag.
     * @param {string} id identifier of the object
     * @param {Array<string>} [fields] fields to return in deleted object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCase: async (
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteCase.'
        )
      }
      const localVarPath = `/cases/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RPC method to retrieve a specific case by its etag identifier.
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateCase: async (
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling locateCase.'
        )
      }
      const localVarPath = `/cases/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RPC method for searching cases.
     * @param {number} [page] Page number for pagination.
     * @param {number} [size] Number of results per page.
     * @param {string} [q] Query string for searching cases.
     * @param {Array<string>} [ids] List of specific case IDs to retrieve.
     * @param {string} [sort] Sorting criteria (e.g., field:asc).
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {string} [filtersString] This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCases: async (
      page?: number,
      size?: number,
      q?: string,
      ids?: Array<string>,
      sort?: string,
      fields?: Array<string>,
      filtersString?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cases`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (ids) {
        localVarQueryParameter['ids'] = ids
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (filtersString !== undefined) {
        localVarQueryParameter['filters[string]'] = filtersString
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RPC method for updating an existing case.
     * @param {string} inputId
     * @param {InputDataWithUpdatedFields} input
     * @param {Array<string>} [xJsonMask] List of JSON fields to update.
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCase: async (
      inputId: string,
      input: InputDataWithUpdatedFields,
      xJsonMask?: Array<string>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inputId' is not null or undefined
      if (inputId === null || inputId === undefined) {
        throw new RequiredError(
          'inputId',
          'Required parameter inputId was null or undefined when calling updateCase.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateCase.'
        )
      }
      const localVarPath = `/cases/{input.id}`.replace(
        `{${'input.id'}}`,
        encodeURIComponent(String(inputId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (xJsonMask) {
        localVarQueryParameter['x_json_mask'] = xJsonMask
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RPC method for updating an existing case.
     * @param {string} inputId
     * @param {InputDataWithUpdatedFields1} input
     * @param {Array<string>} [xJsonMask] List of JSON fields to update.
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCase2: async (
      inputId: string,
      input: InputDataWithUpdatedFields1,
      xJsonMask?: Array<string>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inputId' is not null or undefined
      if (inputId === null || inputId === undefined) {
        throw new RequiredError(
          'inputId',
          'Required parameter inputId was null or undefined when calling updateCase2.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateCase2.'
        )
      }
      const localVarPath = `/cases/{input.id}`.replace(
        `{${'input.id'}}`,
        encodeURIComponent(String(inputId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (xJsonMask) {
        localVarQueryParameter['x_json_mask'] = xJsonMask
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CasesApi - functional programming interface
 * @export
 */
export const CasesApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary RPC method for creating a new case.
     * @param {CasesInputCreateCase} input Input data for creating the case.
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCase(
      input: CasesInputCreateCase,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCase>
    > {
      const localVarAxiosArgs = await CasesApiAxiosParamCreator(
        configuration
      ).createCase(input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RPC method for deleting an existing case by its etag.
     * @param {string} id identifier of the object
     * @param {Array<string>} [fields] fields to return in deleted object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCase(
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCase>
    > {
      const localVarAxiosArgs = await CasesApiAxiosParamCreator(
        configuration
      ).deleteCase(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RPC method to retrieve a specific case by its etag identifier.
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locateCase(
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCase>
    > {
      const localVarAxiosArgs = await CasesApiAxiosParamCreator(
        configuration
      ).locateCase(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RPC method for searching cases.
     * @param {number} [page] Page number for pagination.
     * @param {number} [size] Number of results per page.
     * @param {string} [q] Query string for searching cases.
     * @param {Array<string>} [ids] List of specific case IDs to retrieve.
     * @param {string} [sort] Sorting criteria (e.g., field:asc).
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {string} [filtersString] This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchCases(
      page?: number,
      size?: number,
      q?: string,
      ids?: Array<string>,
      sort?: string,
      fields?: Array<string>,
      filtersString?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCaseList>
    > {
      const localVarAxiosArgs = await CasesApiAxiosParamCreator(
        configuration
      ).searchCases(page, size, q, ids, sort, fields, filtersString, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RPC method for updating an existing case.
     * @param {string} inputId
     * @param {InputDataWithUpdatedFields} input
     * @param {Array<string>} [xJsonMask] List of JSON fields to update.
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCase(
      inputId: string,
      input: InputDataWithUpdatedFields,
      xJsonMask?: Array<string>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCase>
    > {
      const localVarAxiosArgs = await CasesApiAxiosParamCreator(
        configuration
      ).updateCase(inputId, input, xJsonMask, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RPC method for updating an existing case.
     * @param {string} inputId
     * @param {InputDataWithUpdatedFields1} input
     * @param {Array<string>} [xJsonMask] List of JSON fields to update.
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCase2(
      inputId: string,
      input: InputDataWithUpdatedFields1,
      xJsonMask?: Array<string>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCase>
    > {
      const localVarAxiosArgs = await CasesApiAxiosParamCreator(
        configuration
      ).updateCase2(inputId, input, xJsonMask, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * CasesApi - factory interface
 * @export
 */
export const CasesApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary RPC method for creating a new case.
     * @param {CasesInputCreateCase} input Input data for creating the case.
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCase(
      input: CasesInputCreateCase,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesCase> {
      return CasesApiFp(configuration)
        .createCase(input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary RPC method for deleting an existing case by its etag.
     * @param {string} id identifier of the object
     * @param {Array<string>} [fields] fields to return in deleted object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCase(
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesCase> {
      return CasesApiFp(configuration)
        .deleteCase(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary RPC method to retrieve a specific case by its etag identifier.
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateCase(
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesCase> {
      return CasesApiFp(configuration)
        .locateCase(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary RPC method for searching cases.
     * @param {number} [page] Page number for pagination.
     * @param {number} [size] Number of results per page.
     * @param {string} [q] Query string for searching cases.
     * @param {Array<string>} [ids] List of specific case IDs to retrieve.
     * @param {string} [sort] Sorting criteria (e.g., field:asc).
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {string} [filtersString] This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCases(
      page?: number,
      size?: number,
      q?: string,
      ids?: Array<string>,
      sort?: string,
      fields?: Array<string>,
      filtersString?: string,
      options?: any
    ): AxiosPromise<CasesCaseList> {
      return CasesApiFp(configuration)
        .searchCases(page, size, q, ids, sort, fields, filtersString, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary RPC method for updating an existing case.
     * @param {string} inputId
     * @param {InputDataWithUpdatedFields} input
     * @param {Array<string>} [xJsonMask] List of JSON fields to update.
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCase(
      inputId: string,
      input: InputDataWithUpdatedFields,
      xJsonMask?: Array<string>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesCase> {
      return CasesApiFp(configuration)
        .updateCase(inputId, input, xJsonMask, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary RPC method for updating an existing case.
     * @param {string} inputId
     * @param {InputDataWithUpdatedFields1} input
     * @param {Array<string>} [xJsonMask] List of JSON fields to update.
     * @param {Array<string>} [fields] List of fields to include in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCase2(
      inputId: string,
      input: InputDataWithUpdatedFields1,
      xJsonMask?: Array<string>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesCase> {
      return CasesApiFp(configuration)
        .updateCase2(inputId, input, xJsonMask, fields, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CasesApi - object-oriented interface
 * @export
 * @class CasesApi
 * @extends {BaseAPI}
 */
export class CasesApi extends BaseAPI {
  /**
   *
   * @summary RPC method for creating a new case.
   * @param {CasesInputCreateCase} input Input data for creating the case.
   * @param {Array<string>} [fields] List of fields to include in the response.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CasesApi
   */
  public createCase(
    input: CasesInputCreateCase,
    fields?: Array<string>,
    options?: any
  ) {
    return CasesApiFp(this.configuration)
      .createCase(input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary RPC method for deleting an existing case by its etag.
   * @param {string} id identifier of the object
   * @param {Array<string>} [fields] fields to return in deleted object
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CasesApi
   */
  public deleteCase(id: string, fields?: Array<string>, options?: any) {
    return CasesApiFp(this.configuration)
      .deleteCase(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary RPC method to retrieve a specific case by its etag identifier.
   * @param {string} id
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CasesApi
   */
  public locateCase(id: string, fields?: Array<string>, options?: any) {
    return CasesApiFp(this.configuration)
      .locateCase(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary RPC method for searching cases.
   * @param {number} [page] Page number for pagination.
   * @param {number} [size] Number of results per page.
   * @param {string} [q] Query string for searching cases.
   * @param {Array<string>} [ids] List of specific case IDs to retrieve.
   * @param {string} [sort] Sorting criteria (e.g., field:asc).
   * @param {Array<string>} [fields] List of fields to include in the response.
   * @param {string} [filtersString] This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CasesApi
   */
  public searchCases(
    page?: number,
    size?: number,
    q?: string,
    ids?: Array<string>,
    sort?: string,
    fields?: Array<string>,
    filtersString?: string,
    options?: any
  ) {
    return CasesApiFp(this.configuration)
      .searchCases(page, size, q, ids, sort, fields, filtersString, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary RPC method for updating an existing case.
   * @param {string} inputId
   * @param {InputDataWithUpdatedFields} input
   * @param {Array<string>} [xJsonMask] List of JSON fields to update.
   * @param {Array<string>} [fields] List of fields to include in the response.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CasesApi
   */
  public updateCase(
    inputId: string,
    input: InputDataWithUpdatedFields,
    xJsonMask?: Array<string>,
    fields?: Array<string>,
    options?: any
  ) {
    return CasesApiFp(this.configuration)
      .updateCase(inputId, input, xJsonMask, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary RPC method for updating an existing case.
   * @param {string} inputId
   * @param {InputDataWithUpdatedFields1} input
   * @param {Array<string>} [xJsonMask] List of JSON fields to update.
   * @param {Array<string>} [fields] List of fields to include in the response.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CasesApi
   */
  public updateCase2(
    inputId: string,
    input: InputDataWithUpdatedFields1,
    xJsonMask?: Array<string>,
    fields?: Array<string>,
    options?: any
  ) {
    return CasesApiFp(this.configuration)
      .updateCase2(inputId, input, xJsonMask, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
