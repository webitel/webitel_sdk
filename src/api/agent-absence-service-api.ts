// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { InlineObject5 } from '../api'
// @ts-ignore
import { InlineObject6 } from '../api'
// @ts-ignore
import { WfmCreateAgentAbsenceResponse } from '../api'
// @ts-ignore
import { WfmCreateAgentsAbsencesBulkRequest } from '../api'
// @ts-ignore
import { WfmCreateAgentsAbsencesBulkResponse } from '../api'
// @ts-ignore
import { WfmDeleteAgentAbsenceResponse } from '../api'
// @ts-ignore
import { WfmReadAgentAbsencesResponse } from '../api'
// @ts-ignore
import { WfmSearchAgentsAbsencesResponse } from '../api'
// @ts-ignore
import { WfmUpdateAgentAbsenceResponse } from '../api'
/**
 * AgentAbsenceServiceApi - axios parameter creator
 * @export
 */
export const AgentAbsenceServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} itemAgentId
     * @param {InlineObject5} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentAbsence: async (
      itemAgentId: string,
      body: InlineObject5,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'itemAgentId' is not null or undefined
      if (itemAgentId === null || itemAgentId === undefined) {
        throw new RequiredError(
          'itemAgentId',
          'Required parameter itemAgentId was null or undefined when calling createAgentAbsence.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgentAbsence.'
        )
      }
      const localVarPath = `/wfm/agents/{item.agent.id}/absences`.replace(
        `{${'item.agent.id'}}`,
        encodeURIComponent(String(itemAgentId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {WfmCreateAgentsAbsencesBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentsAbsencesBulk: async (
      body: WfmCreateAgentsAbsencesBulkRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgentsAbsencesBulk.'
        )
      }
      const localVarPath = `/wfm/agents/absences`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentAbsence: async (
      agentId: string,
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling deleteAgentAbsence.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgentAbsence.'
        )
      }
      const localVarPath = `/wfm/agents/{agent_id}/absences/{id}`
        .replace(`{${'agent_id'}}`, encodeURIComponent(String(agentId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [absentAtFrom]
     * @param {string} [absentAtTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentAbsences: async (
      agentId: string,
      absentAtFrom?: string,
      absentAtTo?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling readAgentAbsences.'
        )
      }
      const localVarPath = `/wfm/agents/{agent_id}/absences`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agentId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (absentAtFrom !== undefined) {
        localVarQueryParameter['absent_at_from'] = absentAtFrom
      }

      if (absentAtTo !== undefined) {
        localVarQueryParameter['absent_at_to'] = absentAtTo
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [supervisorId]
     * @param {Array<string>} [teamId]
     * @param {Array<string>} [skillId]
     * @param {string} [absentAtFrom]
     * @param {string} [absentAtTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentsAbsences: async (
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      supervisorId?: Array<string>,
      teamId?: Array<string>,
      skillId?: Array<string>,
      absentAtFrom?: string,
      absentAtTo?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/wfm/agents/absences`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (supervisorId) {
        localVarQueryParameter['supervisor_id'] = supervisorId
      }

      if (teamId) {
        localVarQueryParameter['team_id'] = teamId
      }

      if (skillId) {
        localVarQueryParameter['skill_id'] = skillId
      }

      if (absentAtFrom !== undefined) {
        localVarQueryParameter['absent_at_from'] = absentAtFrom
      }

      if (absentAtTo !== undefined) {
        localVarQueryParameter['absent_at_to'] = absentAtTo
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} itemAgentId
     * @param {string} itemAbsenceId
     * @param {InlineObject6} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentAbsence: async (
      itemAgentId: string,
      itemAbsenceId: string,
      body: InlineObject6,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'itemAgentId' is not null or undefined
      if (itemAgentId === null || itemAgentId === undefined) {
        throw new RequiredError(
          'itemAgentId',
          'Required parameter itemAgentId was null or undefined when calling updateAgentAbsence.'
        )
      }
      // verify required parameter 'itemAbsenceId' is not null or undefined
      if (itemAbsenceId === null || itemAbsenceId === undefined) {
        throw new RequiredError(
          'itemAbsenceId',
          'Required parameter itemAbsenceId was null or undefined when calling updateAgentAbsence.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentAbsence.'
        )
      }
      const localVarPath = `/wfm/agents/{item.agent.id}/absences/{item.absence.id}`
        .replace(
          `{${'item.agent.id'}}`,
          encodeURIComponent(String(itemAgentId))
        )
        .replace(
          `{${'item.absence.id'}}`,
          encodeURIComponent(String(itemAbsenceId))
        )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AgentAbsenceServiceApi - functional programming interface
 * @export
 */
export const AgentAbsenceServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} itemAgentId
     * @param {InlineObject5} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAgentAbsence(
      itemAgentId: string,
      body: InlineObject5,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmCreateAgentAbsenceResponse>
    > {
      const localVarAxiosArgs = await AgentAbsenceServiceApiAxiosParamCreator(
        configuration
      ).createAgentAbsence(itemAgentId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {WfmCreateAgentsAbsencesBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAgentsAbsencesBulk(
      body: WfmCreateAgentsAbsencesBulkRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmCreateAgentsAbsencesBulkResponse>
    > {
      const localVarAxiosArgs = await AgentAbsenceServiceApiAxiosParamCreator(
        configuration
      ).createAgentsAbsencesBulk(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAgentAbsence(
      agentId: string,
      id: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmDeleteAgentAbsenceResponse>
    > {
      const localVarAxiosArgs = await AgentAbsenceServiceApiAxiosParamCreator(
        configuration
      ).deleteAgentAbsence(agentId, id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [absentAtFrom]
     * @param {string} [absentAtTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readAgentAbsences(
      agentId: string,
      absentAtFrom?: string,
      absentAtTo?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmReadAgentAbsencesResponse>
    > {
      const localVarAxiosArgs = await AgentAbsenceServiceApiAxiosParamCreator(
        configuration
      ).readAgentAbsences(agentId, absentAtFrom, absentAtTo, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [supervisorId]
     * @param {Array<string>} [teamId]
     * @param {Array<string>} [skillId]
     * @param {string} [absentAtFrom]
     * @param {string} [absentAtTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAgentsAbsences(
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      supervisorId?: Array<string>,
      teamId?: Array<string>,
      skillId?: Array<string>,
      absentAtFrom?: string,
      absentAtTo?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmSearchAgentsAbsencesResponse>
    > {
      const localVarAxiosArgs = await AgentAbsenceServiceApiAxiosParamCreator(
        configuration
      ).searchAgentsAbsences(
        q,
        page,
        size,
        sort,
        fields,
        supervisorId,
        teamId,
        skillId,
        absentAtFrom,
        absentAtTo,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} itemAgentId
     * @param {string} itemAbsenceId
     * @param {InlineObject6} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAgentAbsence(
      itemAgentId: string,
      itemAbsenceId: string,
      body: InlineObject6,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmUpdateAgentAbsenceResponse>
    > {
      const localVarAxiosArgs = await AgentAbsenceServiceApiAxiosParamCreator(
        configuration
      ).updateAgentAbsence(itemAgentId, itemAbsenceId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AgentAbsenceServiceApi - factory interface
 * @export
 */
export const AgentAbsenceServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {string} itemAgentId
     * @param {InlineObject5} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentAbsence(
      itemAgentId: string,
      body: InlineObject5,
      options?: any
    ): AxiosPromise<WfmCreateAgentAbsenceResponse> {
      return AgentAbsenceServiceApiFp(configuration)
        .createAgentAbsence(itemAgentId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {WfmCreateAgentsAbsencesBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentsAbsencesBulk(
      body: WfmCreateAgentsAbsencesBulkRequest,
      options?: any
    ): AxiosPromise<WfmCreateAgentsAbsencesBulkResponse> {
      return AgentAbsenceServiceApiFp(configuration)
        .createAgentsAbsencesBulk(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} agentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentAbsence(
      agentId: string,
      id: string,
      options?: any
    ): AxiosPromise<WfmDeleteAgentAbsenceResponse> {
      return AgentAbsenceServiceApiFp(configuration)
        .deleteAgentAbsence(agentId, id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [absentAtFrom]
     * @param {string} [absentAtTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentAbsences(
      agentId: string,
      absentAtFrom?: string,
      absentAtTo?: string,
      options?: any
    ): AxiosPromise<WfmReadAgentAbsencesResponse> {
      return AgentAbsenceServiceApiFp(configuration)
        .readAgentAbsences(agentId, absentAtFrom, absentAtTo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [supervisorId]
     * @param {Array<string>} [teamId]
     * @param {Array<string>} [skillId]
     * @param {string} [absentAtFrom]
     * @param {string} [absentAtTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentsAbsences(
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      supervisorId?: Array<string>,
      teamId?: Array<string>,
      skillId?: Array<string>,
      absentAtFrom?: string,
      absentAtTo?: string,
      options?: any
    ): AxiosPromise<WfmSearchAgentsAbsencesResponse> {
      return AgentAbsenceServiceApiFp(configuration)
        .searchAgentsAbsences(
          q,
          page,
          size,
          sort,
          fields,
          supervisorId,
          teamId,
          skillId,
          absentAtFrom,
          absentAtTo,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} itemAgentId
     * @param {string} itemAbsenceId
     * @param {InlineObject6} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentAbsence(
      itemAgentId: string,
      itemAbsenceId: string,
      body: InlineObject6,
      options?: any
    ): AxiosPromise<WfmUpdateAgentAbsenceResponse> {
      return AgentAbsenceServiceApiFp(configuration)
        .updateAgentAbsence(itemAgentId, itemAbsenceId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AgentAbsenceServiceApi - object-oriented interface
 * @export
 * @class AgentAbsenceServiceApi
 * @extends {BaseAPI}
 */
export class AgentAbsenceServiceApi extends BaseAPI {
  /**
   *
   * @param {string} itemAgentId
   * @param {InlineObject5} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentAbsenceServiceApi
   */
  public createAgentAbsence(
    itemAgentId: string,
    body: InlineObject5,
    options?: any
  ) {
    return AgentAbsenceServiceApiFp(this.configuration)
      .createAgentAbsence(itemAgentId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {WfmCreateAgentsAbsencesBulkRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentAbsenceServiceApi
   */
  public createAgentsAbsencesBulk(
    body: WfmCreateAgentsAbsencesBulkRequest,
    options?: any
  ) {
    return AgentAbsenceServiceApiFp(this.configuration)
      .createAgentsAbsencesBulk(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} agentId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentAbsenceServiceApi
   */
  public deleteAgentAbsence(agentId: string, id: string, options?: any) {
    return AgentAbsenceServiceApiFp(this.configuration)
      .deleteAgentAbsence(agentId, id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} agentId
   * @param {string} [absentAtFrom]
   * @param {string} [absentAtTo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentAbsenceServiceApi
   */
  public readAgentAbsences(
    agentId: string,
    absentAtFrom?: string,
    absentAtTo?: string,
    options?: any
  ) {
    return AgentAbsenceServiceApiFp(this.configuration)
      .readAgentAbsences(agentId, absentAtFrom, absentAtTo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [q]
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {Array<string>} [supervisorId]
   * @param {Array<string>} [teamId]
   * @param {Array<string>} [skillId]
   * @param {string} [absentAtFrom]
   * @param {string} [absentAtTo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentAbsenceServiceApi
   */
  public searchAgentsAbsences(
    q?: string,
    page?: number,
    size?: number,
    sort?: string,
    fields?: Array<string>,
    supervisorId?: Array<string>,
    teamId?: Array<string>,
    skillId?: Array<string>,
    absentAtFrom?: string,
    absentAtTo?: string,
    options?: any
  ) {
    return AgentAbsenceServiceApiFp(this.configuration)
      .searchAgentsAbsences(
        q,
        page,
        size,
        sort,
        fields,
        supervisorId,
        teamId,
        skillId,
        absentAtFrom,
        absentAtTo,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} itemAgentId
   * @param {string} itemAbsenceId
   * @param {InlineObject6} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentAbsenceServiceApi
   */
  public updateAgentAbsence(
    itemAgentId: string,
    itemAbsenceId: string,
    body: InlineObject6,
    options?: any
  ) {
    return AgentAbsenceServiceApiFp(this.configuration)
      .updateAgentAbsence(itemAgentId, itemAbsenceId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
