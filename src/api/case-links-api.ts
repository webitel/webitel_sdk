// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { CasesCaseLink } from '../api'
// @ts-ignore
import { CasesCaseLinkList } from '../api'
// @ts-ignore
import { GooglerpcStatus } from '../api'
// @ts-ignore
import { InlineObject } from '../api'
// @ts-ignore
import { InlineObject1 } from '../api'
/**
 * CaseLinksApi - axios parameter creator
 * @export
 */
export const CaseLinksApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} caseId new comment link
     * @param {Array<string>} [fields] result fields needed on the front-end for each comment
     * @param {string} [inputId]
     * @param {string} [inputUrl]
     * @param {string} [inputName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLink: async (
      caseId: string,
      fields?: Array<string>,
      inputId?: string,
      inputUrl?: string,
      inputName?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'caseId' is not null or undefined
      if (caseId === null || caseId === undefined) {
        throw new RequiredError(
          'caseId',
          'Required parameter caseId was null or undefined when calling createLink.'
        )
      }
      const localVarPath = `/cases/links/{caseId}`.replace(
        `{${'caseId'}}`,
        encodeURIComponent(String(caseId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (inputId !== undefined) {
        localVarQueryParameter['input.id'] = inputId
      }

      if (inputUrl !== undefined) {
        localVarQueryParameter['input.url'] = inputUrl
      }

      if (inputName !== undefined) {
        localVarQueryParameter['input.name'] = inputName
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLink: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteLink.'
        )
      }
      const localVarPath = `/cases/links/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary With Case
     * @param {string} caseId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {Array<string>} [ids]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLinks: async (
      caseId: string,
      page?: number,
      size?: number,
      q?: string,
      ids?: Array<string>,
      sort?: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'caseId' is not null or undefined
      if (caseId === null || caseId === undefined) {
        throw new RequiredError(
          'caseId',
          'Required parameter caseId was null or undefined when calling listLinks.'
        )
      }
      const localVarPath = `/cases/{caseId}/links`.replace(
        `{${'caseId'}}`,
        encodeURIComponent(String(caseId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (ids) {
        localVarQueryParameter['ids'] = ids
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id (id allowed)
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateLink: async (
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling locateLink.'
        )
      }
      const localVarPath = `/cases/links/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} inputId
     * @param {InlineObject} input
     * @param {Array<string>} [fields] string id &#x3D; 1;  on return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLink: async (
      inputId: string,
      input: InlineObject,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inputId' is not null or undefined
      if (inputId === null || inputId === undefined) {
        throw new RequiredError(
          'inputId',
          'Required parameter inputId was null or undefined when calling updateLink.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateLink.'
        )
      }
      const localVarPath = `/cases/links/{input.id}`.replace(
        `{${'input.id'}}`,
        encodeURIComponent(String(inputId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} inputId
     * @param {InlineObject1} input
     * @param {Array<string>} [fields] string id &#x3D; 1;  on return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLink2: async (
      inputId: string,
      input: InlineObject1,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inputId' is not null or undefined
      if (inputId === null || inputId === undefined) {
        throw new RequiredError(
          'inputId',
          'Required parameter inputId was null or undefined when calling updateLink2.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateLink2.'
        )
      }
      const localVarPath = `/cases/links/{input.id}`.replace(
        `{${'input.id'}}`,
        encodeURIComponent(String(inputId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CaseLinksApi - functional programming interface
 * @export
 */
export const CaseLinksApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} caseId new comment link
     * @param {Array<string>} [fields] result fields needed on the front-end for each comment
     * @param {string} [inputId]
     * @param {string} [inputUrl]
     * @param {string} [inputName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createLink(
      caseId: string,
      fields?: Array<string>,
      inputId?: string,
      inputUrl?: string,
      inputName?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCaseLink>
    > {
      const localVarAxiosArgs = await CaseLinksApiAxiosParamCreator(
        configuration
      ).createLink(caseId, fields, inputId, inputUrl, inputName, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteLink(
      id: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCaseLink>
    > {
      const localVarAxiosArgs = await CaseLinksApiAxiosParamCreator(
        configuration
      ).deleteLink(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary With Case
     * @param {string} caseId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {Array<string>} [ids]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listLinks(
      caseId: string,
      page?: number,
      size?: number,
      q?: string,
      ids?: Array<string>,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesCaseLinkList>
    > {
      const localVarAxiosArgs = await CaseLinksApiAxiosParamCreator(
        configuration
      ).listLinks(caseId, page, size, q, ids, sort, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id (id allowed)
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locateLink(
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCaseLink>
    > {
      const localVarAxiosArgs = await CaseLinksApiAxiosParamCreator(
        configuration
      ).locateLink(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} inputId
     * @param {InlineObject} input
     * @param {Array<string>} [fields] string id &#x3D; 1;  on return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateLink(
      inputId: string,
      input: InlineObject,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCaseLink>
    > {
      const localVarAxiosArgs = await CaseLinksApiAxiosParamCreator(
        configuration
      ).updateLink(inputId, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} inputId
     * @param {InlineObject1} input
     * @param {Array<string>} [fields] string id &#x3D; 1;  on return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateLink2(
      inputId: string,
      input: InlineObject1,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCaseLink>
    > {
      const localVarAxiosArgs = await CaseLinksApiAxiosParamCreator(
        configuration
      ).updateLink2(inputId, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * CaseLinksApi - factory interface
 * @export
 */
export const CaseLinksApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {string} caseId new comment link
     * @param {Array<string>} [fields] result fields needed on the front-end for each comment
     * @param {string} [inputId]
     * @param {string} [inputUrl]
     * @param {string} [inputName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLink(
      caseId: string,
      fields?: Array<string>,
      inputId?: string,
      inputUrl?: string,
      inputName?: string,
      options?: any
    ): AxiosPromise<CasesCaseLink> {
      return CaseLinksApiFp(configuration)
        .createLink(caseId, fields, inputId, inputUrl, inputName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLink(id: string, options?: any): AxiosPromise<CasesCaseLink> {
      return CaseLinksApiFp(configuration)
        .deleteLink(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary With Case
     * @param {string} caseId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {Array<string>} [ids]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLinks(
      caseId: string,
      page?: number,
      size?: number,
      q?: string,
      ids?: Array<string>,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesCaseLinkList> {
      return CaseLinksApiFp(configuration)
        .listLinks(caseId, page, size, q, ids, sort, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id (id allowed)
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateLink(
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesCaseLink> {
      return CaseLinksApiFp(configuration)
        .locateLink(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} inputId
     * @param {InlineObject} input
     * @param {Array<string>} [fields] string id &#x3D; 1;  on return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLink(
      inputId: string,
      input: InlineObject,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesCaseLink> {
      return CaseLinksApiFp(configuration)
        .updateLink(inputId, input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} inputId
     * @param {InlineObject1} input
     * @param {Array<string>} [fields] string id &#x3D; 1;  on return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLink2(
      inputId: string,
      input: InlineObject1,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesCaseLink> {
      return CaseLinksApiFp(configuration)
        .updateLink2(inputId, input, fields, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CaseLinksApi - object-oriented interface
 * @export
 * @class CaseLinksApi
 * @extends {BaseAPI}
 */
export class CaseLinksApi extends BaseAPI {
  /**
   *
   * @param {string} caseId new comment link
   * @param {Array<string>} [fields] result fields needed on the front-end for each comment
   * @param {string} [inputId]
   * @param {string} [inputUrl]
   * @param {string} [inputName]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseLinksApi
   */
  public createLink(
    caseId: string,
    fields?: Array<string>,
    inputId?: string,
    inputUrl?: string,
    inputName?: string,
    options?: any
  ) {
    return CaseLinksApiFp(this.configuration)
      .createLink(caseId, fields, inputId, inputUrl, inputName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseLinksApi
   */
  public deleteLink(id: string, options?: any) {
    return CaseLinksApiFp(this.configuration)
      .deleteLink(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary With Case
   * @param {string} caseId
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {Array<string>} [ids]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseLinksApi
   */
  public listLinks(
    caseId: string,
    page?: number,
    size?: number,
    q?: string,
    ids?: Array<string>,
    sort?: string,
    fields?: Array<string>,
    options?: any
  ) {
    return CaseLinksApiFp(this.configuration)
      .listLinks(caseId, page, size, q, ids, sort, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id (id allowed)
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseLinksApi
   */
  public locateLink(id: string, fields?: Array<string>, options?: any) {
    return CaseLinksApiFp(this.configuration)
      .locateLink(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} inputId
   * @param {InlineObject} input
   * @param {Array<string>} [fields] string id &#x3D; 1;  on return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseLinksApi
   */
  public updateLink(
    inputId: string,
    input: InlineObject,
    fields?: Array<string>,
    options?: any
  ) {
    return CaseLinksApiFp(this.configuration)
      .updateLink(inputId, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} inputId
   * @param {InlineObject1} input
   * @param {Array<string>} [fields] string id &#x3D; 1;  on return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseLinksApi
   */
  public updateLink2(
    inputId: string,
    input: InlineObject1,
    fields?: Array<string>,
    options?: any
  ) {
    return CaseLinksApiFp(this.configuration)
      .updateLink2(inputId, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
