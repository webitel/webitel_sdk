// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.12.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { WebitelChatLookup } from '../api'
/**
 * ContactLinkingServiceApi - axios parameter creator
 * @export
 */
export const ContactLinkingServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary CreateContactFromConversation creates new contact from the data existing in the conversation and after that links this contact to the external user.
     * @param {string} conversationId
     * @param {string} [timezoneId]
     * @param {string} [timezoneName]
     * @param {string} [ownerId]
     * @param {string} [ownerName]
     * @param {Array<string>} [label]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContactFromConversation: async (
      conversationId: string,
      timezoneId?: string,
      timezoneName?: string,
      ownerId?: string,
      ownerName?: string,
      label?: Array<string>,
      name?: string,
      description?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'conversationId' is not null or undefined
      if (conversationId === null || conversationId === undefined) {
        throw new RequiredError(
          'conversationId',
          'Required parameter conversationId was null or undefined when calling createContactFromConversation.'
        )
      }
      const localVarPath = `/chat/{conversation_id}/contact`.replace(
        `{${'conversation_id'}}`,
        encodeURIComponent(String(conversationId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (timezoneId !== undefined) {
        localVarQueryParameter['timezone.id'] = timezoneId
      }

      if (timezoneName !== undefined) {
        localVarQueryParameter['timezone.name'] = timezoneName
      }

      if (ownerId !== undefined) {
        localVarQueryParameter['owner.id'] = ownerId
      }

      if (ownerName !== undefined) {
        localVarQueryParameter['owner.name'] = ownerName
      }

      if (label) {
        localVarQueryParameter['label'] = label
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      if (description !== undefined) {
        localVarQueryParameter['description'] = description
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary LinkContactToClient creates connection between existing internal contact and external client.
     * @param {string} conversationId
     * @param {string} [contactId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkContactToClient: async (
      conversationId: string,
      contactId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'conversationId' is not null or undefined
      if (conversationId === null || conversationId === undefined) {
        throw new RequiredError(
          'conversationId',
          'Required parameter conversationId was null or undefined when calling linkContactToClient.'
        )
      }
      const localVarPath = `/chat/{conversation_id}/link`.replace(
        `{${'conversation_id'}}`,
        encodeURIComponent(String(conversationId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (contactId !== undefined) {
        localVarQueryParameter['contact_id'] = contactId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ContactLinkingServiceApi - functional programming interface
 * @export
 */
export const ContactLinkingServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary CreateContactFromConversation creates new contact from the data existing in the conversation and after that links this contact to the external user.
     * @param {string} conversationId
     * @param {string} [timezoneId]
     * @param {string} [timezoneName]
     * @param {string} [ownerId]
     * @param {string} [ownerName]
     * @param {Array<string>} [label]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createContactFromConversation(
      conversationId: string,
      timezoneId?: string,
      timezoneName?: string,
      ownerId?: string,
      ownerName?: string,
      label?: Array<string>,
      name?: string,
      description?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelChatLookup>
    > {
      const localVarAxiosArgs = await ContactLinkingServiceApiAxiosParamCreator(
        configuration
      ).createContactFromConversation(
        conversationId,
        timezoneId,
        timezoneName,
        ownerId,
        ownerName,
        label,
        name,
        description,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary LinkContactToClient creates connection between existing internal contact and external client.
     * @param {string} conversationId
     * @param {string} [contactId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async linkContactToClient(
      conversationId: string,
      contactId?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await ContactLinkingServiceApiAxiosParamCreator(
        configuration
      ).linkContactToClient(conversationId, contactId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * ContactLinkingServiceApi - factory interface
 * @export
 */
export const ContactLinkingServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary CreateContactFromConversation creates new contact from the data existing in the conversation and after that links this contact to the external user.
     * @param {string} conversationId
     * @param {string} [timezoneId]
     * @param {string} [timezoneName]
     * @param {string} [ownerId]
     * @param {string} [ownerName]
     * @param {Array<string>} [label]
     * @param {string} [name]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContactFromConversation(
      conversationId: string,
      timezoneId?: string,
      timezoneName?: string,
      ownerId?: string,
      ownerName?: string,
      label?: Array<string>,
      name?: string,
      description?: string,
      options?: any
    ): AxiosPromise<WebitelChatLookup> {
      return ContactLinkingServiceApiFp(configuration)
        .createContactFromConversation(
          conversationId,
          timezoneId,
          timezoneName,
          ownerId,
          ownerName,
          label,
          name,
          description,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary LinkContactToClient creates connection between existing internal contact and external client.
     * @param {string} conversationId
     * @param {string} [contactId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkContactToClient(
      conversationId: string,
      contactId?: string,
      options?: any
    ): AxiosPromise<object> {
      return ContactLinkingServiceApiFp(configuration)
        .linkContactToClient(conversationId, contactId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ContactLinkingServiceApi - object-oriented interface
 * @export
 * @class ContactLinkingServiceApi
 * @extends {BaseAPI}
 */
export class ContactLinkingServiceApi extends BaseAPI {
  /**
   *
   * @summary CreateContactFromConversation creates new contact from the data existing in the conversation and after that links this contact to the external user.
   * @param {string} conversationId
   * @param {string} [timezoneId]
   * @param {string} [timezoneName]
   * @param {string} [ownerId]
   * @param {string} [ownerName]
   * @param {Array<string>} [label]
   * @param {string} [name]
   * @param {string} [description]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactLinkingServiceApi
   */
  public createContactFromConversation(
    conversationId: string,
    timezoneId?: string,
    timezoneName?: string,
    ownerId?: string,
    ownerName?: string,
    label?: Array<string>,
    name?: string,
    description?: string,
    options?: any
  ) {
    return ContactLinkingServiceApiFp(this.configuration)
      .createContactFromConversation(
        conversationId,
        timezoneId,
        timezoneName,
        ownerId,
        ownerName,
        label,
        name,
        description,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary LinkContactToClient creates connection between existing internal contact and external client.
   * @param {string} conversationId
   * @param {string} [contactId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactLinkingServiceApi
   */
  public linkContactToClient(
    conversationId: string,
    contactId?: string,
    options?: any
  ) {
    return ContactLinkingServiceApiFp(this.configuration)
      .linkContactToClient(conversationId, contactId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
