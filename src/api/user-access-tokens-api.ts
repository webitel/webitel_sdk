// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { ApiUserAccessToken } from '../api'
// @ts-ignore
import { ApiUserAccessTokenList } from '../api'
// @ts-ignore
import { ProcessingTokenUserIdRequiredAuthorizationTokenUsageOptionalShortDescription } from '../api'
// @ts-ignore
import { RequiredIdentificationModificationsAbout } from '../api'
// @ts-ignore
import { RequiredIdentificationModificationsAbout1 } from '../api'
/**
 * UserAccessTokensApi - axios parameter creator
 * @export
 */
export const UserAccessTokensApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} tokenUserId identifier
     * @param {ProcessingTokenUserIdRequiredAuthorizationTokenUsageOptionalShortDescription} token
     * @param {boolean} [enable] ObjectId user &#x3D; 1; // [required]  string usage &#x3D; 2;  // [optional] usage description  bool enable &#x3D; 3;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserAccessToken: async (
      tokenUserId: string,
      token: ProcessingTokenUserIdRequiredAuthorizationTokenUsageOptionalShortDescription,
      enable?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tokenUserId' is not null or undefined
      if (tokenUserId === null || tokenUserId === undefined) {
        throw new RequiredError(
          'tokenUserId',
          'Required parameter tokenUserId was null or undefined when calling addUserAccessToken.'
        )
      }
      // verify required parameter 'token' is not null or undefined
      if (token === null || token === undefined) {
        throw new RequiredError(
          'token',
          'Required parameter token was null or undefined when calling addUserAccessToken.'
        )
      }
      const localVarPath = `/users/{token.user.id}/tokens`.replace(
        `{${'token.user.id'}}`,
        encodeURIComponent(String(tokenUserId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (enable !== undefined) {
        localVarQueryParameter['enable'] = enable
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof token !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(token !== undefined ? token : {})
        : token || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} userId identifier
     * @param {string} id tokenKey::uuid
     * @param {string} [userName] display name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAccessToken: async (
      userId: string,
      id: string,
      userName?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          'userId',
          'Required parameter userId was null or undefined when calling deleteUserAccessToken.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteUserAccessToken.'
        )
      }
      const localVarPath = `/users/{user.id}/tokens/{id}`
        .replace(`{${'user.id'}}`, encodeURIComponent(String(userId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (userName !== undefined) {
        localVarQueryParameter['user.name'] = userName
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} userId identifier
     * @param {string} id tokenKey::uuid
     * @param {string} [userName] display name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAccessToken: async (
      userId: string,
      id: string,
      userName?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          'userId',
          'Required parameter userId was null or undefined when calling getUserAccessToken.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling getUserAccessToken.'
        )
      }
      const localVarPath = `/users/{user.id}/tokens/{id}`
        .replace(`{${'user.id'}}`, encodeURIComponent(String(userId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (userName !== undefined) {
        localVarQueryParameter['user.name'] = userName
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} userId identifier
     * @param {string} [userName] display name
     * @param {string} [q] int32 page &#x3D; 2; int64 size &#x3D; 3;  .usage ILIKE :q
     * @param {Array<string>} [fields] ----- Search Options -------------------------  select: output (fields,...)
     * @param {Array<string>} [sort] select: order by (fields,...)
     * @param {number} [page] select: offset {page}
     * @param {number} [size] select: limit {size}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAccessToken: async (
      userId: string,
      userName?: string,
      q?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      page?: number,
      size?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          'userId',
          'Required parameter userId was null or undefined when calling listUserAccessToken.'
        )
      }
      const localVarPath = `/users/{user.id}/tokens`.replace(
        `{${'user.id'}}`,
        encodeURIComponent(String(userId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (userName !== undefined) {
        localVarQueryParameter['user.name'] = userName
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} updateUserId identifier
     * @param {string} updateId tokenKey::token_key
     * @param {RequiredIdentificationModificationsAbout} update
     * @param {Array<string>} [fields] [optional] PATCH implementation
     * @param {boolean} [enable]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserAccessToken: async (
      updateUserId: string,
      updateId: string,
      update: RequiredIdentificationModificationsAbout,
      fields?: Array<string>,
      enable?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateUserId' is not null or undefined
      if (updateUserId === null || updateUserId === undefined) {
        throw new RequiredError(
          'updateUserId',
          'Required parameter updateUserId was null or undefined when calling updateUserAccessToken.'
        )
      }
      // verify required parameter 'updateId' is not null or undefined
      if (updateId === null || updateId === undefined) {
        throw new RequiredError(
          'updateId',
          'Required parameter updateId was null or undefined when calling updateUserAccessToken.'
        )
      }
      // verify required parameter 'update' is not null or undefined
      if (update === null || update === undefined) {
        throw new RequiredError(
          'update',
          'Required parameter update was null or undefined when calling updateUserAccessToken.'
        )
      }
      const localVarPath = `/users/{update.user.id}/tokens/{update.id}`
        .replace(
          `{${'update.user.id'}}`,
          encodeURIComponent(String(updateUserId))
        )
        .replace(`{${'update.id'}}`, encodeURIComponent(String(updateId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (enable !== undefined) {
        localVarQueryParameter['enable'] = enable
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof update !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(update !== undefined ? update : {})
        : update || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} updateUserId identifier
     * @param {string} updateId tokenKey::token_key
     * @param {RequiredIdentificationModificationsAbout1} update
     * @param {Array<string>} [fields] [optional] PATCH implementation
     * @param {boolean} [enable]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserAccessToken2: async (
      updateUserId: string,
      updateId: string,
      update: RequiredIdentificationModificationsAbout1,
      fields?: Array<string>,
      enable?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateUserId' is not null or undefined
      if (updateUserId === null || updateUserId === undefined) {
        throw new RequiredError(
          'updateUserId',
          'Required parameter updateUserId was null or undefined when calling updateUserAccessToken2.'
        )
      }
      // verify required parameter 'updateId' is not null or undefined
      if (updateId === null || updateId === undefined) {
        throw new RequiredError(
          'updateId',
          'Required parameter updateId was null or undefined when calling updateUserAccessToken2.'
        )
      }
      // verify required parameter 'update' is not null or undefined
      if (update === null || update === undefined) {
        throw new RequiredError(
          'update',
          'Required parameter update was null or undefined when calling updateUserAccessToken2.'
        )
      }
      const localVarPath = `/users/{update.user.id}/tokens/{update.id}`
        .replace(
          `{${'update.user.id'}}`,
          encodeURIComponent(String(updateUserId))
        )
        .replace(`{${'update.id'}}`, encodeURIComponent(String(updateId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (enable !== undefined) {
        localVarQueryParameter['enable'] = enable
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof update !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(update !== undefined ? update : {})
        : update || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserAccessTokensApi - functional programming interface
 * @export
 */
export const UserAccessTokensApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} tokenUserId identifier
     * @param {ProcessingTokenUserIdRequiredAuthorizationTokenUsageOptionalShortDescription} token
     * @param {boolean} [enable] ObjectId user &#x3D; 1; // [required]  string usage &#x3D; 2;  // [optional] usage description  bool enable &#x3D; 3;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addUserAccessToken(
      tokenUserId: string,
      token: ProcessingTokenUserIdRequiredAuthorizationTokenUsageOptionalShortDescription,
      enable?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiUserAccessToken>
    > {
      const localVarAxiosArgs = await UserAccessTokensApiAxiosParamCreator(
        configuration
      ).addUserAccessToken(tokenUserId, token, enable, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} userId identifier
     * @param {string} id tokenKey::uuid
     * @param {string} [userName] display name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserAccessToken(
      userId: string,
      id: string,
      userName?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiUserAccessToken>
    > {
      const localVarAxiosArgs = await UserAccessTokensApiAxiosParamCreator(
        configuration
      ).deleteUserAccessToken(userId, id, userName, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} userId identifier
     * @param {string} id tokenKey::uuid
     * @param {string} [userName] display name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserAccessToken(
      userId: string,
      id: string,
      userName?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiUserAccessToken>
    > {
      const localVarAxiosArgs = await UserAccessTokensApiAxiosParamCreator(
        configuration
      ).getUserAccessToken(userId, id, userName, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} userId identifier
     * @param {string} [userName] display name
     * @param {string} [q] int32 page &#x3D; 2; int64 size &#x3D; 3;  .usage ILIKE :q
     * @param {Array<string>} [fields] ----- Search Options -------------------------  select: output (fields,...)
     * @param {Array<string>} [sort] select: order by (fields,...)
     * @param {number} [page] select: offset {page}
     * @param {number} [size] select: limit {size}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUserAccessToken(
      userId: string,
      userName?: string,
      q?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiUserAccessTokenList>
    > {
      const localVarAxiosArgs = await UserAccessTokensApiAxiosParamCreator(
        configuration
      ).listUserAccessToken(
        userId,
        userName,
        q,
        fields,
        sort,
        page,
        size,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} updateUserId identifier
     * @param {string} updateId tokenKey::token_key
     * @param {RequiredIdentificationModificationsAbout} update
     * @param {Array<string>} [fields] [optional] PATCH implementation
     * @param {boolean} [enable]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserAccessToken(
      updateUserId: string,
      updateId: string,
      update: RequiredIdentificationModificationsAbout,
      fields?: Array<string>,
      enable?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiUserAccessToken>
    > {
      const localVarAxiosArgs = await UserAccessTokensApiAxiosParamCreator(
        configuration
      ).updateUserAccessToken(
        updateUserId,
        updateId,
        update,
        fields,
        enable,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} updateUserId identifier
     * @param {string} updateId tokenKey::token_key
     * @param {RequiredIdentificationModificationsAbout1} update
     * @param {Array<string>} [fields] [optional] PATCH implementation
     * @param {boolean} [enable]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserAccessToken2(
      updateUserId: string,
      updateId: string,
      update: RequiredIdentificationModificationsAbout1,
      fields?: Array<string>,
      enable?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiUserAccessToken>
    > {
      const localVarAxiosArgs = await UserAccessTokensApiAxiosParamCreator(
        configuration
      ).updateUserAccessToken2(
        updateUserId,
        updateId,
        update,
        fields,
        enable,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * UserAccessTokensApi - factory interface
 * @export
 */
export const UserAccessTokensApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {string} tokenUserId identifier
     * @param {ProcessingTokenUserIdRequiredAuthorizationTokenUsageOptionalShortDescription} token
     * @param {boolean} [enable] ObjectId user &#x3D; 1; // [required]  string usage &#x3D; 2;  // [optional] usage description  bool enable &#x3D; 3;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserAccessToken(
      tokenUserId: string,
      token: ProcessingTokenUserIdRequiredAuthorizationTokenUsageOptionalShortDescription,
      enable?: boolean,
      options?: any
    ): AxiosPromise<ApiUserAccessToken> {
      return UserAccessTokensApiFp(configuration)
        .addUserAccessToken(tokenUserId, token, enable, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} userId identifier
     * @param {string} id tokenKey::uuid
     * @param {string} [userName] display name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAccessToken(
      userId: string,
      id: string,
      userName?: string,
      options?: any
    ): AxiosPromise<ApiUserAccessToken> {
      return UserAccessTokensApiFp(configuration)
        .deleteUserAccessToken(userId, id, userName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} userId identifier
     * @param {string} id tokenKey::uuid
     * @param {string} [userName] display name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAccessToken(
      userId: string,
      id: string,
      userName?: string,
      options?: any
    ): AxiosPromise<ApiUserAccessToken> {
      return UserAccessTokensApiFp(configuration)
        .getUserAccessToken(userId, id, userName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} userId identifier
     * @param {string} [userName] display name
     * @param {string} [q] int32 page &#x3D; 2; int64 size &#x3D; 3;  .usage ILIKE :q
     * @param {Array<string>} [fields] ----- Search Options -------------------------  select: output (fields,...)
     * @param {Array<string>} [sort] select: order by (fields,...)
     * @param {number} [page] select: offset {page}
     * @param {number} [size] select: limit {size}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAccessToken(
      userId: string,
      userName?: string,
      q?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      page?: number,
      size?: number,
      options?: any
    ): AxiosPromise<ApiUserAccessTokenList> {
      return UserAccessTokensApiFp(configuration)
        .listUserAccessToken(
          userId,
          userName,
          q,
          fields,
          sort,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} updateUserId identifier
     * @param {string} updateId tokenKey::token_key
     * @param {RequiredIdentificationModificationsAbout} update
     * @param {Array<string>} [fields] [optional] PATCH implementation
     * @param {boolean} [enable]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserAccessToken(
      updateUserId: string,
      updateId: string,
      update: RequiredIdentificationModificationsAbout,
      fields?: Array<string>,
      enable?: boolean,
      options?: any
    ): AxiosPromise<ApiUserAccessToken> {
      return UserAccessTokensApiFp(configuration)
        .updateUserAccessToken(
          updateUserId,
          updateId,
          update,
          fields,
          enable,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} updateUserId identifier
     * @param {string} updateId tokenKey::token_key
     * @param {RequiredIdentificationModificationsAbout1} update
     * @param {Array<string>} [fields] [optional] PATCH implementation
     * @param {boolean} [enable]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserAccessToken2(
      updateUserId: string,
      updateId: string,
      update: RequiredIdentificationModificationsAbout1,
      fields?: Array<string>,
      enable?: boolean,
      options?: any
    ): AxiosPromise<ApiUserAccessToken> {
      return UserAccessTokensApiFp(configuration)
        .updateUserAccessToken2(
          updateUserId,
          updateId,
          update,
          fields,
          enable,
          options
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UserAccessTokensApi - object-oriented interface
 * @export
 * @class UserAccessTokensApi
 * @extends {BaseAPI}
 */
export class UserAccessTokensApi extends BaseAPI {
  /**
   *
   * @param {string} tokenUserId identifier
   * @param {ProcessingTokenUserIdRequiredAuthorizationTokenUsageOptionalShortDescription} token
   * @param {boolean} [enable] ObjectId user &#x3D; 1; // [required]  string usage &#x3D; 2;  // [optional] usage description  bool enable &#x3D; 3;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccessTokensApi
   */
  public addUserAccessToken(
    tokenUserId: string,
    token: ProcessingTokenUserIdRequiredAuthorizationTokenUsageOptionalShortDescription,
    enable?: boolean,
    options?: any
  ) {
    return UserAccessTokensApiFp(this.configuration)
      .addUserAccessToken(tokenUserId, token, enable, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} userId identifier
   * @param {string} id tokenKey::uuid
   * @param {string} [userName] display name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccessTokensApi
   */
  public deleteUserAccessToken(
    userId: string,
    id: string,
    userName?: string,
    options?: any
  ) {
    return UserAccessTokensApiFp(this.configuration)
      .deleteUserAccessToken(userId, id, userName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} userId identifier
   * @param {string} id tokenKey::uuid
   * @param {string} [userName] display name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccessTokensApi
   */
  public getUserAccessToken(
    userId: string,
    id: string,
    userName?: string,
    options?: any
  ) {
    return UserAccessTokensApiFp(this.configuration)
      .getUserAccessToken(userId, id, userName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} userId identifier
   * @param {string} [userName] display name
   * @param {string} [q] int32 page &#x3D; 2; int64 size &#x3D; 3;  .usage ILIKE :q
   * @param {Array<string>} [fields] ----- Search Options -------------------------  select: output (fields,...)
   * @param {Array<string>} [sort] select: order by (fields,...)
   * @param {number} [page] select: offset {page}
   * @param {number} [size] select: limit {size}
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccessTokensApi
   */
  public listUserAccessToken(
    userId: string,
    userName?: string,
    q?: string,
    fields?: Array<string>,
    sort?: Array<string>,
    page?: number,
    size?: number,
    options?: any
  ) {
    return UserAccessTokensApiFp(this.configuration)
      .listUserAccessToken(
        userId,
        userName,
        q,
        fields,
        sort,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} updateUserId identifier
   * @param {string} updateId tokenKey::token_key
   * @param {RequiredIdentificationModificationsAbout} update
   * @param {Array<string>} [fields] [optional] PATCH implementation
   * @param {boolean} [enable]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccessTokensApi
   */
  public updateUserAccessToken(
    updateUserId: string,
    updateId: string,
    update: RequiredIdentificationModificationsAbout,
    fields?: Array<string>,
    enable?: boolean,
    options?: any
  ) {
    return UserAccessTokensApiFp(this.configuration)
      .updateUserAccessToken(
        updateUserId,
        updateId,
        update,
        fields,
        enable,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} updateUserId identifier
   * @param {string} updateId tokenKey::token_key
   * @param {RequiredIdentificationModificationsAbout1} update
   * @param {Array<string>} [fields] [optional] PATCH implementation
   * @param {boolean} [enable]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccessTokensApi
   */
  public updateUserAccessToken2(
    updateUserId: string,
    updateId: string,
    update: RequiredIdentificationModificationsAbout1,
    fields?: Array<string>,
    enable?: boolean,
    options?: any
  ) {
    return UserAccessTokensApiFp(this.configuration)
      .updateUserAccessToken2(
        updateUserId,
        updateId,
        update,
        fields,
        enable,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
