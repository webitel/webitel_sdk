// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { WebitelChatGetContactChatHistoryResponse } from '../api'
/**
 * ContactsChatCatalogApi - axios parameter creator
 * @export
 */
export const ContactsChatCatalogApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} contactId Contact identificator
     * @param {string} chatId Unique chat dialog
     * @param {string} [offsetId] Messages ONLY starting from the specified message ID
     * @param {string} [offsetDate] Messages ONLY been sent before the specified epochtime(milli).
     * @param {number} [limit] Number of messages to return.
     * @param {string} [q] Search term: message.text
     * @param {Array<string>} [fields] Fields to return into result.
     * @param {string} [groupString] This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactChatHistory: async (
      contactId: string,
      chatId: string,
      offsetId?: string,
      offsetDate?: string,
      limit?: number,
      q?: string,
      fields?: Array<string>,
      groupString?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling getContactChatHistory.'
        )
      }
      // verify required parameter 'chatId' is not null or undefined
      if (chatId === null || chatId === undefined) {
        throw new RequiredError(
          'chatId',
          'Required parameter chatId was null or undefined when calling getContactChatHistory.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/chat/{chat_id}/messages`
        .replace(`{${'contact_id'}}`, encodeURIComponent(String(contactId)))
        .replace(`{${'chat_id'}}`, encodeURIComponent(String(chatId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (offsetId !== undefined) {
        localVarQueryParameter['offset.id'] = offsetId
      }

      if (offsetDate !== undefined) {
        localVarQueryParameter['offset.date'] = offsetDate
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (groupString !== undefined) {
        localVarQueryParameter['group[string]'] = groupString
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ContactsChatCatalogApi - functional programming interface
 * @export
 */
export const ContactsChatCatalogApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} contactId Contact identificator
     * @param {string} chatId Unique chat dialog
     * @param {string} [offsetId] Messages ONLY starting from the specified message ID
     * @param {string} [offsetDate] Messages ONLY been sent before the specified epochtime(milli).
     * @param {number} [limit] Number of messages to return.
     * @param {string} [q] Search term: message.text
     * @param {Array<string>} [fields] Fields to return into result.
     * @param {string} [groupString] This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContactChatHistory(
      contactId: string,
      chatId: string,
      offsetId?: string,
      offsetDate?: string,
      limit?: number,
      q?: string,
      fields?: Array<string>,
      groupString?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelChatGetContactChatHistoryResponse>
    > {
      const localVarAxiosArgs = await ContactsChatCatalogApiAxiosParamCreator(
        configuration
      ).getContactChatHistory(
        contactId,
        chatId,
        offsetId,
        offsetDate,
        limit,
        q,
        fields,
        groupString,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * ContactsChatCatalogApi - factory interface
 * @export
 */
export const ContactsChatCatalogApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {string} contactId Contact identificator
     * @param {string} chatId Unique chat dialog
     * @param {string} [offsetId] Messages ONLY starting from the specified message ID
     * @param {string} [offsetDate] Messages ONLY been sent before the specified epochtime(milli).
     * @param {number} [limit] Number of messages to return.
     * @param {string} [q] Search term: message.text
     * @param {Array<string>} [fields] Fields to return into result.
     * @param {string} [groupString] This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactChatHistory(
      contactId: string,
      chatId: string,
      offsetId?: string,
      offsetDate?: string,
      limit?: number,
      q?: string,
      fields?: Array<string>,
      groupString?: string,
      options?: any
    ): AxiosPromise<WebitelChatGetContactChatHistoryResponse> {
      return ContactsChatCatalogApiFp(configuration)
        .getContactChatHistory(
          contactId,
          chatId,
          offsetId,
          offsetDate,
          limit,
          q,
          fields,
          groupString,
          options
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ContactsChatCatalogApi - object-oriented interface
 * @export
 * @class ContactsChatCatalogApi
 * @extends {BaseAPI}
 */
export class ContactsChatCatalogApi extends BaseAPI {
  /**
   *
   * @param {string} contactId Contact identificator
   * @param {string} chatId Unique chat dialog
   * @param {string} [offsetId] Messages ONLY starting from the specified message ID
   * @param {string} [offsetDate] Messages ONLY been sent before the specified epochtime(milli).
   * @param {number} [limit] Number of messages to return.
   * @param {string} [q] Search term: message.text
   * @param {Array<string>} [fields] Fields to return into result.
   * @param {string} [groupString] This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactsChatCatalogApi
   */
  public getContactChatHistory(
    contactId: string,
    chatId: string,
    offsetId?: string,
    offsetDate?: string,
    limit?: number,
    q?: string,
    fields?: Array<string>,
    groupString?: string,
    options?: any
  ) {
    return ContactsChatCatalogApiFp(this.configuration)
      .getContactChatHistory(
        contactId,
        chatId,
        offsetId,
        offsetDate,
        limit,
        q,
        fields,
        groupString,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
