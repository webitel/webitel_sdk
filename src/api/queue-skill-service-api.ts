// tslint:disable
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.12.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { EngineCreateQueueSkillRequest } from '../api'
// @ts-ignore
import { EngineListQueueSkill } from '../api'
// @ts-ignore
import { EnginePatchQueueSkillRequest } from '../api'
// @ts-ignore
import { EngineQueueSkill } from '../api'
// @ts-ignore
import { EngineUpdateQueueSkillRequest } from '../api'
// @ts-ignore
import { RuntimeError } from '../api'
/**
 * QueueSkillServiceApi - axios parameter creator
 * @export
 */
export const QueueSkillServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} queueId
     * @param {EngineCreateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServiceCreateQueueSkill: async (
      queueId: number,
      body: EngineCreateQueueSkillRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling queueSkillServiceCreateQueueSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling queueSkillServiceCreateQueueSkill.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/skills`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queueId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServiceDeleteQueueSkill: async (
      queueId: number,
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling queueSkillServiceDeleteQueueSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling queueSkillServiceDeleteQueueSkill.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/skills/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EnginePatchQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServicePatchQueueSkill: async (
      queueId: number,
      id: number,
      body: EnginePatchQueueSkillRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling queueSkillServicePatchQueueSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling queueSkillServicePatchQueueSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling queueSkillServicePatchQueueSkill.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/skills/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServiceReadQueueSkill: async (
      queueId: number,
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling queueSkillServiceReadQueueSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling queueSkillServiceReadQueueSkill.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/skills/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [bucketId]
     * @param {Array<number>} [lvl]
     * @param {Array<number>} [minCapacity]
     * @param {Array<number>} [maxCapacity]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServiceSearchQueueSkill: async (
      queueId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      skillId?: Array<number>,
      bucketId?: Array<number>,
      lvl?: Array<number>,
      minCapacity?: Array<number>,
      maxCapacity?: Array<number>,
      enabled?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling queueSkillServiceSearchQueueSkill.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/skills`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queueId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (skillId) {
        localVarQueryParameter['skill_id'] = skillId
      }

      if (bucketId) {
        localVarQueryParameter['bucket_id'] = bucketId
      }

      if (lvl) {
        localVarQueryParameter['lvl'] = lvl
      }

      if (minCapacity) {
        localVarQueryParameter['min_capacity'] = minCapacity
      }

      if (maxCapacity) {
        localVarQueryParameter['max_capacity'] = maxCapacity
      }

      if (enabled !== undefined) {
        localVarQueryParameter['enabled'] = enabled
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EngineUpdateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServiceUpdateQueueSkill: async (
      queueId: number,
      id: number,
      body: EngineUpdateQueueSkillRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling queueSkillServiceUpdateQueueSkill.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling queueSkillServiceUpdateQueueSkill.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling queueSkillServiceUpdateQueueSkill.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/skills/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * QueueSkillServiceApi - functional programming interface
 * @export
 */
export const QueueSkillServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} queueId
     * @param {EngineCreateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queueSkillServiceCreateQueueSkill(
      queueId: number,
      body: EngineCreateQueueSkillRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineQueueSkill>
    > {
      const localVarAxiosArgs = await QueueSkillServiceApiAxiosParamCreator(
        configuration
      ).queueSkillServiceCreateQueueSkill(queueId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queueSkillServiceDeleteQueueSkill(
      queueId: number,
      id: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineQueueSkill>
    > {
      const localVarAxiosArgs = await QueueSkillServiceApiAxiosParamCreator(
        configuration
      ).queueSkillServiceDeleteQueueSkill(queueId, id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EnginePatchQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queueSkillServicePatchQueueSkill(
      queueId: number,
      id: number,
      body: EnginePatchQueueSkillRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineQueueSkill>
    > {
      const localVarAxiosArgs = await QueueSkillServiceApiAxiosParamCreator(
        configuration
      ).queueSkillServicePatchQueueSkill(queueId, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queueSkillServiceReadQueueSkill(
      queueId: number,
      id: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineQueueSkill>
    > {
      const localVarAxiosArgs = await QueueSkillServiceApiAxiosParamCreator(
        configuration
      ).queueSkillServiceReadQueueSkill(queueId, id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [bucketId]
     * @param {Array<number>} [lvl]
     * @param {Array<number>} [minCapacity]
     * @param {Array<number>} [maxCapacity]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queueSkillServiceSearchQueueSkill(
      queueId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      skillId?: Array<number>,
      bucketId?: Array<number>,
      lvl?: Array<number>,
      minCapacity?: Array<number>,
      maxCapacity?: Array<number>,
      enabled?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListQueueSkill>
    > {
      const localVarAxiosArgs = await QueueSkillServiceApiAxiosParamCreator(
        configuration
      ).queueSkillServiceSearchQueueSkill(
        queueId,
        page,
        size,
        q,
        sort,
        fields,
        id,
        skillId,
        bucketId,
        lvl,
        minCapacity,
        maxCapacity,
        enabled,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EngineUpdateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queueSkillServiceUpdateQueueSkill(
      queueId: number,
      id: number,
      body: EngineUpdateQueueSkillRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineQueueSkill>
    > {
      const localVarAxiosArgs = await QueueSkillServiceApiAxiosParamCreator(
        configuration
      ).queueSkillServiceUpdateQueueSkill(queueId, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * QueueSkillServiceApi - factory interface
 * @export
 */
export const QueueSkillServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {number} queueId
     * @param {EngineCreateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServiceCreateQueueSkill(
      queueId: number,
      body: EngineCreateQueueSkillRequest,
      options?: any
    ): AxiosPromise<EngineQueueSkill> {
      return QueueSkillServiceApiFp(configuration)
        .queueSkillServiceCreateQueueSkill(queueId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServiceDeleteQueueSkill(
      queueId: number,
      id: number,
      options?: any
    ): AxiosPromise<EngineQueueSkill> {
      return QueueSkillServiceApiFp(configuration)
        .queueSkillServiceDeleteQueueSkill(queueId, id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EnginePatchQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServicePatchQueueSkill(
      queueId: number,
      id: number,
      body: EnginePatchQueueSkillRequest,
      options?: any
    ): AxiosPromise<EngineQueueSkill> {
      return QueueSkillServiceApiFp(configuration)
        .queueSkillServicePatchQueueSkill(queueId, id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServiceReadQueueSkill(
      queueId: number,
      id: number,
      options?: any
    ): AxiosPromise<EngineQueueSkill> {
      return QueueSkillServiceApiFp(configuration)
        .queueSkillServiceReadQueueSkill(queueId, id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [bucketId]
     * @param {Array<number>} [lvl]
     * @param {Array<number>} [minCapacity]
     * @param {Array<number>} [maxCapacity]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServiceSearchQueueSkill(
      queueId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      skillId?: Array<number>,
      bucketId?: Array<number>,
      lvl?: Array<number>,
      minCapacity?: Array<number>,
      maxCapacity?: Array<number>,
      enabled?: boolean,
      options?: any
    ): AxiosPromise<EngineListQueueSkill> {
      return QueueSkillServiceApiFp(configuration)
        .queueSkillServiceSearchQueueSkill(
          queueId,
          page,
          size,
          q,
          sort,
          fields,
          id,
          skillId,
          bucketId,
          lvl,
          minCapacity,
          maxCapacity,
          enabled,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EngineUpdateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queueSkillServiceUpdateQueueSkill(
      queueId: number,
      id: number,
      body: EngineUpdateQueueSkillRequest,
      options?: any
    ): AxiosPromise<EngineQueueSkill> {
      return QueueSkillServiceApiFp(configuration)
        .queueSkillServiceUpdateQueueSkill(queueId, id, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * QueueSkillServiceApi - object-oriented interface
 * @export
 * @class QueueSkillServiceApi
 * @extends {BaseAPI}
 */
export class QueueSkillServiceApi extends BaseAPI {
  /**
   *
   * @param {number} queueId
   * @param {EngineCreateQueueSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueSkillServiceApi
   */
  public queueSkillServiceCreateQueueSkill(
    queueId: number,
    body: EngineCreateQueueSkillRequest,
    options?: any
  ) {
    return QueueSkillServiceApiFp(this.configuration)
      .queueSkillServiceCreateQueueSkill(queueId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} queueId
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueSkillServiceApi
   */
  public queueSkillServiceDeleteQueueSkill(
    queueId: number,
    id: number,
    options?: any
  ) {
    return QueueSkillServiceApiFp(this.configuration)
      .queueSkillServiceDeleteQueueSkill(queueId, id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} queueId
   * @param {number} id
   * @param {EnginePatchQueueSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueSkillServiceApi
   */
  public queueSkillServicePatchQueueSkill(
    queueId: number,
    id: number,
    body: EnginePatchQueueSkillRequest,
    options?: any
  ) {
    return QueueSkillServiceApiFp(this.configuration)
      .queueSkillServicePatchQueueSkill(queueId, id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} queueId
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueSkillServiceApi
   */
  public queueSkillServiceReadQueueSkill(
    queueId: number,
    id: number,
    options?: any
  ) {
    return QueueSkillServiceApiFp(this.configuration)
      .queueSkillServiceReadQueueSkill(queueId, id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} queueId
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {Array<number>} [id]
   * @param {Array<number>} [skillId]
   * @param {Array<number>} [bucketId]
   * @param {Array<number>} [lvl]
   * @param {Array<number>} [minCapacity]
   * @param {Array<number>} [maxCapacity]
   * @param {boolean} [enabled]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueSkillServiceApi
   */
  public queueSkillServiceSearchQueueSkill(
    queueId: number,
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    id?: Array<number>,
    skillId?: Array<number>,
    bucketId?: Array<number>,
    lvl?: Array<number>,
    minCapacity?: Array<number>,
    maxCapacity?: Array<number>,
    enabled?: boolean,
    options?: any
  ) {
    return QueueSkillServiceApiFp(this.configuration)
      .queueSkillServiceSearchQueueSkill(
        queueId,
        page,
        size,
        q,
        sort,
        fields,
        id,
        skillId,
        bucketId,
        lvl,
        minCapacity,
        maxCapacity,
        enabled,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} queueId
   * @param {number} id
   * @param {EngineUpdateQueueSkillRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueueSkillServiceApi
   */
  public queueSkillServiceUpdateQueueSkill(
    queueId: number,
    id: number,
    body: EngineUpdateQueueSkillRequest,
    options?: any
  ) {
    return QueueSkillServiceApiFp(this.configuration)
      .queueSkillServiceUpdateQueueSkill(queueId, id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
