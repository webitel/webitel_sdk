// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { InlineObject7 } from '../api'
// @ts-ignore
import { WfmCreateForecastCalculationRequest } from '../api'
// @ts-ignore
import { WfmCreateForecastCalculationResponse } from '../api'
// @ts-ignore
import { WfmDeleteForecastCalculationResponse } from '../api'
// @ts-ignore
import { WfmExecuteForecastCalculationResponse } from '../api'
// @ts-ignore
import { WfmReadForecastCalculationResponse } from '../api'
// @ts-ignore
import { WfmSearchForecastCalculationResponse } from '../api'
// @ts-ignore
import { WfmUpdateForecastCalculationResponse } from '../api'
/**
 * ForecastCalculationServiceApi - axios parameter creator
 * @export
 */
export const ForecastCalculationServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {WfmCreateForecastCalculationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createForecastCalculation: async (
      body: WfmCreateForecastCalculationRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createForecastCalculation.'
        )
      }
      const localVarPath = `/wfm/lookups/forecast_calculation`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteForecastCalculation: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteForecastCalculation.'
        )
      }
      const localVarPath = `/wfm/lookups/forecast_calculation/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {string} [teamId]
     * @param {string} [forecastDataFrom]
     * @param {string} [forecastDataTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeForecastCalculation: async (
      id: string,
      teamId?: string,
      forecastDataFrom?: string,
      forecastDataTo?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling executeForecastCalculation.'
        )
      }
      const localVarPath = `/wfm/lookups/forecast_calculation/{id}/execute`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (teamId !== undefined) {
        localVarQueryParameter['team_id'] = teamId
      }

      if (forecastDataFrom !== undefined) {
        localVarQueryParameter['forecast_data.from'] = forecastDataFrom
      }

      if (forecastDataTo !== undefined) {
        localVarQueryParameter['forecast_data.to'] = forecastDataTo
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readForecastCalculation: async (
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readForecastCalculation.'
        )
      }
      const localVarPath = `/wfm/lookups/forecast_calculation/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForecastCalculation: async (
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/wfm/lookups/forecast_calculation`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} itemId
     * @param {InlineObject7} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateForecastCalculation: async (
      itemId: string,
      body: InlineObject7,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new RequiredError(
          'itemId',
          'Required parameter itemId was null or undefined when calling updateForecastCalculation.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateForecastCalculation.'
        )
      }
      const localVarPath = `/wfm/lookups/forecast_calculation/{item.id}`.replace(
        `{${'item.id'}}`,
        encodeURIComponent(String(itemId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ForecastCalculationServiceApi - functional programming interface
 * @export
 */
export const ForecastCalculationServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {WfmCreateForecastCalculationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createForecastCalculation(
      body: WfmCreateForecastCalculationRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmCreateForecastCalculationResponse>
    > {
      const localVarAxiosArgs = await ForecastCalculationServiceApiAxiosParamCreator(
        configuration
      ).createForecastCalculation(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteForecastCalculation(
      id: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmDeleteForecastCalculationResponse>
    > {
      const localVarAxiosArgs = await ForecastCalculationServiceApiAxiosParamCreator(
        configuration
      ).deleteForecastCalculation(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {string} [teamId]
     * @param {string} [forecastDataFrom]
     * @param {string} [forecastDataTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeForecastCalculation(
      id: string,
      teamId?: string,
      forecastDataFrom?: string,
      forecastDataTo?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmExecuteForecastCalculationResponse>
    > {
      const localVarAxiosArgs = await ForecastCalculationServiceApiAxiosParamCreator(
        configuration
      ).executeForecastCalculation(
        id,
        teamId,
        forecastDataFrom,
        forecastDataTo,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readForecastCalculation(
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmReadForecastCalculationResponse>
    > {
      const localVarAxiosArgs = await ForecastCalculationServiceApiAxiosParamCreator(
        configuration
      ).readForecastCalculation(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchForecastCalculation(
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmSearchForecastCalculationResponse>
    > {
      const localVarAxiosArgs = await ForecastCalculationServiceApiAxiosParamCreator(
        configuration
      ).searchForecastCalculation(q, page, size, sort, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} itemId
     * @param {InlineObject7} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateForecastCalculation(
      itemId: string,
      body: InlineObject7,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmUpdateForecastCalculationResponse>
    > {
      const localVarAxiosArgs = await ForecastCalculationServiceApiAxiosParamCreator(
        configuration
      ).updateForecastCalculation(itemId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * ForecastCalculationServiceApi - factory interface
 * @export
 */
export const ForecastCalculationServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {WfmCreateForecastCalculationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createForecastCalculation(
      body: WfmCreateForecastCalculationRequest,
      options?: any
    ): AxiosPromise<WfmCreateForecastCalculationResponse> {
      return ForecastCalculationServiceApiFp(configuration)
        .createForecastCalculation(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteForecastCalculation(
      id: string,
      options?: any
    ): AxiosPromise<WfmDeleteForecastCalculationResponse> {
      return ForecastCalculationServiceApiFp(configuration)
        .deleteForecastCalculation(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {string} [teamId]
     * @param {string} [forecastDataFrom]
     * @param {string} [forecastDataTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeForecastCalculation(
      id: string,
      teamId?: string,
      forecastDataFrom?: string,
      forecastDataTo?: string,
      options?: any
    ): AxiosPromise<WfmExecuteForecastCalculationResponse> {
      return ForecastCalculationServiceApiFp(configuration)
        .executeForecastCalculation(
          id,
          teamId,
          forecastDataFrom,
          forecastDataTo,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readForecastCalculation(
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WfmReadForecastCalculationResponse> {
      return ForecastCalculationServiceApiFp(configuration)
        .readForecastCalculation(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchForecastCalculation(
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WfmSearchForecastCalculationResponse> {
      return ForecastCalculationServiceApiFp(configuration)
        .searchForecastCalculation(q, page, size, sort, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} itemId
     * @param {InlineObject7} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateForecastCalculation(
      itemId: string,
      body: InlineObject7,
      options?: any
    ): AxiosPromise<WfmUpdateForecastCalculationResponse> {
      return ForecastCalculationServiceApiFp(configuration)
        .updateForecastCalculation(itemId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ForecastCalculationServiceApi - object-oriented interface
 * @export
 * @class ForecastCalculationServiceApi
 * @extends {BaseAPI}
 */
export class ForecastCalculationServiceApi extends BaseAPI {
  /**
   *
   * @param {WfmCreateForecastCalculationRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForecastCalculationServiceApi
   */
  public createForecastCalculation(
    body: WfmCreateForecastCalculationRequest,
    options?: any
  ) {
    return ForecastCalculationServiceApiFp(this.configuration)
      .createForecastCalculation(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForecastCalculationServiceApi
   */
  public deleteForecastCalculation(id: string, options?: any) {
    return ForecastCalculationServiceApiFp(this.configuration)
      .deleteForecastCalculation(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {string} [teamId]
   * @param {string} [forecastDataFrom]
   * @param {string} [forecastDataTo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForecastCalculationServiceApi
   */
  public executeForecastCalculation(
    id: string,
    teamId?: string,
    forecastDataFrom?: string,
    forecastDataTo?: string,
    options?: any
  ) {
    return ForecastCalculationServiceApiFp(this.configuration)
      .executeForecastCalculation(
        id,
        teamId,
        forecastDataFrom,
        forecastDataTo,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForecastCalculationServiceApi
   */
  public readForecastCalculation(
    id: string,
    fields?: Array<string>,
    options?: any
  ) {
    return ForecastCalculationServiceApiFp(this.configuration)
      .readForecastCalculation(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [q]
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForecastCalculationServiceApi
   */
  public searchForecastCalculation(
    q?: string,
    page?: number,
    size?: number,
    sort?: string,
    fields?: Array<string>,
    options?: any
  ) {
    return ForecastCalculationServiceApiFp(this.configuration)
      .searchForecastCalculation(q, page, size, sort, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} itemId
   * @param {InlineObject7} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForecastCalculationServiceApi
   */
  public updateForecastCalculation(
    itemId: string,
    body: InlineObject7,
    options?: any
  ) {
    return ForecastCalculationServiceApiFp(this.configuration)
      .updateForecastCalculation(itemId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
