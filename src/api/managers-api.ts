// tslint:disable
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.07.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { NEWUpdateOfTheManagerLink } from '../api'
// @ts-ignore
import { NEWUpdateOfTheManagerLink1 } from '../api'
// @ts-ignore
import { WebitelContactsInputManager } from '../api'
// @ts-ignore
import { WebitelContactsManager } from '../api'
// @ts-ignore
import { WebitelContactsManagerList } from '../api'
/**
 * ManagersApi - axios parameter creator
 * @export
 */
export const ManagersApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Remove the contact\'s manager address link
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManager: async (
      contactId: string,
      etag: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling deleteManager.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling deleteManager.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/managers/{etag}`
        .replace(`{${'contact_id'}}`, encodeURIComponent(String(contactId)))
        .replace(`{${'etag'}}`, encodeURIComponent(String(etag)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Contact Managers associations.
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagers: async (
      contactId: string,
      etag: Array<string>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling deleteManagers.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling deleteManagers.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/managers`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (etag) {
        localVarQueryParameter['etag'] = etag
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Search the Contact\'s Managers.
     * @param {string} contactId Contact ID associated with.
     * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size of result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: user name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [id] Record(s) with unique ID only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagers: async (
      contactId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: Array<string>,
      fields?: Array<string>,
      id?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling listManagers.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/managers`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Locate the manager address link.
     * @param {string} contactId Contact source ID.
     * @param {string} etag Unique manager link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateManager: async (
      contactId: string,
      etag: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling locateManager.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling locateManager.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/managers/{etag}`
        .replace(`{${'contact_id'}}`, encodeURIComponent(String(contactId)))
        .replace(`{${'etag'}}`, encodeURIComponent(String(etag)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Associate new Managers to the Contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputManager>} input Array of the unique User(s) to associate with the Contact. Any duplicate of an already linked user{id} will result in an error.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeManagers: async (
      contactId: string,
      input: Array<WebitelContactsInputManager>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling mergeManagers.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling mergeManagers.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/managers`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Reset Managers to fit the specified final set.
     * @param {string} contactId Contact ID associated with.
     * @param {Array<WebitelContactsInputManager>} input Final set of unique User(s) to be linked with the Contact. User(s) that are already linked with the Contact but not listed here will be removed. The first element will become &#x60;primary&#x60; if no other specified.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetManagers: async (
      contactId: string,
      input: Array<WebitelContactsInputManager>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling resetManagers.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling resetManagers.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/managers`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update the contact\'s manager address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resource.
     * @param {NEWUpdateOfTheManagerLink} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManager: async (
      contactId: string,
      etag: string,
      input: NEWUpdateOfTheManagerLink,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling updateManager.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling updateManager.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateManager.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/managers/{etag}`
        .replace(`{${'contact_id'}}`, encodeURIComponent(String(contactId)))
        .replace(`{${'etag'}}`, encodeURIComponent(String(etag)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update the contact\'s manager address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resource.
     * @param {NEWUpdateOfTheManagerLink1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManager2: async (
      contactId: string,
      etag: string,
      input: NEWUpdateOfTheManagerLink1,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling updateManager2.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling updateManager2.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateManager2.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/managers/{etag}`
        .replace(`{${'contact_id'}}`, encodeURIComponent(String(contactId)))
        .replace(`{${'etag'}}`, encodeURIComponent(String(etag)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ManagersApi - functional programming interface
 * @export
 */
export const ManagersApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Remove the contact\'s manager address link
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteManager(
      contactId: string,
      etag: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsManager>
    > {
      const localVarAxiosArgs = await ManagersApiAxiosParamCreator(
        configuration
      ).deleteManager(contactId, etag, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Contact Managers associations.
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteManagers(
      contactId: string,
      etag: Array<string>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<WebitelContactsManager>>
    > {
      const localVarAxiosArgs = await ManagersApiAxiosParamCreator(
        configuration
      ).deleteManagers(contactId, etag, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Search the Contact\'s Managers.
     * @param {string} contactId Contact ID associated with.
     * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size of result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: user name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [id] Record(s) with unique ID only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listManagers(
      contactId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: Array<string>,
      fields?: Array<string>,
      id?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsManagerList>
    > {
      const localVarAxiosArgs = await ManagersApiAxiosParamCreator(
        configuration
      ).listManagers(contactId, page, size, q, sort, fields, id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Locate the manager address link.
     * @param {string} contactId Contact source ID.
     * @param {string} etag Unique manager link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locateManager(
      contactId: string,
      etag: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsManager>
    > {
      const localVarAxiosArgs = await ManagersApiAxiosParamCreator(
        configuration
      ).locateManager(contactId, etag, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Associate new Managers to the Contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputManager>} input Array of the unique User(s) to associate with the Contact. Any duplicate of an already linked user{id} will result in an error.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mergeManagers(
      contactId: string,
      input: Array<WebitelContactsInputManager>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsManagerList>
    > {
      const localVarAxiosArgs = await ManagersApiAxiosParamCreator(
        configuration
      ).mergeManagers(contactId, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Reset Managers to fit the specified final set.
     * @param {string} contactId Contact ID associated with.
     * @param {Array<WebitelContactsInputManager>} input Final set of unique User(s) to be linked with the Contact. User(s) that are already linked with the Contact but not listed here will be removed. The first element will become &#x60;primary&#x60; if no other specified.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetManagers(
      contactId: string,
      input: Array<WebitelContactsInputManager>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsManagerList>
    > {
      const localVarAxiosArgs = await ManagersApiAxiosParamCreator(
        configuration
      ).resetManagers(contactId, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update the contact\'s manager address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resource.
     * @param {NEWUpdateOfTheManagerLink} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateManager(
      contactId: string,
      etag: string,
      input: NEWUpdateOfTheManagerLink,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsManagerList>
    > {
      const localVarAxiosArgs = await ManagersApiAxiosParamCreator(
        configuration
      ).updateManager(contactId, etag, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update the contact\'s manager address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resource.
     * @param {NEWUpdateOfTheManagerLink1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateManager2(
      contactId: string,
      etag: string,
      input: NEWUpdateOfTheManagerLink1,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsManagerList>
    > {
      const localVarAxiosArgs = await ManagersApiAxiosParamCreator(
        configuration
      ).updateManager2(contactId, etag, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * ManagersApi - factory interface
 * @export
 */
export const ManagersApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Remove the contact\'s manager address link
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManager(
      contactId: string,
      etag: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsManager> {
      return ManagersApiFp(configuration)
        .deleteManager(contactId, etag, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove Contact Managers associations.
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagers(
      contactId: string,
      etag: Array<string>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<Array<WebitelContactsManager>> {
      return ManagersApiFp(configuration)
        .deleteManagers(contactId, etag, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Search the Contact\'s Managers.
     * @param {string} contactId Contact ID associated with.
     * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size of result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: user name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [id] Record(s) with unique ID only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagers(
      contactId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: Array<string>,
      fields?: Array<string>,
      id?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsManagerList> {
      return ManagersApiFp(configuration)
        .listManagers(contactId, page, size, q, sort, fields, id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Locate the manager address link.
     * @param {string} contactId Contact source ID.
     * @param {string} etag Unique manager link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateManager(
      contactId: string,
      etag: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsManager> {
      return ManagersApiFp(configuration)
        .locateManager(contactId, etag, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Associate new Managers to the Contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputManager>} input Array of the unique User(s) to associate with the Contact. Any duplicate of an already linked user{id} will result in an error.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeManagers(
      contactId: string,
      input: Array<WebitelContactsInputManager>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsManagerList> {
      return ManagersApiFp(configuration)
        .mergeManagers(contactId, input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Reset Managers to fit the specified final set.
     * @param {string} contactId Contact ID associated with.
     * @param {Array<WebitelContactsInputManager>} input Final set of unique User(s) to be linked with the Contact. User(s) that are already linked with the Contact but not listed here will be removed. The first element will become &#x60;primary&#x60; if no other specified.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetManagers(
      contactId: string,
      input: Array<WebitelContactsInputManager>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsManagerList> {
      return ManagersApiFp(configuration)
        .resetManagers(contactId, input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update the contact\'s manager address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resource.
     * @param {NEWUpdateOfTheManagerLink} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManager(
      contactId: string,
      etag: string,
      input: NEWUpdateOfTheManagerLink,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsManagerList> {
      return ManagersApiFp(configuration)
        .updateManager(contactId, etag, input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update the contact\'s manager address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resource.
     * @param {NEWUpdateOfTheManagerLink1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManager2(
      contactId: string,
      etag: string,
      input: NEWUpdateOfTheManagerLink1,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsManagerList> {
      return ManagersApiFp(configuration)
        .updateManager2(contactId, etag, input, fields, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ManagersApi - object-oriented interface
 * @export
 * @class ManagersApi
 * @extends {BaseAPI}
 */
export class ManagersApi extends BaseAPI {
  /**
   *
   * @summary Remove the contact\'s manager address link
   * @param {string} contactId Contact ID associated with.
   * @param {string} etag Unique ID to remove.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManagersApi
   */
  public deleteManager(
    contactId: string,
    etag: string,
    fields?: Array<string>,
    options?: any
  ) {
    return ManagersApiFp(this.configuration)
      .deleteManager(contactId, etag, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove Contact Managers associations.
   * @param {string} contactId Contact ID associated with.
   * @param {Array<string>} etag Set of unique ID(s) to remove.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManagersApi
   */
  public deleteManagers(
    contactId: string,
    etag: Array<string>,
    fields?: Array<string>,
    options?: any
  ) {
    return ManagersApiFp(this.configuration)
      .deleteManagers(contactId, etag, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Search the Contact\'s Managers.
   * @param {string} contactId Contact ID associated with.
   * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
   * @param {number} [size] Size of result page. limit &#x3D; (size++)
   * @param {string} [q] Search term: user name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
   * @param {Array<string>} [sort] Sort the result according to fields.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {Array<string>} [id] Record(s) with unique ID only.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManagersApi
   */
  public listManagers(
    contactId: string,
    page?: number,
    size?: number,
    q?: string,
    sort?: Array<string>,
    fields?: Array<string>,
    id?: Array<string>,
    options?: any
  ) {
    return ManagersApiFp(this.configuration)
      .listManagers(contactId, page, size, q, sort, fields, id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Locate the manager address link.
   * @param {string} contactId Contact source ID.
   * @param {string} etag Unique manager link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
   * @param {Array<string>} [fields] Fields to be retrieved into result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManagersApi
   */
  public locateManager(
    contactId: string,
    etag: string,
    fields?: Array<string>,
    options?: any
  ) {
    return ManagersApiFp(this.configuration)
      .locateManager(contactId, etag, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Associate new Managers to the Contact.
   * @param {string} contactId Link contact ID.
   * @param {Array<WebitelContactsInputManager>} input Array of the unique User(s) to associate with the Contact. Any duplicate of an already linked user{id} will result in an error.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManagersApi
   */
  public mergeManagers(
    contactId: string,
    input: Array<WebitelContactsInputManager>,
    fields?: Array<string>,
    options?: any
  ) {
    return ManagersApiFp(this.configuration)
      .mergeManagers(contactId, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Reset Managers to fit the specified final set.
   * @param {string} contactId Contact ID associated with.
   * @param {Array<WebitelContactsInputManager>} input Final set of unique User(s) to be linked with the Contact. User(s) that are already linked with the Contact but not listed here will be removed. The first element will become &#x60;primary&#x60; if no other specified.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManagersApi
   */
  public resetManagers(
    contactId: string,
    input: Array<WebitelContactsInputManager>,
    fields?: Array<string>,
    options?: any
  ) {
    return ManagersApiFp(this.configuration)
      .resetManagers(contactId, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update the contact\'s manager address link details
   * @param {string} contactId Link contact ID.
   * @param {string} etag Unique ID of the latest version of an existing resource.
   * @param {NEWUpdateOfTheManagerLink} input
   * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManagersApi
   */
  public updateManager(
    contactId: string,
    etag: string,
    input: NEWUpdateOfTheManagerLink,
    fields?: Array<string>,
    options?: any
  ) {
    return ManagersApiFp(this.configuration)
      .updateManager(contactId, etag, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update the contact\'s manager address link details
   * @param {string} contactId Link contact ID.
   * @param {string} etag Unique ID of the latest version of an existing resource.
   * @param {NEWUpdateOfTheManagerLink1} input
   * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManagersApi
   */
  public updateManager2(
    contactId: string,
    etag: string,
    input: NEWUpdateOfTheManagerLink1,
    fields?: Array<string>,
    options?: any
  ) {
    return ManagersApiFp(this.configuration)
      .updateManager2(contactId, etag, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
