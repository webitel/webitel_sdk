// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { CasesCreateSLARequest } from '../api'
// @ts-ignore
import { CasesInputSLA } from '../api'
// @ts-ignore
import { CasesLocateSLAResponse } from '../api'
// @ts-ignore
import { CasesSLA } from '../api'
// @ts-ignore
import { CasesSLAList } from '../api'
// @ts-ignore
import { GooglerpcStatus } from '../api'
/**
 * SLAsApi - axios parameter creator
 * @export
 */
export const SLAsApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create a new SLA
     * @param {CasesCreateSLARequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSLA: async (
      body: CasesCreateSLARequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createSLA.'
        )
      }
      const localVarPath = `/cases/slas`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete an SLA
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSLA: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteSLA.'
        )
      }
      const localVarPath = `/cases/slas/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Retrieve a list of SLAs or search SLA conditions
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {string} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSLAs: async (
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      q?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cases/slas`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Locate an SLA by ID
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateSLA: async (
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling locateSLA.'
        )
      }
      const localVarPath = `/cases/slas/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update an existing SLA
     * @param {string} id
     * @param {CasesInputSLA} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSLA: async (
      id: string,
      input: CasesInputSLA,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateSLA.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateSLA.'
        )
      }
      const localVarPath = `/cases/slas/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update an existing SLA
     * @param {string} id
     * @param {CasesInputSLA} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSLA2: async (
      id: string,
      input: CasesInputSLA,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateSLA2.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateSLA2.'
        )
      }
      const localVarPath = `/cases/slas/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SLAsApi - functional programming interface
 * @export
 */
export const SLAsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create a new SLA
     * @param {CasesCreateSLARequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createSLA(
      body: CasesCreateSLARequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesSLA>
    > {
      const localVarAxiosArgs = await SLAsApiAxiosParamCreator(
        configuration
      ).createSLA(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Delete an SLA
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSLA(
      id: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesSLA>
    > {
      const localVarAxiosArgs = await SLAsApiAxiosParamCreator(
        configuration
      ).deleteSLA(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Retrieve a list of SLAs or search SLA conditions
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {string} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listSLAs(
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      q?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesSLAList>
    > {
      const localVarAxiosArgs = await SLAsApiAxiosParamCreator(
        configuration
      ).listSLAs(page, size, fields, sort, id, q, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Locate an SLA by ID
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locateSLA(
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesLocateSLAResponse>
    > {
      const localVarAxiosArgs = await SLAsApiAxiosParamCreator(
        configuration
      ).locateSLA(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update an existing SLA
     * @param {string} id
     * @param {CasesInputSLA} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSLA(
      id: string,
      input: CasesInputSLA,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesSLA>
    > {
      const localVarAxiosArgs = await SLAsApiAxiosParamCreator(
        configuration
      ).updateSLA(id, input, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update an existing SLA
     * @param {string} id
     * @param {CasesInputSLA} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSLA2(
      id: string,
      input: CasesInputSLA,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesSLA>
    > {
      const localVarAxiosArgs = await SLAsApiAxiosParamCreator(
        configuration
      ).updateSLA2(id, input, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * SLAsApi - factory interface
 * @export
 */
export const SLAsApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create a new SLA
     * @param {CasesCreateSLARequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSLA(
      body: CasesCreateSLARequest,
      options?: any
    ): AxiosPromise<CasesSLA> {
      return SLAsApiFp(configuration)
        .createSLA(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete an SLA
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSLA(id: string, options?: any): AxiosPromise<CasesSLA> {
      return SLAsApiFp(configuration)
        .deleteSLA(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Retrieve a list of SLAs or search SLA conditions
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {string} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSLAs(
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: string,
      id?: Array<string>,
      q?: string,
      options?: any
    ): AxiosPromise<CasesSLAList> {
      return SLAsApiFp(configuration)
        .listSLAs(page, size, fields, sort, id, q, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Locate an SLA by ID
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateSLA(
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesLocateSLAResponse> {
      return SLAsApiFp(configuration)
        .locateSLA(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update an existing SLA
     * @param {string} id
     * @param {CasesInputSLA} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSLA(
      id: string,
      input: CasesInputSLA,
      options?: any
    ): AxiosPromise<CasesSLA> {
      return SLAsApiFp(configuration)
        .updateSLA(id, input, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update an existing SLA
     * @param {string} id
     * @param {CasesInputSLA} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSLA2(
      id: string,
      input: CasesInputSLA,
      options?: any
    ): AxiosPromise<CasesSLA> {
      return SLAsApiFp(configuration)
        .updateSLA2(id, input, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * SLAsApi - object-oriented interface
 * @export
 * @class SLAsApi
 * @extends {BaseAPI}
 */
export class SLAsApi extends BaseAPI {
  /**
   *
   * @summary Create a new SLA
   * @param {CasesCreateSLARequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAsApi
   */
  public createSLA(body: CasesCreateSLARequest, options?: any) {
    return SLAsApiFp(this.configuration)
      .createSLA(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete an SLA
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAsApi
   */
  public deleteSLA(id: string, options?: any) {
    return SLAsApiFp(this.configuration)
      .deleteSLA(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Retrieve a list of SLAs or search SLA conditions
   * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
   * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {string} [sort] Sort the result according to fields.
   * @param {Array<string>} [id] Filter by unique IDs.
   * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAsApi
   */
  public listSLAs(
    page?: number,
    size?: number,
    fields?: Array<string>,
    sort?: string,
    id?: Array<string>,
    q?: string,
    options?: any
  ) {
    return SLAsApiFp(this.configuration)
      .listSLAs(page, size, fields, sort, id, q, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Locate an SLA by ID
   * @param {string} id
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAsApi
   */
  public locateSLA(id: string, fields?: Array<string>, options?: any) {
    return SLAsApiFp(this.configuration)
      .locateSLA(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update an existing SLA
   * @param {string} id
   * @param {CasesInputSLA} input
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAsApi
   */
  public updateSLA(id: string, input: CasesInputSLA, options?: any) {
    return SLAsApiFp(this.configuration)
      .updateSLA(id, input, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update an existing SLA
   * @param {string} id
   * @param {CasesInputSLA} input
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAsApi
   */
  public updateSLA2(id: string, input: CasesInputSLA, options?: any) {
    return SLAsApiFp(this.configuration)
      .updateSLA2(id, input, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
