// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { EngineAuditForm } from '../api'
// @ts-ignore
import { EngineAuditFormServicePatchAuditFormBody } from '../api'
// @ts-ignore
import { EngineAuditFormServiceUpdateAuditFormBody } from '../api'
// @ts-ignore
import { EngineAuditFormServiceUpdateAuditRateBody } from '../api'
// @ts-ignore
import { EngineAuditRate } from '../api'
// @ts-ignore
import { EngineCreateAuditFormRateRequest } from '../api'
// @ts-ignore
import { EngineCreateAuditFormRequest } from '../api'
// @ts-ignore
import { EngineListAuditForm } from '../api'
// @ts-ignore
import { EngineListAuditRate } from '../api'
// @ts-ignore
import { GoogleRpcStatus } from '../api'
/**
 * AuditFormServiceApi - axios parameter creator
 * @export
 */
export const AuditFormServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {EngineCreateAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditForm: async (
      body: EngineCreateAuditFormRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAuditForm.'
        )
      }
      const localVarPath = `/call_center/audit/forms`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {EngineCreateAuditFormRateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditFormRate: async (
      body: EngineCreateAuditFormRateRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAuditFormRate.'
        )
      }
      const localVarPath = `/call_center/audit/rate`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuditForm: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAuditForm.'
        )
      }
      const localVarPath = `/call_center/audit/forms/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuditRate: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAuditRate.'
        )
      }
      const localVarPath = `/call_center/audit/rate/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} id
     * @param {EngineAuditFormServicePatchAuditFormBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAuditForm: async (
      id: number,
      body: EngineAuditFormServicePatchAuditFormBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchAuditForm.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchAuditForm.'
        )
      }
      const localVarPath = `/call_center/audit/forms/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAuditForm: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAuditForm.'
        )
      }
      const localVarPath = `/call_center/audit/forms/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAuditRate: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAuditRate.'
        )
      }
      const localVarPath = `/call_center/audit/rate/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [teamId]
     * @param {boolean} [enabled]
     * @param {boolean} [editable] bool archive &#x3D; 9;  bool active &#x3D; 11; // not archive
     * @param {string} [question]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAuditForm: async (
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      teamId?: Array<number>,
      enabled?: boolean,
      editable?: boolean,
      question?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/call_center/audit/forms`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (teamId) {
        localVarQueryParameter['team_id'] = teamId
      }

      if (enabled !== undefined) {
        localVarQueryParameter['enabled'] = enabled
      }

      if (editable !== undefined) {
        localVarQueryParameter['editable'] = editable
      }

      if (question !== undefined) {
        localVarQueryParameter['question'] = question
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} formId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<number>} [id]
     * @param {Array<string>} [callId]
     * @param {Array<string>} [ratedUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAuditRate: async (
      formId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      createdAtFrom?: string,
      createdAtTo?: string,
      id?: Array<number>,
      callId?: Array<string>,
      ratedUser?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'formId' is not null or undefined
      if (formId === null || formId === undefined) {
        throw new RequiredError(
          'formId',
          'Required parameter formId was null or undefined when calling searchAuditRate.'
        )
      }
      const localVarPath = `/call_center/audit/forms/{form_id}/rate`.replace(
        `{${'form_id'}}`,
        encodeURIComponent(String(formId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (createdAtFrom !== undefined) {
        localVarQueryParameter['created_at.from'] = createdAtFrom
      }

      if (createdAtTo !== undefined) {
        localVarQueryParameter['created_at.to'] = createdAtTo
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (callId) {
        localVarQueryParameter['call_id'] = callId
      }

      if (ratedUser) {
        localVarQueryParameter['rated_user'] = ratedUser
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} id
     * @param {EngineAuditFormServiceUpdateAuditFormBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuditForm: async (
      id: number,
      body: EngineAuditFormServiceUpdateAuditFormBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAuditForm.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAuditForm.'
        )
      }
      const localVarPath = `/call_center/audit/forms/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineAuditFormServiceUpdateAuditRateBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuditRate: async (
      id: string,
      body: EngineAuditFormServiceUpdateAuditRateBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAuditRate.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAuditRate.'
        )
      }
      const localVarPath = `/call_center/audit/rate/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuditFormServiceApi - functional programming interface
 * @export
 */
export const AuditFormServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {EngineCreateAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAuditForm(
      body: EngineCreateAuditFormRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAuditForm>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).createAuditForm(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {EngineCreateAuditFormRateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAuditFormRate(
      body: EngineCreateAuditFormRateRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAuditRate>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).createAuditFormRate(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAuditForm(
      id: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAuditForm>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).deleteAuditForm(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAuditRate(
      id: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAuditRate>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).deleteAuditRate(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} id
     * @param {EngineAuditFormServicePatchAuditFormBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchAuditForm(
      id: number,
      body: EngineAuditFormServicePatchAuditFormBody,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAuditForm>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).patchAuditForm(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readAuditForm(
      id: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAuditForm>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).readAuditForm(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readAuditRate(
      id: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAuditRate>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).readAuditRate(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [teamId]
     * @param {boolean} [enabled]
     * @param {boolean} [editable] bool archive &#x3D; 9;  bool active &#x3D; 11; // not archive
     * @param {string} [question]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAuditForm(
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      teamId?: Array<number>,
      enabled?: boolean,
      editable?: boolean,
      question?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListAuditForm>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).searchAuditForm(
        page,
        size,
        q,
        sort,
        fields,
        id,
        teamId,
        enabled,
        editable,
        question,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} formId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<number>} [id]
     * @param {Array<string>} [callId]
     * @param {Array<string>} [ratedUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAuditRate(
      formId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      createdAtFrom?: string,
      createdAtTo?: string,
      id?: Array<number>,
      callId?: Array<string>,
      ratedUser?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListAuditRate>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).searchAuditRate(
        formId,
        page,
        size,
        q,
        sort,
        fields,
        createdAtFrom,
        createdAtTo,
        id,
        callId,
        ratedUser,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} id
     * @param {EngineAuditFormServiceUpdateAuditFormBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAuditForm(
      id: number,
      body: EngineAuditFormServiceUpdateAuditFormBody,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAuditForm>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).updateAuditForm(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {EngineAuditFormServiceUpdateAuditRateBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAuditRate(
      id: string,
      body: EngineAuditFormServiceUpdateAuditRateBody,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAuditRate>
    > {
      const localVarAxiosArgs = await AuditFormServiceApiAxiosParamCreator(
        configuration
      ).updateAuditRate(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AuditFormServiceApi - factory interface
 * @export
 */
export const AuditFormServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {EngineCreateAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditForm(
      body: EngineCreateAuditFormRequest,
      options?: any
    ): AxiosPromise<EngineAuditForm> {
      return AuditFormServiceApiFp(configuration)
        .createAuditForm(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {EngineCreateAuditFormRateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditFormRate(
      body: EngineCreateAuditFormRateRequest,
      options?: any
    ): AxiosPromise<EngineAuditRate> {
      return AuditFormServiceApiFp(configuration)
        .createAuditFormRate(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuditForm(id: number, options?: any): AxiosPromise<EngineAuditForm> {
      return AuditFormServiceApiFp(configuration)
        .deleteAuditForm(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuditRate(id: string, options?: any): AxiosPromise<EngineAuditRate> {
      return AuditFormServiceApiFp(configuration)
        .deleteAuditRate(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {EngineAuditFormServicePatchAuditFormBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAuditForm(
      id: number,
      body: EngineAuditFormServicePatchAuditFormBody,
      options?: any
    ): AxiosPromise<EngineAuditForm> {
      return AuditFormServiceApiFp(configuration)
        .patchAuditForm(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAuditForm(id: number, options?: any): AxiosPromise<EngineAuditForm> {
      return AuditFormServiceApiFp(configuration)
        .readAuditForm(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAuditRate(id: string, options?: any): AxiosPromise<EngineAuditRate> {
      return AuditFormServiceApiFp(configuration)
        .readAuditRate(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [teamId]
     * @param {boolean} [enabled]
     * @param {boolean} [editable] bool archive &#x3D; 9;  bool active &#x3D; 11; // not archive
     * @param {string} [question]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAuditForm(
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      teamId?: Array<number>,
      enabled?: boolean,
      editable?: boolean,
      question?: string,
      options?: any
    ): AxiosPromise<EngineListAuditForm> {
      return AuditFormServiceApiFp(configuration)
        .searchAuditForm(
          page,
          size,
          q,
          sort,
          fields,
          id,
          teamId,
          enabled,
          editable,
          question,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} formId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<number>} [id]
     * @param {Array<string>} [callId]
     * @param {Array<string>} [ratedUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAuditRate(
      formId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      createdAtFrom?: string,
      createdAtTo?: string,
      id?: Array<number>,
      callId?: Array<string>,
      ratedUser?: Array<string>,
      options?: any
    ): AxiosPromise<EngineListAuditRate> {
      return AuditFormServiceApiFp(configuration)
        .searchAuditRate(
          formId,
          page,
          size,
          q,
          sort,
          fields,
          createdAtFrom,
          createdAtTo,
          id,
          callId,
          ratedUser,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {EngineAuditFormServiceUpdateAuditFormBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuditForm(
      id: number,
      body: EngineAuditFormServiceUpdateAuditFormBody,
      options?: any
    ): AxiosPromise<EngineAuditForm> {
      return AuditFormServiceApiFp(configuration)
        .updateAuditForm(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {EngineAuditFormServiceUpdateAuditRateBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuditRate(
      id: string,
      body: EngineAuditFormServiceUpdateAuditRateBody,
      options?: any
    ): AxiosPromise<EngineAuditRate> {
      return AuditFormServiceApiFp(configuration)
        .updateAuditRate(id, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuditFormServiceApi - object-oriented interface
 * @export
 * @class AuditFormServiceApi
 * @extends {BaseAPI}
 */
export class AuditFormServiceApi extends BaseAPI {
  /**
   *
   * @param {EngineCreateAuditFormRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public createAuditForm(body: EngineCreateAuditFormRequest, options?: any) {
    return AuditFormServiceApiFp(this.configuration)
      .createAuditForm(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {EngineCreateAuditFormRateRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public createAuditFormRate(
    body: EngineCreateAuditFormRateRequest,
    options?: any
  ) {
    return AuditFormServiceApiFp(this.configuration)
      .createAuditFormRate(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public deleteAuditForm(id: number, options?: any) {
    return AuditFormServiceApiFp(this.configuration)
      .deleteAuditForm(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public deleteAuditRate(id: string, options?: any) {
    return AuditFormServiceApiFp(this.configuration)
      .deleteAuditRate(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {EngineAuditFormServicePatchAuditFormBody} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public patchAuditForm(
    id: number,
    body: EngineAuditFormServicePatchAuditFormBody,
    options?: any
  ) {
    return AuditFormServiceApiFp(this.configuration)
      .patchAuditForm(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public readAuditForm(id: number, options?: any) {
    return AuditFormServiceApiFp(this.configuration)
      .readAuditForm(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public readAuditRate(id: string, options?: any) {
    return AuditFormServiceApiFp(this.configuration)
      .readAuditRate(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {Array<number>} [id]
   * @param {Array<number>} [teamId]
   * @param {boolean} [enabled]
   * @param {boolean} [editable] bool archive &#x3D; 9;  bool active &#x3D; 11; // not archive
   * @param {string} [question]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public searchAuditForm(
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    id?: Array<number>,
    teamId?: Array<number>,
    enabled?: boolean,
    editable?: boolean,
    question?: string,
    options?: any
  ) {
    return AuditFormServiceApiFp(this.configuration)
      .searchAuditForm(
        page,
        size,
        q,
        sort,
        fields,
        id,
        teamId,
        enabled,
        editable,
        question,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} formId
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {string} [createdAtFrom]
   * @param {string} [createdAtTo]
   * @param {Array<number>} [id]
   * @param {Array<string>} [callId]
   * @param {Array<string>} [ratedUser]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public searchAuditRate(
    formId: number,
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    createdAtFrom?: string,
    createdAtTo?: string,
    id?: Array<number>,
    callId?: Array<string>,
    ratedUser?: Array<string>,
    options?: any
  ) {
    return AuditFormServiceApiFp(this.configuration)
      .searchAuditRate(
        formId,
        page,
        size,
        q,
        sort,
        fields,
        createdAtFrom,
        createdAtTo,
        id,
        callId,
        ratedUser,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {EngineAuditFormServiceUpdateAuditFormBody} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public updateAuditForm(
    id: number,
    body: EngineAuditFormServiceUpdateAuditFormBody,
    options?: any
  ) {
    return AuditFormServiceApiFp(this.configuration)
      .updateAuditForm(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {EngineAuditFormServiceUpdateAuditRateBody} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditFormServiceApi
   */
  public updateAuditRate(
    id: string,
    body: EngineAuditFormServiceUpdateAuditRateBody,
    options?: any
  ) {
    return AuditFormServiceApiFp(this.configuration)
      .updateAuditRate(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
