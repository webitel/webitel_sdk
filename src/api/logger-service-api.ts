// tslint:disable
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.07.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { LoggerLogs } from '../api'
// @ts-ignore
import { RuntimeError } from '../api'
/**
 * LoggerServiceApi - axios parameter creator
 * @export
 */
export const LoggerServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} configId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [userId]
     * @param {string} [userName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLogByConfigId: async (
      configId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      userId?: number,
      userName?: string,
      action?: 'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE',
      userIp?: string,
      dateFrom?: string,
      dateTo?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'configId' is not null or undefined
      if (configId === null || configId === undefined) {
        throw new RequiredError(
          'configId',
          'Required parameter configId was null or undefined when calling searchLogByConfigId.'
        )
      }
      const localVarPath = `/logger/config/{config_id}/logs`.replace(
        `{${'config_id'}}`,
        encodeURIComponent(String(configId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (userId !== undefined) {
        localVarQueryParameter['user.id'] = userId
      }

      if (userName !== undefined) {
        localVarQueryParameter['user.name'] = userName
      }

      if (action !== undefined) {
        localVarQueryParameter['action'] = action
      }

      if (userIp !== undefined) {
        localVarQueryParameter['userIp'] = userIp
      }

      if (dateFrom !== undefined) {
        localVarQueryParameter['dateFrom'] = dateFrom
      }

      if (dateTo !== undefined) {
        localVarQueryParameter['dateTo'] = dateTo
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} userId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [objectId]
     * @param {string} [objectName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLogByUserId: async (
      userId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      objectId?: number,
      objectName?: string,
      action?: 'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE',
      userIp?: string,
      dateFrom?: string,
      dateTo?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          'userId',
          'Required parameter userId was null or undefined when calling searchLogByUserId.'
        )
      }
      const localVarPath = `/logger/user/{user_id}/logs`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (objectId !== undefined) {
        localVarQueryParameter['object.id'] = objectId
      }

      if (objectName !== undefined) {
        localVarQueryParameter['object.name'] = objectName
      }

      if (action !== undefined) {
        localVarQueryParameter['action'] = action
      }

      if (userIp !== undefined) {
        localVarQueryParameter['userIp'] = userIp
      }

      if (dateFrom !== undefined) {
        localVarQueryParameter['dateFrom'] = dateFrom
      }

      if (dateTo !== undefined) {
        localVarQueryParameter['dateTo'] = dateTo
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LoggerServiceApi - functional programming interface
 * @export
 */
export const LoggerServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} configId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [userId]
     * @param {string} [userName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchLogByConfigId(
      configId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      userId?: number,
      userName?: string,
      action?: 'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE',
      userIp?: string,
      dateFrom?: string,
      dateTo?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoggerLogs>
    > {
      const localVarAxiosArgs = await LoggerServiceApiAxiosParamCreator(
        configuration
      ).searchLogByConfigId(
        configId,
        page,
        size,
        q,
        sort,
        fields,
        userId,
        userName,
        action,
        userIp,
        dateFrom,
        dateTo,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} userId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [objectId]
     * @param {string} [objectName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchLogByUserId(
      userId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      objectId?: number,
      objectName?: string,
      action?: 'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE',
      userIp?: string,
      dateFrom?: string,
      dateTo?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoggerLogs>
    > {
      const localVarAxiosArgs = await LoggerServiceApiAxiosParamCreator(
        configuration
      ).searchLogByUserId(
        userId,
        page,
        size,
        q,
        sort,
        fields,
        objectId,
        objectName,
        action,
        userIp,
        dateFrom,
        dateTo,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * LoggerServiceApi - factory interface
 * @export
 */
export const LoggerServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {number} configId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [userId]
     * @param {string} [userName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLogByConfigId(
      configId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      userId?: number,
      userName?: string,
      action?: 'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE',
      userIp?: string,
      dateFrom?: string,
      dateTo?: string,
      options?: any
    ): AxiosPromise<LoggerLogs> {
      return LoggerServiceApiFp(configuration)
        .searchLogByConfigId(
          configId,
          page,
          size,
          q,
          sort,
          fields,
          userId,
          userName,
          action,
          userIp,
          dateFrom,
          dateTo,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} userId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [objectId]
     * @param {string} [objectName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLogByUserId(
      userId: number,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      objectId?: number,
      objectName?: string,
      action?: 'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE',
      userIp?: string,
      dateFrom?: string,
      dateTo?: string,
      options?: any
    ): AxiosPromise<LoggerLogs> {
      return LoggerServiceApiFp(configuration)
        .searchLogByUserId(
          userId,
          page,
          size,
          q,
          sort,
          fields,
          objectId,
          objectName,
          action,
          userIp,
          dateFrom,
          dateTo,
          options
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * LoggerServiceApi - object-oriented interface
 * @export
 * @class LoggerServiceApi
 * @extends {BaseAPI}
 */
export class LoggerServiceApi extends BaseAPI {
  /**
   *
   * @param {number} configId REQUIRED filter
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {number} [userId]
   * @param {string} [userName]
   * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
   * @param {string} [userIp]
   * @param {string} [dateFrom]
   * @param {string} [dateTo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoggerServiceApi
   */
  public searchLogByConfigId(
    configId: number,
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    userId?: number,
    userName?: string,
    action?: 'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE',
    userIp?: string,
    dateFrom?: string,
    dateTo?: string,
    options?: any
  ) {
    return LoggerServiceApiFp(this.configuration)
      .searchLogByConfigId(
        configId,
        page,
        size,
        q,
        sort,
        fields,
        userId,
        userName,
        action,
        userIp,
        dateFrom,
        dateTo,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} userId REQUIRED filter
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {number} [objectId]
   * @param {string} [objectName]
   * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
   * @param {string} [userIp]
   * @param {string} [dateFrom]
   * @param {string} [dateTo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoggerServiceApi
   */
  public searchLogByUserId(
    userId: number,
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    objectId?: number,
    objectName?: string,
    action?: 'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE',
    userIp?: string,
    dateFrom?: string,
    dateTo?: string,
    options?: any
  ) {
    return LoggerServiceApiFp(this.configuration)
      .searchLogByUserId(
        userId,
        page,
        size,
        q,
        sort,
        fields,
        objectId,
        objectName,
        action,
        userIp,
        dateFrom,
        dateTo,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
