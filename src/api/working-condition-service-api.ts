// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { InlineObject7 } from '../api'
// @ts-ignore
import { RpcStatus } from '../api'
// @ts-ignore
import { WfmCreateWorkingConditionRequest } from '../api'
// @ts-ignore
import { WfmCreateWorkingConditionResponse } from '../api'
// @ts-ignore
import { WfmDeleteWorkingConditionResponse } from '../api'
// @ts-ignore
import { WfmReadWorkingConditionResponse } from '../api'
// @ts-ignore
import { WfmSearchWorkingConditionResponse } from '../api'
// @ts-ignore
import { WfmUpdateWorkingConditionResponse } from '../api'
/**
 * WorkingConditionServiceApi - axios parameter creator
 * @export
 */
export const WorkingConditionServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {WfmCreateWorkingConditionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkingCondition: async (
      body: WfmCreateWorkingConditionRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createWorkingCondition.'
        )
      }
      const localVarPath = `/wfm/lookups/working_conditions`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkingCondition: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteWorkingCondition.'
        )
      }
      const localVarPath = `/wfm/lookups/working_conditions/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkingCondition: async (
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readWorkingCondition.'
        )
      }
      const localVarPath = `/wfm/lookups/working_conditions/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchWorkingCondition: async (
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/wfm/lookups/working_conditions`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} itemId
     * @param {InlineObject7} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkingCondition: async (
      itemId: string,
      body: InlineObject7,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'itemId' is not null or undefined
      if (itemId === null || itemId === undefined) {
        throw new RequiredError(
          'itemId',
          'Required parameter itemId was null or undefined when calling updateWorkingCondition.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateWorkingCondition.'
        )
      }
      const localVarPath = `/wfm/lookups/working_conditions/{item.id}`.replace(
        `{${'item.id'}}`,
        encodeURIComponent(String(itemId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WorkingConditionServiceApi - functional programming interface
 * @export
 */
export const WorkingConditionServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {WfmCreateWorkingConditionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createWorkingCondition(
      body: WfmCreateWorkingConditionRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmCreateWorkingConditionResponse>
    > {
      const localVarAxiosArgs = await WorkingConditionServiceApiAxiosParamCreator(
        configuration
      ).createWorkingCondition(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteWorkingCondition(
      id: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmDeleteWorkingConditionResponse>
    > {
      const localVarAxiosArgs = await WorkingConditionServiceApiAxiosParamCreator(
        configuration
      ).deleteWorkingCondition(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readWorkingCondition(
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmReadWorkingConditionResponse>
    > {
      const localVarAxiosArgs = await WorkingConditionServiceApiAxiosParamCreator(
        configuration
      ).readWorkingCondition(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchWorkingCondition(
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmSearchWorkingConditionResponse>
    > {
      const localVarAxiosArgs = await WorkingConditionServiceApiAxiosParamCreator(
        configuration
      ).searchWorkingCondition(q, page, size, sort, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} itemId
     * @param {InlineObject7} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateWorkingCondition(
      itemId: string,
      body: InlineObject7,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmUpdateWorkingConditionResponse>
    > {
      const localVarAxiosArgs = await WorkingConditionServiceApiAxiosParamCreator(
        configuration
      ).updateWorkingCondition(itemId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * WorkingConditionServiceApi - factory interface
 * @export
 */
export const WorkingConditionServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {WfmCreateWorkingConditionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkingCondition(
      body: WfmCreateWorkingConditionRequest,
      options?: any
    ): AxiosPromise<WfmCreateWorkingConditionResponse> {
      return WorkingConditionServiceApiFp(configuration)
        .createWorkingCondition(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkingCondition(
      id: string,
      options?: any
    ): AxiosPromise<WfmDeleteWorkingConditionResponse> {
      return WorkingConditionServiceApiFp(configuration)
        .deleteWorkingCondition(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkingCondition(
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WfmReadWorkingConditionResponse> {
      return WorkingConditionServiceApiFp(configuration)
        .readWorkingCondition(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchWorkingCondition(
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WfmSearchWorkingConditionResponse> {
      return WorkingConditionServiceApiFp(configuration)
        .searchWorkingCondition(q, page, size, sort, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} itemId
     * @param {InlineObject7} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkingCondition(
      itemId: string,
      body: InlineObject7,
      options?: any
    ): AxiosPromise<WfmUpdateWorkingConditionResponse> {
      return WorkingConditionServiceApiFp(configuration)
        .updateWorkingCondition(itemId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WorkingConditionServiceApi - object-oriented interface
 * @export
 * @class WorkingConditionServiceApi
 * @extends {BaseAPI}
 */
export class WorkingConditionServiceApi extends BaseAPI {
  /**
   *
   * @param {WfmCreateWorkingConditionRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkingConditionServiceApi
   */
  public createWorkingCondition(
    body: WfmCreateWorkingConditionRequest,
    options?: any
  ) {
    return WorkingConditionServiceApiFp(this.configuration)
      .createWorkingCondition(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkingConditionServiceApi
   */
  public deleteWorkingCondition(id: string, options?: any) {
    return WorkingConditionServiceApiFp(this.configuration)
      .deleteWorkingCondition(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkingConditionServiceApi
   */
  public readWorkingCondition(
    id: string,
    fields?: Array<string>,
    options?: any
  ) {
    return WorkingConditionServiceApiFp(this.configuration)
      .readWorkingCondition(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [q]
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkingConditionServiceApi
   */
  public searchWorkingCondition(
    q?: string,
    page?: number,
    size?: number,
    sort?: string,
    fields?: Array<string>,
    options?: any
  ) {
    return WorkingConditionServiceApiFp(this.configuration)
      .searchWorkingCondition(q, page, size, sort, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} itemId
   * @param {InlineObject7} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkingConditionServiceApi
   */
  public updateWorkingCondition(
    itemId: string,
    body: InlineObject7,
    options?: any
  ) {
    return WorkingConditionServiceApiFp(this.configuration)
      .updateWorkingCondition(itemId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
