// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { InlineObject1 } from '../api'
// @ts-ignore
import { InlineObject2 } from '../api'
// @ts-ignore
import { RpcStatus } from '../api'
// @ts-ignore
import { WfmCreatePauseTemplateRequest } from '../api'
// @ts-ignore
import { WfmCreatePauseTemplateResponse } from '../api'
// @ts-ignore
import { WfmDeletePauseTemplateResponse } from '../api'
// @ts-ignore
import { WfmReadPauseTemplateResponse } from '../api'
// @ts-ignore
import { WfmSearchPauseTemplateCauseResponse } from '../api'
// @ts-ignore
import { WfmSearchPauseTemplateResponse } from '../api'
// @ts-ignore
import { WfmUpdatePauseTemplateCauseBulkResponse } from '../api'
// @ts-ignore
import { WfmUpdatePauseTemplateResponse } from '../api'
/**
 * PauseTemplateServiceApi - axios parameter creator
 * @export
 */
export const PauseTemplateServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {WfmCreatePauseTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPauseTemplate: async (
      body: WfmCreatePauseTemplateRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createPauseTemplate.'
        )
      }
      const localVarPath = `/wfm/lookups/pause_templates`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePauseTemplate: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deletePauseTemplate.'
        )
      }
      const localVarPath = `/wfm/lookups/pause_templates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readPauseTemplate: async (
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readPauseTemplate.'
        )
      }
      const localVarPath = `/wfm/lookups/pause_templates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPauseTemplate: async (
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/wfm/lookups/pause_templates`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchPauseTemplateCause returns a list of pause template causes.
     * @param {string} pauseTemplateId
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPauseTemplateCause: async (
      pauseTemplateId: string,
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pauseTemplateId' is not null or undefined
      if (pauseTemplateId === null || pauseTemplateId === undefined) {
        throw new RequiredError(
          'pauseTemplateId',
          'Required parameter pauseTemplateId was null or undefined when calling searchPauseTemplateCause.'
        )
      }
      const localVarPath = `/wfm/lookups/pause_templates/{pause_template_id}/causes`.replace(
        `{${'pause_template_id'}}`,
        encodeURIComponent(String(pauseTemplateId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {InlineObject1} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePauseTemplate: async (
      id: string,
      body: InlineObject1,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updatePauseTemplate.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updatePauseTemplate.'
        )
      }
      const localVarPath = `/wfm/lookups/pause_templates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary UpdatePauseTemplateCauseBulk updates a list of pause template causes. Update existing, create that not exists in database and delete that not exists in the list.
     * @param {string} pauseTemplateId
     * @param {InlineObject2} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePauseTemplateCauseBulk: async (
      pauseTemplateId: string,
      body: InlineObject2,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pauseTemplateId' is not null or undefined
      if (pauseTemplateId === null || pauseTemplateId === undefined) {
        throw new RequiredError(
          'pauseTemplateId',
          'Required parameter pauseTemplateId was null or undefined when calling updatePauseTemplateCauseBulk.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updatePauseTemplateCauseBulk.'
        )
      }
      const localVarPath = `/wfm/lookups/pause_templates/{pause_template_id}/causes`.replace(
        `{${'pause_template_id'}}`,
        encodeURIComponent(String(pauseTemplateId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PauseTemplateServiceApi - functional programming interface
 * @export
 */
export const PauseTemplateServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {WfmCreatePauseTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPauseTemplate(
      body: WfmCreatePauseTemplateRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmCreatePauseTemplateResponse>
    > {
      const localVarAxiosArgs = await PauseTemplateServiceApiAxiosParamCreator(
        configuration
      ).createPauseTemplate(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePauseTemplate(
      id: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmDeletePauseTemplateResponse>
    > {
      const localVarAxiosArgs = await PauseTemplateServiceApiAxiosParamCreator(
        configuration
      ).deletePauseTemplate(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readPauseTemplate(
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmReadPauseTemplateResponse>
    > {
      const localVarAxiosArgs = await PauseTemplateServiceApiAxiosParamCreator(
        configuration
      ).readPauseTemplate(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchPauseTemplate(
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmSearchPauseTemplateResponse>
    > {
      const localVarAxiosArgs = await PauseTemplateServiceApiAxiosParamCreator(
        configuration
      ).searchPauseTemplate(q, page, size, sort, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchPauseTemplateCause returns a list of pause template causes.
     * @param {string} pauseTemplateId
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchPauseTemplateCause(
      pauseTemplateId: string,
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmSearchPauseTemplateCauseResponse>
    > {
      const localVarAxiosArgs = await PauseTemplateServiceApiAxiosParamCreator(
        configuration
      ).searchPauseTemplateCause(
        pauseTemplateId,
        q,
        page,
        size,
        sort,
        fields,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {InlineObject1} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePauseTemplate(
      id: string,
      body: InlineObject1,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmUpdatePauseTemplateResponse>
    > {
      const localVarAxiosArgs = await PauseTemplateServiceApiAxiosParamCreator(
        configuration
      ).updatePauseTemplate(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary UpdatePauseTemplateCauseBulk updates a list of pause template causes. Update existing, create that not exists in database and delete that not exists in the list.
     * @param {string} pauseTemplateId
     * @param {InlineObject2} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePauseTemplateCauseBulk(
      pauseTemplateId: string,
      body: InlineObject2,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WfmUpdatePauseTemplateCauseBulkResponse>
    > {
      const localVarAxiosArgs = await PauseTemplateServiceApiAxiosParamCreator(
        configuration
      ).updatePauseTemplateCauseBulk(pauseTemplateId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * PauseTemplateServiceApi - factory interface
 * @export
 */
export const PauseTemplateServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {WfmCreatePauseTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPauseTemplate(
      body: WfmCreatePauseTemplateRequest,
      options?: any
    ): AxiosPromise<WfmCreatePauseTemplateResponse> {
      return PauseTemplateServiceApiFp(configuration)
        .createPauseTemplate(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePauseTemplate(
      id: string,
      options?: any
    ): AxiosPromise<WfmDeletePauseTemplateResponse> {
      return PauseTemplateServiceApiFp(configuration)
        .deletePauseTemplate(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readPauseTemplate(
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WfmReadPauseTemplateResponse> {
      return PauseTemplateServiceApiFp(configuration)
        .readPauseTemplate(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPauseTemplate(
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WfmSearchPauseTemplateResponse> {
      return PauseTemplateServiceApiFp(configuration)
        .searchPauseTemplate(q, page, size, sort, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary SearchPauseTemplateCause returns a list of pause template causes.
     * @param {string} pauseTemplateId
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPauseTemplateCause(
      pauseTemplateId: string,
      q?: string,
      page?: number,
      size?: number,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WfmSearchPauseTemplateCauseResponse> {
      return PauseTemplateServiceApiFp(configuration)
        .searchPauseTemplateCause(
          pauseTemplateId,
          q,
          page,
          size,
          sort,
          fields,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {InlineObject1} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePauseTemplate(
      id: string,
      body: InlineObject1,
      options?: any
    ): AxiosPromise<WfmUpdatePauseTemplateResponse> {
      return PauseTemplateServiceApiFp(configuration)
        .updatePauseTemplate(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary UpdatePauseTemplateCauseBulk updates a list of pause template causes. Update existing, create that not exists in database and delete that not exists in the list.
     * @param {string} pauseTemplateId
     * @param {InlineObject2} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePauseTemplateCauseBulk(
      pauseTemplateId: string,
      body: InlineObject2,
      options?: any
    ): AxiosPromise<WfmUpdatePauseTemplateCauseBulkResponse> {
      return PauseTemplateServiceApiFp(configuration)
        .updatePauseTemplateCauseBulk(pauseTemplateId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PauseTemplateServiceApi - object-oriented interface
 * @export
 * @class PauseTemplateServiceApi
 * @extends {BaseAPI}
 */
export class PauseTemplateServiceApi extends BaseAPI {
  /**
   *
   * @param {WfmCreatePauseTemplateRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PauseTemplateServiceApi
   */
  public createPauseTemplate(
    body: WfmCreatePauseTemplateRequest,
    options?: any
  ) {
    return PauseTemplateServiceApiFp(this.configuration)
      .createPauseTemplate(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PauseTemplateServiceApi
   */
  public deletePauseTemplate(id: string, options?: any) {
    return PauseTemplateServiceApiFp(this.configuration)
      .deletePauseTemplate(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PauseTemplateServiceApi
   */
  public readPauseTemplate(id: string, fields?: Array<string>, options?: any) {
    return PauseTemplateServiceApiFp(this.configuration)
      .readPauseTemplate(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [q]
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PauseTemplateServiceApi
   */
  public searchPauseTemplate(
    q?: string,
    page?: number,
    size?: number,
    sort?: string,
    fields?: Array<string>,
    options?: any
  ) {
    return PauseTemplateServiceApiFp(this.configuration)
      .searchPauseTemplate(q, page, size, sort, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary SearchPauseTemplateCause returns a list of pause template causes.
   * @param {string} pauseTemplateId
   * @param {string} [q]
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PauseTemplateServiceApi
   */
  public searchPauseTemplateCause(
    pauseTemplateId: string,
    q?: string,
    page?: number,
    size?: number,
    sort?: string,
    fields?: Array<string>,
    options?: any
  ) {
    return PauseTemplateServiceApiFp(this.configuration)
      .searchPauseTemplateCause(
        pauseTemplateId,
        q,
        page,
        size,
        sort,
        fields,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {InlineObject1} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PauseTemplateServiceApi
   */
  public updatePauseTemplate(id: string, body: InlineObject1, options?: any) {
    return PauseTemplateServiceApiFp(this.configuration)
      .updatePauseTemplate(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary UpdatePauseTemplateCauseBulk updates a list of pause template causes. Update existing, create that not exists in database and delete that not exists in the list.
   * @param {string} pauseTemplateId
   * @param {InlineObject2} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PauseTemplateServiceApi
   */
  public updatePauseTemplateCauseBulk(
    pauseTemplateId: string,
    body: InlineObject2,
    options?: any
  ) {
    return PauseTemplateServiceApiFp(this.configuration)
      .updatePauseTemplateCauseBulk(pauseTemplateId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
