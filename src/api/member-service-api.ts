// tslint:disable
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.12.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { EngineAttemptCallbackRequest } from '../api'
// @ts-ignore
import { EngineAttemptRenewalResultRequest } from '../api'
// @ts-ignore
import { EngineAttemptResultRequest } from '../api'
// @ts-ignore
import { EngineAttemptResultResponse } from '../api'
// @ts-ignore
import { EngineCreateAttemptRequest } from '../api'
// @ts-ignore
import { EngineCreateAttemptResponse } from '../api'
// @ts-ignore
import { EngineCreateMemberBulkRequest } from '../api'
// @ts-ignore
import { EngineCreateMemberRequest } from '../api'
// @ts-ignore
import { EngineDeleteMembersRequest } from '../api'
// @ts-ignore
import { EngineListAttempt } from '../api'
// @ts-ignore
import { EngineListHistoryAttempt } from '../api'
// @ts-ignore
import { EngineListMember } from '../api'
// @ts-ignore
import { EngineListMemberAttempt } from '../api'
// @ts-ignore
import { EngineMemberBulkResponse } from '../api'
// @ts-ignore
import { EngineMemberInQueue } from '../api'
// @ts-ignore
import { EnginePatchMemberRequest } from '../api'
// @ts-ignore
import { EngineResetMembersRequest } from '../api'
// @ts-ignore
import { EngineResetMembersResponse } from '../api'
// @ts-ignore
import { EngineUpdateMemberRequest } from '../api'
// @ts-ignore
import { RuntimeError } from '../api'
/**
 * MemberServiceApi - axios parameter creator
 * @export
 */
export const MemberServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptCallbackRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceAttemptCallback: async (
      attemptId: string,
      body: EngineAttemptCallbackRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'attemptId' is not null or undefined
      if (attemptId === null || attemptId === undefined) {
        throw new RequiredError(
          'attemptId',
          'Required parameter attemptId was null or undefined when calling memberServiceAttemptCallback.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling memberServiceAttemptCallback.'
        )
      }
      const localVarPath = `/call_center/attempts/{attempt_id}`.replace(
        `{${'attempt_id'}}`,
        encodeURIComponent(String(attemptId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {string} memberId
     * @param {string} attemptId
     * @param {EngineAttemptResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceAttemptResult: async (
      queueId: number,
      memberId: string,
      attemptId: string,
      body: EngineAttemptResultRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceAttemptResult.'
        )
      }
      // verify required parameter 'memberId' is not null or undefined
      if (memberId === null || memberId === undefined) {
        throw new RequiredError(
          'memberId',
          'Required parameter memberId was null or undefined when calling memberServiceAttemptResult.'
        )
      }
      // verify required parameter 'attemptId' is not null or undefined
      if (attemptId === null || attemptId === undefined) {
        throw new RequiredError(
          'attemptId',
          'Required parameter attemptId was null or undefined when calling memberServiceAttemptResult.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling memberServiceAttemptResult.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{member_id}/attempts/{attempt_id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'member_id'}}`, encodeURIComponent(String(memberId)))
        .replace(`{${'attempt_id'}}`, encodeURIComponent(String(attemptId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptRenewalResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceAttemptsRenewalResult: async (
      attemptId: string,
      body: EngineAttemptRenewalResultRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'attemptId' is not null or undefined
      if (attemptId === null || attemptId === undefined) {
        throw new RequiredError(
          'attemptId',
          'Required parameter attemptId was null or undefined when calling memberServiceAttemptsRenewalResult.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling memberServiceAttemptsRenewalResult.'
        )
      }
      const localVarPath = `/call_center/queues/attempts/{attempt_id}/renewal`.replace(
        `{${'attempt_id'}}`,
        encodeURIComponent(String(attemptId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Offline queue
     * @param {string} queueId
     * @param {string} memberId
     * @param {EngineCreateAttemptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceCreateAttempt: async (
      queueId: string,
      memberId: string,
      body: EngineCreateAttemptRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceCreateAttempt.'
        )
      }
      // verify required parameter 'memberId' is not null or undefined
      if (memberId === null || memberId === undefined) {
        throw new RequiredError(
          'memberId',
          'Required parameter memberId was null or undefined when calling memberServiceCreateAttempt.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling memberServiceCreateAttempt.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{member_id}/attempts`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'member_id'}}`, encodeURIComponent(String(memberId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceCreateMember: async (
      queueId: string,
      body: EngineCreateMemberRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceCreateMember.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling memberServiceCreateMember.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queueId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceCreateMemberBulk: async (
      queueId: string,
      body: EngineCreateMemberBulkRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceCreateMemberBulk.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling memberServiceCreateMemberBulk.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/bulk`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queueId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary DeleteMember
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceDeleteMember: async (
      queueId: string,
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceDeleteMember.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling memberServiceDeleteMember.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary DeleteMembers
     * @param {string} queueId
     * @param {EngineDeleteMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceDeleteMembers: async (
      queueId: string,
      body: EngineDeleteMembersRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceDeleteMembers.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling memberServiceDeleteMembers.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queueId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch Member
     * @param {string} queueId
     * @param {string} id
     * @param {EnginePatchMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServicePatchMember: async (
      queueId: string,
      id: string,
      body: EnginePatchMemberRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServicePatchMember.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling memberServicePatchMember.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling memberServicePatchMember.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceReadMember: async (
      queueId: string,
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceReadMember.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling memberServiceReadMember.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ResetMembers
     * @param {string} queueId
     * @param {EngineResetMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceResetMembers: async (
      queueId: string,
      body: EngineResetMembersRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceResetMembers.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling memberServiceResetMembers.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/reset`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queueId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceSearchAttempts: async (
      page?: number,
      size?: number,
      joinedAtFrom?: string,
      joinedAtTo?: string,
      id?: Array<string>,
      queueId?: Array<string>,
      bucketId?: Array<string>,
      memberId?: Array<string>,
      agentId?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/call_center/queues/attempts/active`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (joinedAtFrom !== undefined) {
        localVarQueryParameter['joined_at.from'] = joinedAtFrom
      }

      if (joinedAtTo !== undefined) {
        localVarQueryParameter['joined_at.to'] = joinedAtTo
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (queueId) {
        localVarQueryParameter['queue_id'] = queueId
      }

      if (bucketId) {
        localVarQueryParameter['bucket_id'] = bucketId
      }

      if (memberId) {
        localVarQueryParameter['member_id'] = memberId
      }

      if (agentId) {
        localVarQueryParameter['agent_id'] = agentId
      }

      if (result !== undefined) {
        localVarQueryParameter['result'] = result
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceSearchAttemptsHistory: async (
      page?: number,
      size?: number,
      joinedAtFrom?: string,
      joinedAtTo?: string,
      id?: Array<string>,
      queueId?: Array<string>,
      bucketId?: Array<string>,
      memberId?: Array<string>,
      agentId?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/call_center/queues/attempts/history`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (joinedAtFrom !== undefined) {
        localVarQueryParameter['joined_at.from'] = joinedAtFrom
      }

      if (joinedAtTo !== undefined) {
        localVarQueryParameter['joined_at.to'] = joinedAtTo
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (queueId) {
        localVarQueryParameter['queue_id'] = queueId
      }

      if (bucketId) {
        localVarQueryParameter['bucket_id'] = bucketId
      }

      if (memberId) {
        localVarQueryParameter['member_id'] = memberId
      }

      if (agentId) {
        localVarQueryParameter['agent_id'] = agentId
      }

      if (result !== undefined) {
        localVarQueryParameter['result'] = result
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {string} queueId
     * @param {string} memberId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceSearchMemberAttempts: async (
      queueId: string,
      memberId: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceSearchMemberAttempts.'
        )
      }
      // verify required parameter 'memberId' is not null or undefined
      if (memberId === null || memberId === undefined) {
        throw new RequiredError(
          'memberId',
          'Required parameter memberId was null or undefined when calling memberServiceSearchMemberAttempts.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{member_id}/attempts`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'member_id'}}`, encodeURIComponent(String(memberId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Member
     * @param {string} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceSearchMemberInQueue: async (
      queueId: string,
      page?: number,
      size?: number,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceSearchMemberInQueue.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members`.replace(
        `{${'queue_id'}}`,
        encodeURIComponent(String(queueId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Search of Member
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [id]
     * @param {string} [queueId]
     * @param {number} [bucketId]
     * @param {string} [destination]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceSearchMembers: async (
      page?: number,
      size?: number,
      id?: string,
      queueId?: string,
      bucketId?: number,
      destination?: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/call_center/members`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      if (queueId !== undefined) {
        localVarQueryParameter['queue_id'] = queueId
      }

      if (bucketId !== undefined) {
        localVarQueryParameter['bucket_id'] = bucketId
      }

      if (destination !== undefined) {
        localVarQueryParameter['destination'] = destination
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary UpdateMember
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceUpdateMember: async (
      queueId: string,
      id: string,
      body: EngineUpdateMemberRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'queueId' is not null or undefined
      if (queueId === null || queueId === undefined) {
        throw new RequiredError(
          'queueId',
          'Required parameter queueId was null or undefined when calling memberServiceUpdateMember.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling memberServiceUpdateMember.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling memberServiceUpdateMember.'
        )
      }
      const localVarPath = `/call_center/queues/{queue_id}/members/{id}`
        .replace(`{${'queue_id'}}`, encodeURIComponent(String(queueId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * MemberServiceApi - functional programming interface
 * @export
 */
export const MemberServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptCallbackRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceAttemptCallback(
      attemptId: string,
      body: EngineAttemptCallbackRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAttemptResultResponse>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceAttemptCallback(attemptId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} queueId
     * @param {string} memberId
     * @param {string} attemptId
     * @param {EngineAttemptResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceAttemptResult(
      queueId: number,
      memberId: string,
      attemptId: string,
      body: EngineAttemptResultRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAttemptResultResponse>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceAttemptResult(queueId, memberId, attemptId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptRenewalResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceAttemptsRenewalResult(
      attemptId: string,
      body: EngineAttemptRenewalResultRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceAttemptsRenewalResult(attemptId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Offline queue
     * @param {string} queueId
     * @param {string} memberId
     * @param {EngineCreateAttemptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceCreateAttempt(
      queueId: string,
      memberId: string,
      body: EngineCreateAttemptRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineCreateAttemptResponse>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceCreateAttempt(queueId, memberId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceCreateMember(
      queueId: string,
      body: EngineCreateMemberRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineMemberInQueue>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceCreateMember(queueId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceCreateMemberBulk(
      queueId: string,
      body: EngineCreateMemberBulkRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineMemberBulkResponse>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceCreateMemberBulk(queueId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary DeleteMember
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceDeleteMember(
      queueId: string,
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineMemberInQueue>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceDeleteMember(queueId, id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary DeleteMembers
     * @param {string} queueId
     * @param {EngineDeleteMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceDeleteMembers(
      queueId: string,
      body: EngineDeleteMembersRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListMember>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceDeleteMembers(queueId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch Member
     * @param {string} queueId
     * @param {string} id
     * @param {EnginePatchMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServicePatchMember(
      queueId: string,
      id: string,
      body: EnginePatchMemberRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineMemberInQueue>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServicePatchMember(queueId, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceReadMember(
      queueId: string,
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineMemberInQueue>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceReadMember(queueId, id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ResetMembers
     * @param {string} queueId
     * @param {EngineResetMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceResetMembers(
      queueId: string,
      body: EngineResetMembersRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResetMembersResponse>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceResetMembers(queueId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceSearchAttempts(
      page?: number,
      size?: number,
      joinedAtFrom?: string,
      joinedAtTo?: string,
      id?: Array<string>,
      queueId?: Array<string>,
      bucketId?: Array<string>,
      memberId?: Array<string>,
      agentId?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListAttempt>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceSearchAttempts(
        page,
        size,
        joinedAtFrom,
        joinedAtTo,
        id,
        queueId,
        bucketId,
        memberId,
        agentId,
        result,
        fields,
        sort,
        domainId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceSearchAttemptsHistory(
      page?: number,
      size?: number,
      joinedAtFrom?: string,
      joinedAtTo?: string,
      id?: Array<string>,
      queueId?: Array<string>,
      bucketId?: Array<string>,
      memberId?: Array<string>,
      agentId?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListHistoryAttempt>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceSearchAttemptsHistory(
        page,
        size,
        joinedAtFrom,
        joinedAtTo,
        id,
        queueId,
        bucketId,
        memberId,
        agentId,
        result,
        fields,
        sort,
        domainId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {string} queueId
     * @param {string} memberId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceSearchMemberAttempts(
      queueId: string,
      memberId: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListMemberAttempt>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceSearchMemberAttempts(queueId, memberId, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Member
     * @param {string} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceSearchMemberInQueue(
      queueId: string,
      page?: number,
      size?: number,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListMember>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceSearchMemberInQueue(queueId, page, size, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Search of Member
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [id]
     * @param {string} [queueId]
     * @param {number} [bucketId]
     * @param {string} [destination]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceSearchMembers(
      page?: number,
      size?: number,
      id?: string,
      queueId?: string,
      bucketId?: number,
      destination?: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListMember>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceSearchMembers(
        page,
        size,
        id,
        queueId,
        bucketId,
        destination,
        domainId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary UpdateMember
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async memberServiceUpdateMember(
      queueId: string,
      id: string,
      body: EngineUpdateMemberRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineMemberInQueue>
    > {
      const localVarAxiosArgs = await MemberServiceApiAxiosParamCreator(
        configuration
      ).memberServiceUpdateMember(queueId, id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * MemberServiceApi - factory interface
 * @export
 */
export const MemberServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptCallbackRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceAttemptCallback(
      attemptId: string,
      body: EngineAttemptCallbackRequest,
      options?: any
    ): AxiosPromise<EngineAttemptResultResponse> {
      return MemberServiceApiFp(configuration)
        .memberServiceAttemptCallback(attemptId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} queueId
     * @param {string} memberId
     * @param {string} attemptId
     * @param {EngineAttemptResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceAttemptResult(
      queueId: number,
      memberId: string,
      attemptId: string,
      body: EngineAttemptResultRequest,
      options?: any
    ): AxiosPromise<EngineAttemptResultResponse> {
      return MemberServiceApiFp(configuration)
        .memberServiceAttemptResult(queueId, memberId, attemptId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptRenewalResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceAttemptsRenewalResult(
      attemptId: string,
      body: EngineAttemptRenewalResultRequest,
      options?: any
    ): AxiosPromise<object> {
      return MemberServiceApiFp(configuration)
        .memberServiceAttemptsRenewalResult(attemptId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Offline queue
     * @param {string} queueId
     * @param {string} memberId
     * @param {EngineCreateAttemptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceCreateAttempt(
      queueId: string,
      memberId: string,
      body: EngineCreateAttemptRequest,
      options?: any
    ): AxiosPromise<EngineCreateAttemptResponse> {
      return MemberServiceApiFp(configuration)
        .memberServiceCreateAttempt(queueId, memberId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceCreateMember(
      queueId: string,
      body: EngineCreateMemberRequest,
      options?: any
    ): AxiosPromise<EngineMemberInQueue> {
      return MemberServiceApiFp(configuration)
        .memberServiceCreateMember(queueId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceCreateMemberBulk(
      queueId: string,
      body: EngineCreateMemberBulkRequest,
      options?: any
    ): AxiosPromise<EngineMemberBulkResponse> {
      return MemberServiceApiFp(configuration)
        .memberServiceCreateMemberBulk(queueId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary DeleteMember
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceDeleteMember(
      queueId: string,
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineMemberInQueue> {
      return MemberServiceApiFp(configuration)
        .memberServiceDeleteMember(queueId, id, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary DeleteMembers
     * @param {string} queueId
     * @param {EngineDeleteMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceDeleteMembers(
      queueId: string,
      body: EngineDeleteMembersRequest,
      options?: any
    ): AxiosPromise<EngineListMember> {
      return MemberServiceApiFp(configuration)
        .memberServiceDeleteMembers(queueId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Patch Member
     * @param {string} queueId
     * @param {string} id
     * @param {EnginePatchMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServicePatchMember(
      queueId: string,
      id: string,
      body: EnginePatchMemberRequest,
      options?: any
    ): AxiosPromise<EngineMemberInQueue> {
      return MemberServiceApiFp(configuration)
        .memberServicePatchMember(queueId, id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceReadMember(
      queueId: string,
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineMemberInQueue> {
      return MemberServiceApiFp(configuration)
        .memberServiceReadMember(queueId, id, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary ResetMembers
     * @param {string} queueId
     * @param {EngineResetMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceResetMembers(
      queueId: string,
      body: EngineResetMembersRequest,
      options?: any
    ): AxiosPromise<EngineResetMembersResponse> {
      return MemberServiceApiFp(configuration)
        .memberServiceResetMembers(queueId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary SearchAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceSearchAttempts(
      page?: number,
      size?: number,
      joinedAtFrom?: string,
      joinedAtTo?: string,
      id?: Array<string>,
      queueId?: Array<string>,
      bucketId?: Array<string>,
      memberId?: Array<string>,
      agentId?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineListAttempt> {
      return MemberServiceApiFp(configuration)
        .memberServiceSearchAttempts(
          page,
          size,
          joinedAtFrom,
          joinedAtTo,
          id,
          queueId,
          bucketId,
          memberId,
          agentId,
          result,
          fields,
          sort,
          domainId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {string} [result]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceSearchAttemptsHistory(
      page?: number,
      size?: number,
      joinedAtFrom?: string,
      joinedAtTo?: string,
      id?: Array<string>,
      queueId?: Array<string>,
      bucketId?: Array<string>,
      memberId?: Array<string>,
      agentId?: Array<string>,
      result?: string,
      fields?: Array<string>,
      sort?: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineListHistoryAttempt> {
      return MemberServiceApiFp(configuration)
        .memberServiceSearchAttemptsHistory(
          page,
          size,
          joinedAtFrom,
          joinedAtTo,
          id,
          queueId,
          bucketId,
          memberId,
          agentId,
          result,
          fields,
          sort,
          domainId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {string} queueId
     * @param {string} memberId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceSearchMemberAttempts(
      queueId: string,
      memberId: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineListMemberAttempt> {
      return MemberServiceApiFp(configuration)
        .memberServiceSearchMemberAttempts(queueId, memberId, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List of Member
     * @param {string} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceSearchMemberInQueue(
      queueId: string,
      page?: number,
      size?: number,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineListMember> {
      return MemberServiceApiFp(configuration)
        .memberServiceSearchMemberInQueue(
          queueId,
          page,
          size,
          domainId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Search of Member
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [id]
     * @param {string} [queueId]
     * @param {number} [bucketId]
     * @param {string} [destination]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceSearchMembers(
      page?: number,
      size?: number,
      id?: string,
      queueId?: string,
      bucketId?: number,
      destination?: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineListMember> {
      return MemberServiceApiFp(configuration)
        .memberServiceSearchMembers(
          page,
          size,
          id,
          queueId,
          bucketId,
          destination,
          domainId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary UpdateMember
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    memberServiceUpdateMember(
      queueId: string,
      id: string,
      body: EngineUpdateMemberRequest,
      options?: any
    ): AxiosPromise<EngineMemberInQueue> {
      return MemberServiceApiFp(configuration)
        .memberServiceUpdateMember(queueId, id, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * MemberServiceApi - object-oriented interface
 * @export
 * @class MemberServiceApi
 * @extends {BaseAPI}
 */
export class MemberServiceApi extends BaseAPI {
  /**
   *
   * @param {string} attemptId
   * @param {EngineAttemptCallbackRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceAttemptCallback(
    attemptId: string,
    body: EngineAttemptCallbackRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceAttemptCallback(attemptId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} queueId
   * @param {string} memberId
   * @param {string} attemptId
   * @param {EngineAttemptResultRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceAttemptResult(
    queueId: number,
    memberId: string,
    attemptId: string,
    body: EngineAttemptResultRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceAttemptResult(queueId, memberId, attemptId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} attemptId
   * @param {EngineAttemptRenewalResultRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceAttemptsRenewalResult(
    attemptId: string,
    body: EngineAttemptRenewalResultRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceAttemptsRenewalResult(attemptId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Offline queue
   * @param {string} queueId
   * @param {string} memberId
   * @param {EngineCreateAttemptRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceCreateAttempt(
    queueId: string,
    memberId: string,
    body: EngineCreateAttemptRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceCreateAttempt(queueId, memberId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Create Member
   * @param {string} queueId
   * @param {EngineCreateMemberRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceCreateMember(
    queueId: string,
    body: EngineCreateMemberRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceCreateMember(queueId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Create Member
   * @param {string} queueId
   * @param {EngineCreateMemberBulkRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceCreateMemberBulk(
    queueId: string,
    body: EngineCreateMemberBulkRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceCreateMemberBulk(queueId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary DeleteMember
   * @param {string} queueId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceDeleteMember(
    queueId: string,
    id: string,
    domainId?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceDeleteMember(queueId, id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary DeleteMembers
   * @param {string} queueId
   * @param {EngineDeleteMembersRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceDeleteMembers(
    queueId: string,
    body: EngineDeleteMembersRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceDeleteMembers(queueId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Patch Member
   * @param {string} queueId
   * @param {string} id
   * @param {EnginePatchMemberRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServicePatchMember(
    queueId: string,
    id: string,
    body: EnginePatchMemberRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServicePatchMember(queueId, id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary ReadQueueRouting
   * @param {string} queueId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceReadMember(
    queueId: string,
    id: string,
    domainId?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceReadMember(queueId, id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary ResetMembers
   * @param {string} queueId
   * @param {EngineResetMembersRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceResetMembers(
    queueId: string,
    body: EngineResetMembersRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceResetMembers(queueId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary SearchAttempts
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [joinedAtFrom]
   * @param {string} [joinedAtTo]
   * @param {Array<string>} [id]
   * @param {Array<string>} [queueId]
   * @param {Array<string>} [bucketId]
   * @param {Array<string>} [memberId]
   * @param {Array<string>} [agentId]
   * @param {string} [result]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceSearchAttempts(
    page?: number,
    size?: number,
    joinedAtFrom?: string,
    joinedAtTo?: string,
    id?: Array<string>,
    queueId?: Array<string>,
    bucketId?: Array<string>,
    memberId?: Array<string>,
    agentId?: Array<string>,
    result?: string,
    fields?: Array<string>,
    sort?: string,
    domainId?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceSearchAttempts(
        page,
        size,
        joinedAtFrom,
        joinedAtTo,
        id,
        queueId,
        bucketId,
        memberId,
        agentId,
        result,
        fields,
        sort,
        domainId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary SearchMemberAttempts
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [joinedAtFrom]
   * @param {string} [joinedAtTo]
   * @param {Array<string>} [id]
   * @param {Array<string>} [queueId]
   * @param {Array<string>} [bucketId]
   * @param {Array<string>} [memberId]
   * @param {Array<string>} [agentId]
   * @param {string} [result]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceSearchAttemptsHistory(
    page?: number,
    size?: number,
    joinedAtFrom?: string,
    joinedAtTo?: string,
    id?: Array<string>,
    queueId?: Array<string>,
    bucketId?: Array<string>,
    memberId?: Array<string>,
    agentId?: Array<string>,
    result?: string,
    fields?: Array<string>,
    sort?: string,
    domainId?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceSearchAttemptsHistory(
        page,
        size,
        joinedAtFrom,
        joinedAtTo,
        id,
        queueId,
        bucketId,
        memberId,
        agentId,
        result,
        fields,
        sort,
        domainId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary SearchMemberAttempts
   * @param {string} queueId
   * @param {string} memberId
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceSearchMemberAttempts(
    queueId: string,
    memberId: string,
    domainId?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceSearchMemberAttempts(queueId, memberId, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List of Member
   * @param {string} queueId
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceSearchMemberInQueue(
    queueId: string,
    page?: number,
    size?: number,
    domainId?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceSearchMemberInQueue(queueId, page, size, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Search of Member
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [id]
   * @param {string} [queueId]
   * @param {number} [bucketId]
   * @param {string} [destination]
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceSearchMembers(
    page?: number,
    size?: number,
    id?: string,
    queueId?: string,
    bucketId?: number,
    destination?: string,
    domainId?: string,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceSearchMembers(
        page,
        size,
        id,
        queueId,
        bucketId,
        destination,
        domainId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary UpdateMember
   * @param {string} queueId
   * @param {string} id
   * @param {EngineUpdateMemberRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MemberServiceApi
   */
  public memberServiceUpdateMember(
    queueId: string,
    id: string,
    body: EngineUpdateMemberRequest,
    options?: any
  ) {
    return MemberServiceApiFp(this.configuration)
      .memberServiceUpdateMember(queueId, id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
