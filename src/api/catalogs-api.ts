// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { CasesCatalog } from '../api'
// @ts-ignore
import { CasesCatalogList } from '../api'
// @ts-ignore
import { CasesCreateCatalogRequest } from '../api'
// @ts-ignore
import { CasesInputCatalog } from '../api'
// @ts-ignore
import { CasesLocateCatalogResponse } from '../api'
// @ts-ignore
import { GooglerpcStatus } from '../api'
/**
 * CatalogsApi - axios parameter creator
 * @export
 */
export const CatalogsApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create a new catalog
     * @param {CasesCreateCatalogRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCatalog: async (
      body: CasesCreateCatalogRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createCatalog.'
        )
      }
      const localVarPath = `/cases/catalogs`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete a catalog
     * @param {Array<string>} id ID of the catalog to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalog: async (
      id: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteCatalog.'
        )
      }
      const localVarPath = `/cases/catalogs/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Retrieve a list of catalogs or search catalogs
     * @param {number} [page] Page number for pagination
     * @param {number} [size] Number of records per page
     * @param {Array<string>} [fields] Fields to be retrieved as a result. If the user passes \&quot;-\&quot; as the value for fields, it will retrieve all available fields for each catalog.
     * @param {Array<string>} [sort] Sorting options by fields
     * @param {Array<string>} [id] List of IDs to filter the catalogs
     * @param {string} [qQuery] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {'PARTIAL' | 'FULL'} [qFetchType] The type of data fetching for catalog services   - PARTIAL: Only essential fields like [ Id, Name, Description, Created/Updated at ].  Partial info includes only essential fields.  - FULL: The fetch type indicates whether to retrieve all available data for the catalog ( FULL ) or only essential fields ( PARTIAL ).  Full info includes all fields of the catalog.
     * @param {boolean} [state] Filter by state (true for active, false for inactive)
     * @param {string} [depth] Filter by the depth of the hierarchy to retrieve services. The depth indicates how many ancestor levels of services will be included for each catalog. - A depth of 0 includes only the direct catalog. - A depth of 1 includes the catalog and its immediate services. - By default the depth is unlimited,   meaning all nested services and sub-services will be included.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCatalogs: async (
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      qQuery?: string,
      qFetchType?: 'PARTIAL' | 'FULL',
      state?: boolean,
      depth?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cases/catalogs`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (qQuery !== undefined) {
        localVarQueryParameter['q.query'] = qQuery
      }

      if (qFetchType !== undefined) {
        localVarQueryParameter['q.fetchType'] = qFetchType
      }

      if (state !== undefined) {
        localVarQueryParameter['state'] = state
      }

      if (depth !== undefined) {
        localVarQueryParameter['depth'] = depth
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Locate a catalog by ID
     * @param {string} id ID of the catalog to be located
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateCatalog: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling locateCatalog.'
        )
      }
      const localVarPath = `/cases/catalogs/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update an existing catalog
     * @param {string} id ID of the catalog to be updated
     * @param {CasesInputCatalog} input Input data for updating the catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCatalog: async (
      id: string,
      input: CasesInputCatalog,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateCatalog.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateCatalog.'
        )
      }
      const localVarPath = `/cases/catalogs/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update an existing catalog
     * @param {string} id ID of the catalog to be updated
     * @param {CasesInputCatalog} input Input data for updating the catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCatalog2: async (
      id: string,
      input: CasesInputCatalog,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateCatalog2.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateCatalog2.'
        )
      }
      const localVarPath = `/cases/catalogs/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CatalogsApi - functional programming interface
 * @export
 */
export const CatalogsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create a new catalog
     * @param {CasesCreateCatalogRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCatalog(
      body: CasesCreateCatalogRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCatalog>
    > {
      const localVarAxiosArgs = await CatalogsApiAxiosParamCreator(
        configuration
      ).createCatalog(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Delete a catalog
     * @param {Array<string>} id ID of the catalog to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCatalog(
      id: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesCatalogList>
    > {
      const localVarAxiosArgs = await CatalogsApiAxiosParamCreator(
        configuration
      ).deleteCatalog(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Retrieve a list of catalogs or search catalogs
     * @param {number} [page] Page number for pagination
     * @param {number} [size] Number of records per page
     * @param {Array<string>} [fields] Fields to be retrieved as a result. If the user passes \&quot;-\&quot; as the value for fields, it will retrieve all available fields for each catalog.
     * @param {Array<string>} [sort] Sorting options by fields
     * @param {Array<string>} [id] List of IDs to filter the catalogs
     * @param {string} [qQuery] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {'PARTIAL' | 'FULL'} [qFetchType] The type of data fetching for catalog services   - PARTIAL: Only essential fields like [ Id, Name, Description, Created/Updated at ].  Partial info includes only essential fields.  - FULL: The fetch type indicates whether to retrieve all available data for the catalog ( FULL ) or only essential fields ( PARTIAL ).  Full info includes all fields of the catalog.
     * @param {boolean} [state] Filter by state (true for active, false for inactive)
     * @param {string} [depth] Filter by the depth of the hierarchy to retrieve services. The depth indicates how many ancestor levels of services will be included for each catalog. - A depth of 0 includes only the direct catalog. - A depth of 1 includes the catalog and its immediate services. - By default the depth is unlimited,   meaning all nested services and sub-services will be included.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listCatalogs(
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      qQuery?: string,
      qFetchType?: 'PARTIAL' | 'FULL',
      state?: boolean,
      depth?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesCatalogList>
    > {
      const localVarAxiosArgs = await CatalogsApiAxiosParamCreator(
        configuration
      ).listCatalogs(
        page,
        size,
        fields,
        sort,
        id,
        qQuery,
        qFetchType,
        state,
        depth,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Locate a catalog by ID
     * @param {string} id ID of the catalog to be located
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locateCatalog(
      id: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesLocateCatalogResponse>
    > {
      const localVarAxiosArgs = await CatalogsApiAxiosParamCreator(
        configuration
      ).locateCatalog(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update an existing catalog
     * @param {string} id ID of the catalog to be updated
     * @param {CasesInputCatalog} input Input data for updating the catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCatalog(
      id: string,
      input: CasesInputCatalog,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCatalog>
    > {
      const localVarAxiosArgs = await CatalogsApiAxiosParamCreator(
        configuration
      ).updateCatalog(id, input, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update an existing catalog
     * @param {string} id ID of the catalog to be updated
     * @param {CasesInputCatalog} input Input data for updating the catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCatalog2(
      id: string,
      input: CasesInputCatalog,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesCatalog>
    > {
      const localVarAxiosArgs = await CatalogsApiAxiosParamCreator(
        configuration
      ).updateCatalog2(id, input, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * CatalogsApi - factory interface
 * @export
 */
export const CatalogsApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create a new catalog
     * @param {CasesCreateCatalogRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCatalog(
      body: CasesCreateCatalogRequest,
      options?: any
    ): AxiosPromise<CasesCatalog> {
      return CatalogsApiFp(configuration)
        .createCatalog(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete a catalog
     * @param {Array<string>} id ID of the catalog to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalog(
      id: Array<string>,
      options?: any
    ): AxiosPromise<CasesCatalogList> {
      return CatalogsApiFp(configuration)
        .deleteCatalog(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Retrieve a list of catalogs or search catalogs
     * @param {number} [page] Page number for pagination
     * @param {number} [size] Number of records per page
     * @param {Array<string>} [fields] Fields to be retrieved as a result. If the user passes \&quot;-\&quot; as the value for fields, it will retrieve all available fields for each catalog.
     * @param {Array<string>} [sort] Sorting options by fields
     * @param {Array<string>} [id] List of IDs to filter the catalogs
     * @param {string} [qQuery] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {'PARTIAL' | 'FULL'} [qFetchType] The type of data fetching for catalog services   - PARTIAL: Only essential fields like [ Id, Name, Description, Created/Updated at ].  Partial info includes only essential fields.  - FULL: The fetch type indicates whether to retrieve all available data for the catalog ( FULL ) or only essential fields ( PARTIAL ).  Full info includes all fields of the catalog.
     * @param {boolean} [state] Filter by state (true for active, false for inactive)
     * @param {string} [depth] Filter by the depth of the hierarchy to retrieve services. The depth indicates how many ancestor levels of services will be included for each catalog. - A depth of 0 includes only the direct catalog. - A depth of 1 includes the catalog and its immediate services. - By default the depth is unlimited,   meaning all nested services and sub-services will be included.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCatalogs(
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      qQuery?: string,
      qFetchType?: 'PARTIAL' | 'FULL',
      state?: boolean,
      depth?: string,
      options?: any
    ): AxiosPromise<CasesCatalogList> {
      return CatalogsApiFp(configuration)
        .listCatalogs(
          page,
          size,
          fields,
          sort,
          id,
          qQuery,
          qFetchType,
          state,
          depth,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Locate a catalog by ID
     * @param {string} id ID of the catalog to be located
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateCatalog(
      id: string,
      options?: any
    ): AxiosPromise<CasesLocateCatalogResponse> {
      return CatalogsApiFp(configuration)
        .locateCatalog(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update an existing catalog
     * @param {string} id ID of the catalog to be updated
     * @param {CasesInputCatalog} input Input data for updating the catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCatalog(
      id: string,
      input: CasesInputCatalog,
      options?: any
    ): AxiosPromise<CasesCatalog> {
      return CatalogsApiFp(configuration)
        .updateCatalog(id, input, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update an existing catalog
     * @param {string} id ID of the catalog to be updated
     * @param {CasesInputCatalog} input Input data for updating the catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCatalog2(
      id: string,
      input: CasesInputCatalog,
      options?: any
    ): AxiosPromise<CasesCatalog> {
      return CatalogsApiFp(configuration)
        .updateCatalog2(id, input, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CatalogsApi - object-oriented interface
 * @export
 * @class CatalogsApi
 * @extends {BaseAPI}
 */
export class CatalogsApi extends BaseAPI {
  /**
   *
   * @summary Create a new catalog
   * @param {CasesCreateCatalogRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogsApi
   */
  public createCatalog(body: CasesCreateCatalogRequest, options?: any) {
    return CatalogsApiFp(this.configuration)
      .createCatalog(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete a catalog
   * @param {Array<string>} id ID of the catalog to be deleted
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogsApi
   */
  public deleteCatalog(id: Array<string>, options?: any) {
    return CatalogsApiFp(this.configuration)
      .deleteCatalog(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Retrieve a list of catalogs or search catalogs
   * @param {number} [page] Page number for pagination
   * @param {number} [size] Number of records per page
   * @param {Array<string>} [fields] Fields to be retrieved as a result. If the user passes \&quot;-\&quot; as the value for fields, it will retrieve all available fields for each catalog.
   * @param {Array<string>} [sort] Sorting options by fields
   * @param {Array<string>} [id] List of IDs to filter the catalogs
   * @param {string} [qQuery] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
   * @param {'PARTIAL' | 'FULL'} [qFetchType] The type of data fetching for catalog services   - PARTIAL: Only essential fields like [ Id, Name, Description, Created/Updated at ].  Partial info includes only essential fields.  - FULL: The fetch type indicates whether to retrieve all available data for the catalog ( FULL ) or only essential fields ( PARTIAL ).  Full info includes all fields of the catalog.
   * @param {boolean} [state] Filter by state (true for active, false for inactive)
   * @param {string} [depth] Filter by the depth of the hierarchy to retrieve services. The depth indicates how many ancestor levels of services will be included for each catalog. - A depth of 0 includes only the direct catalog. - A depth of 1 includes the catalog and its immediate services. - By default the depth is unlimited,   meaning all nested services and sub-services will be included.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogsApi
   */
  public listCatalogs(
    page?: number,
    size?: number,
    fields?: Array<string>,
    sort?: Array<string>,
    id?: Array<string>,
    qQuery?: string,
    qFetchType?: 'PARTIAL' | 'FULL',
    state?: boolean,
    depth?: string,
    options?: any
  ) {
    return CatalogsApiFp(this.configuration)
      .listCatalogs(
        page,
        size,
        fields,
        sort,
        id,
        qQuery,
        qFetchType,
        state,
        depth,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Locate a catalog by ID
   * @param {string} id ID of the catalog to be located
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogsApi
   */
  public locateCatalog(id: string, options?: any) {
    return CatalogsApiFp(this.configuration)
      .locateCatalog(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update an existing catalog
   * @param {string} id ID of the catalog to be updated
   * @param {CasesInputCatalog} input Input data for updating the catalog
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogsApi
   */
  public updateCatalog(id: string, input: CasesInputCatalog, options?: any) {
    return CatalogsApiFp(this.configuration)
      .updateCatalog(id, input, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update an existing catalog
   * @param {string} id ID of the catalog to be updated
   * @param {CasesInputCatalog} input Input data for updating the catalog
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CatalogsApi
   */
  public updateCatalog2(id: string, input: CasesInputCatalog, options?: any) {
    return CatalogsApiFp(this.configuration)
      .updateCatalog2(id, input, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
