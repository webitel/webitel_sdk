// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { CasesInputSLACondition } from '../api'
// @ts-ignore
import { CasesLocateSLAConditionResponse } from '../api'
// @ts-ignore
import { CasesSLACondition } from '../api'
// @ts-ignore
import { CasesSLAConditionList } from '../api'
// @ts-ignore
import { GooglerpcStatus } from '../api'
// @ts-ignore
import { SLAConditionsCreateSLAConditionBody } from '../api'
/**
 * SLAConditionsApi - axios parameter creator
 * @export
 */
export const SLAConditionsApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create a new SLACondition
     * @param {string} slaId
     * @param {SLAConditionsCreateSLAConditionBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSLACondition: async (
      slaId: string,
      body: SLAConditionsCreateSLAConditionBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'slaId' is not null or undefined
      if (slaId === null || slaId === undefined) {
        throw new RequiredError(
          'slaId',
          'Required parameter slaId was null or undefined when calling createSLACondition.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createSLACondition.'
        )
      }
      const localVarPath = `/slas/{slaId}/sla_condition`.replace(
        `{${'slaId'}}`,
        encodeURIComponent(String(slaId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete an SLACondition
     * @param {string} slaId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSLACondition: async (
      slaId: string,
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'slaId' is not null or undefined
      if (slaId === null || slaId === undefined) {
        throw new RequiredError(
          'slaId',
          'Required parameter slaId was null or undefined when calling deleteSLACondition.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteSLACondition.'
        )
      }
      const localVarPath = `/slas/{slaId}/sla_condition/{id}`
        .replace(`{${'slaId'}}`, encodeURIComponent(String(slaId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Retrieve a list of SLAConditions or search SLACondition conditions
     * @param {string} slaId Filter by SLA Id
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {string} [slaConditionId] Filter by SLACondition Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSLAConditions: async (
      slaId: string,
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      slaConditionId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'slaId' is not null or undefined
      if (slaId === null || slaId === undefined) {
        throw new RequiredError(
          'slaId',
          'Required parameter slaId was null or undefined when calling listSLAConditions.'
        )
      }
      const localVarPath = `/slas/{slaId}/sla_conditions`.replace(
        `{${'slaId'}}`,
        encodeURIComponent(String(slaId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (slaConditionId !== undefined) {
        localVarQueryParameter['slaConditionId'] = slaConditionId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Locate an SLACondition by ID
     * @param {string} slaId Unique identifier of the SLACondition
     * @param {string} id Unique identifier of the SLACondition
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateSLACondition: async (
      slaId: string,
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'slaId' is not null or undefined
      if (slaId === null || slaId === undefined) {
        throw new RequiredError(
          'slaId',
          'Required parameter slaId was null or undefined when calling locateSLACondition.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling locateSLACondition.'
        )
      }
      const localVarPath = `/slas/{slaId}/sla_condition/{id}`
        .replace(`{${'slaId'}}`, encodeURIComponent(String(slaId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update an existing SLACondition
     * @param {string} slaId
     * @param {string} id
     * @param {CasesInputSLACondition} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSLACondition: async (
      slaId: string,
      id: string,
      input: CasesInputSLACondition,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'slaId' is not null or undefined
      if (slaId === null || slaId === undefined) {
        throw new RequiredError(
          'slaId',
          'Required parameter slaId was null or undefined when calling updateSLACondition.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateSLACondition.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateSLACondition.'
        )
      }
      const localVarPath = `/slas/{slaId}/sla_condition/{id}`
        .replace(`{${'slaId'}}`, encodeURIComponent(String(slaId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update an existing SLACondition
     * @param {string} slaId
     * @param {string} id
     * @param {CasesInputSLACondition} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSLACondition2: async (
      slaId: string,
      id: string,
      input: CasesInputSLACondition,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'slaId' is not null or undefined
      if (slaId === null || slaId === undefined) {
        throw new RequiredError(
          'slaId',
          'Required parameter slaId was null or undefined when calling updateSLACondition2.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateSLACondition2.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateSLACondition2.'
        )
      }
      const localVarPath = `/slas/{slaId}/sla_condition/{id}`
        .replace(`{${'slaId'}}`, encodeURIComponent(String(slaId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SLAConditionsApi - functional programming interface
 * @export
 */
export const SLAConditionsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create a new SLACondition
     * @param {string} slaId
     * @param {SLAConditionsCreateSLAConditionBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createSLACondition(
      slaId: string,
      body: SLAConditionsCreateSLAConditionBody,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesSLACondition>
    > {
      const localVarAxiosArgs = await SLAConditionsApiAxiosParamCreator(
        configuration
      ).createSLACondition(slaId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Delete an SLACondition
     * @param {string} slaId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSLACondition(
      slaId: string,
      id: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesSLACondition>
    > {
      const localVarAxiosArgs = await SLAConditionsApiAxiosParamCreator(
        configuration
      ).deleteSLACondition(slaId, id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Retrieve a list of SLAConditions or search SLACondition conditions
     * @param {string} slaId Filter by SLA Id
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {string} [slaConditionId] Filter by SLACondition Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listSLAConditions(
      slaId: string,
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      slaConditionId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesSLAConditionList>
    > {
      const localVarAxiosArgs = await SLAConditionsApiAxiosParamCreator(
        configuration
      ).listSLAConditions(
        slaId,
        page,
        size,
        fields,
        sort,
        id,
        q,
        slaConditionId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Locate an SLACondition by ID
     * @param {string} slaId Unique identifier of the SLACondition
     * @param {string} id Unique identifier of the SLACondition
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locateSLACondition(
      slaId: string,
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesLocateSLAConditionResponse>
    > {
      const localVarAxiosArgs = await SLAConditionsApiAxiosParamCreator(
        configuration
      ).locateSLACondition(slaId, id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update an existing SLACondition
     * @param {string} slaId
     * @param {string} id
     * @param {CasesInputSLACondition} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSLACondition(
      slaId: string,
      id: string,
      input: CasesInputSLACondition,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesSLACondition>
    > {
      const localVarAxiosArgs = await SLAConditionsApiAxiosParamCreator(
        configuration
      ).updateSLACondition(slaId, id, input, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update an existing SLACondition
     * @param {string} slaId
     * @param {string} id
     * @param {CasesInputSLACondition} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSLACondition2(
      slaId: string,
      id: string,
      input: CasesInputSLACondition,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesSLACondition>
    > {
      const localVarAxiosArgs = await SLAConditionsApiAxiosParamCreator(
        configuration
      ).updateSLACondition2(slaId, id, input, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * SLAConditionsApi - factory interface
 * @export
 */
export const SLAConditionsApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create a new SLACondition
     * @param {string} slaId
     * @param {SLAConditionsCreateSLAConditionBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSLACondition(
      slaId: string,
      body: SLAConditionsCreateSLAConditionBody,
      options?: any
    ): AxiosPromise<CasesSLACondition> {
      return SLAConditionsApiFp(configuration)
        .createSLACondition(slaId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete an SLACondition
     * @param {string} slaId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSLACondition(
      slaId: string,
      id: string,
      options?: any
    ): AxiosPromise<CasesSLACondition> {
      return SLAConditionsApiFp(configuration)
        .deleteSLACondition(slaId, id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Retrieve a list of SLAConditions or search SLACondition conditions
     * @param {string} slaId Filter by SLA Id
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {string} [slaConditionId] Filter by SLACondition Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSLAConditions(
      slaId: string,
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      slaConditionId?: string,
      options?: any
    ): AxiosPromise<CasesSLAConditionList> {
      return SLAConditionsApiFp(configuration)
        .listSLAConditions(
          slaId,
          page,
          size,
          fields,
          sort,
          id,
          q,
          slaConditionId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Locate an SLACondition by ID
     * @param {string} slaId Unique identifier of the SLACondition
     * @param {string} id Unique identifier of the SLACondition
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateSLACondition(
      slaId: string,
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesLocateSLAConditionResponse> {
      return SLAConditionsApiFp(configuration)
        .locateSLACondition(slaId, id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update an existing SLACondition
     * @param {string} slaId
     * @param {string} id
     * @param {CasesInputSLACondition} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSLACondition(
      slaId: string,
      id: string,
      input: CasesInputSLACondition,
      options?: any
    ): AxiosPromise<CasesSLACondition> {
      return SLAConditionsApiFp(configuration)
        .updateSLACondition(slaId, id, input, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update an existing SLACondition
     * @param {string} slaId
     * @param {string} id
     * @param {CasesInputSLACondition} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSLACondition2(
      slaId: string,
      id: string,
      input: CasesInputSLACondition,
      options?: any
    ): AxiosPromise<CasesSLACondition> {
      return SLAConditionsApiFp(configuration)
        .updateSLACondition2(slaId, id, input, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * SLAConditionsApi - object-oriented interface
 * @export
 * @class SLAConditionsApi
 * @extends {BaseAPI}
 */
export class SLAConditionsApi extends BaseAPI {
  /**
   *
   * @summary Create a new SLACondition
   * @param {string} slaId
   * @param {SLAConditionsCreateSLAConditionBody} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAConditionsApi
   */
  public createSLACondition(
    slaId: string,
    body: SLAConditionsCreateSLAConditionBody,
    options?: any
  ) {
    return SLAConditionsApiFp(this.configuration)
      .createSLACondition(slaId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete an SLACondition
   * @param {string} slaId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAConditionsApi
   */
  public deleteSLACondition(slaId: string, id: string, options?: any) {
    return SLAConditionsApiFp(this.configuration)
      .deleteSLACondition(slaId, id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Retrieve a list of SLAConditions or search SLACondition conditions
   * @param {string} slaId Filter by SLA Id
   * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
   * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {Array<string>} [sort] Sort the result according to fields.
   * @param {Array<string>} [id] Filter by unique IDs.
   * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
   * @param {string} [slaConditionId] Filter by SLACondition Id.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAConditionsApi
   */
  public listSLAConditions(
    slaId: string,
    page?: number,
    size?: number,
    fields?: Array<string>,
    sort?: Array<string>,
    id?: Array<string>,
    q?: string,
    slaConditionId?: string,
    options?: any
  ) {
    return SLAConditionsApiFp(this.configuration)
      .listSLAConditions(
        slaId,
        page,
        size,
        fields,
        sort,
        id,
        q,
        slaConditionId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Locate an SLACondition by ID
   * @param {string} slaId Unique identifier of the SLACondition
   * @param {string} id Unique identifier of the SLACondition
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAConditionsApi
   */
  public locateSLACondition(
    slaId: string,
    id: string,
    fields?: Array<string>,
    options?: any
  ) {
    return SLAConditionsApiFp(this.configuration)
      .locateSLACondition(slaId, id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update an existing SLACondition
   * @param {string} slaId
   * @param {string} id
   * @param {CasesInputSLACondition} input
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAConditionsApi
   */
  public updateSLACondition(
    slaId: string,
    id: string,
    input: CasesInputSLACondition,
    options?: any
  ) {
    return SLAConditionsApiFp(this.configuration)
      .updateSLACondition(slaId, id, input, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update an existing SLACondition
   * @param {string} slaId
   * @param {string} id
   * @param {CasesInputSLACondition} input
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SLAConditionsApi
   */
  public updateSLACondition2(
    slaId: string,
    id: string,
    input: CasesInputSLACondition,
    options?: any
  ) {
    return SLAConditionsApiFp(this.configuration)
      .updateSLACondition2(slaId, id, input, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
