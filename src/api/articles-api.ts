// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { NEWUpdateOfTheArticleLink } from '../api'
// @ts-ignore
import { WebitelKnowledgebaseArticle } from '../api'
// @ts-ignore
import { WebitelKnowledgebaseArticleList } from '../api'
// @ts-ignore
import { WebitelKnowledgebaseAttachmentList } from '../api'
// @ts-ignore
import { WebitelKnowledgebaseInputArticle } from '../api'
/**
 * ArticlesApi - axios parameter creator
 * @export
 */
export const ArticlesApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} spaceId Space ID associated with.
     * @param {string} articleId Record(s) with unique ID only.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesAttachmentList: async (
      spaceId: string,
      articleId: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'spaceId' is not null or undefined
      if (spaceId === null || spaceId === undefined) {
        throw new RequiredError(
          'spaceId',
          'Required parameter spaceId was null or undefined when calling articlesAttachmentList.'
        )
      }
      // verify required parameter 'articleId' is not null or undefined
      if (articleId === null || articleId === undefined) {
        throw new RequiredError(
          'articleId',
          'Required parameter articleId was null or undefined when calling articlesAttachmentList.'
        )
      }
      const localVarPath = `/spaces/{space_id}/articles/{article_id}/attachments`
        .replace(`{${'space_id'}}`, encodeURIComponent(String(spaceId)))
        .replace(`{${'article_id'}}`, encodeURIComponent(String(articleId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} spaceId Link space ID.
     * @param {WebitelKnowledgebaseInputArticle} input NEW Update of the Article link.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticle: async (
      spaceId: string,
      input: WebitelKnowledgebaseInputArticle,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'spaceId' is not null or undefined
      if (spaceId === null || spaceId === undefined) {
        throw new RequiredError(
          'spaceId',
          'Required parameter spaceId was null or undefined when calling createArticle.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling createArticle.'
        )
      }
      const localVarPath = `/spaces/{space_id}/articles`.replace(
        `{${'space_id'}}`,
        encodeURIComponent(String(spaceId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove the space\'s Article association.
     * @param {string} spaceId Space ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticle: async (
      spaceId: string,
      etag: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'spaceId' is not null or undefined
      if (spaceId === null || spaceId === undefined) {
        throw new RequiredError(
          'spaceId',
          'Required parameter spaceId was null or undefined when calling deleteArticle.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling deleteArticle.'
        )
      }
      const localVarPath = `/spaces/{space_id}/articles/{etag}`
        .replace(`{${'space_id'}}`, encodeURIComponent(String(spaceId)))
        .replace(`{${'etag'}}`, encodeURIComponent(String(etag)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of the Space\'s Article(s).
     * @param {string} spaceId Space ID associated with.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {string} [q] Search term: location name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {string} [articleId] Record(s) with unique ID only.
     * @param {boolean} [state] Active Article only.
     * @param {Array<string>} [tags] Tags associated with the article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listArticles: async (
      spaceId: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      fields?: Array<string>,
      q?: string,
      articleId?: string,
      state?: boolean,
      tags?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'spaceId' is not null or undefined
      if (spaceId === null || spaceId === undefined) {
        throw new RequiredError(
          'spaceId',
          'Required parameter spaceId was null or undefined when calling listArticles.'
        )
      }
      const localVarPath = `/spaces/{space_id}/articles`.replace(
        `{${'space_id'}}`,
        encodeURIComponent(String(spaceId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (articleId !== undefined) {
        localVarQueryParameter['article_id'] = articleId
      }

      if (state !== undefined) {
        localVarQueryParameter['state'] = state
      }

      if (tags) {
        localVarQueryParameter['tags'] = tags
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of the Space\'s Article(s).
     * @param {string} spaceId Space ID associated with.
     * @param {string} articleId Record(s) with unique ID only.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {string} [q] Search term: location name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {boolean} [state] Active Article only.
     * @param {Array<string>} [tags] Tags associated with the article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listArticles2: async (
      spaceId: string,
      articleId: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      fields?: Array<string>,
      q?: string,
      state?: boolean,
      tags?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'spaceId' is not null or undefined
      if (spaceId === null || spaceId === undefined) {
        throw new RequiredError(
          'spaceId',
          'Required parameter spaceId was null or undefined when calling listArticles2.'
        )
      }
      // verify required parameter 'articleId' is not null or undefined
      if (articleId === null || articleId === undefined) {
        throw new RequiredError(
          'articleId',
          'Required parameter articleId was null or undefined when calling listArticles2.'
        )
      }
      const localVarPath = `/spaces/{space_id}/articles/{article_id}/childrens`
        .replace(`{${'space_id'}}`, encodeURIComponent(String(spaceId)))
        .replace(`{${'article_id'}}`, encodeURIComponent(String(articleId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (state !== undefined) {
        localVarQueryParameter['state'] = state
      }

      if (tags) {
        localVarQueryParameter['tags'] = tags
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Locate the space\'s Article association.
     * @param {string} spaceId Space ID associated with.
     * @param {string} etag Unique Article link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateArticle: async (
      spaceId: string,
      etag: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'spaceId' is not null or undefined
      if (spaceId === null || spaceId === undefined) {
        throw new RequiredError(
          'spaceId',
          'Required parameter spaceId was null or undefined when calling locateArticle.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling locateArticle.'
        )
      }
      const localVarPath = `/spaces/{space_id}/articles/{etag}`
        .replace(`{${'space_id'}}`, encodeURIComponent(String(spaceId)))
        .replace(`{${'etag'}}`, encodeURIComponent(String(etag)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update the space\'s Article details.
     * @param {string} spaceId Link space ID.
     * @param {string} etag Unique ID of the latest version of an existing resource.
     * @param {NEWUpdateOfTheArticleLink} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArticle: async (
      spaceId: string,
      etag: string,
      input: NEWUpdateOfTheArticleLink,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'spaceId' is not null or undefined
      if (spaceId === null || spaceId === undefined) {
        throw new RequiredError(
          'spaceId',
          'Required parameter spaceId was null or undefined when calling updateArticle.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling updateArticle.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateArticle.'
        )
      }
      const localVarPath = `/spaces/{space_id}/articles/{etag}`
        .replace(`{${'space_id'}}`, encodeURIComponent(String(spaceId)))
        .replace(`{${'etag'}}`, encodeURIComponent(String(etag)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ArticlesApi - functional programming interface
 * @export
 */
export const ArticlesApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} spaceId Space ID associated with.
     * @param {string} articleId Record(s) with unique ID only.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articlesAttachmentList(
      spaceId: string,
      articleId: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelKnowledgebaseAttachmentList>
    > {
      const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(
        configuration
      ).articlesAttachmentList(spaceId, articleId, page, size, sort, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} spaceId Link space ID.
     * @param {WebitelKnowledgebaseInputArticle} input NEW Update of the Article link.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createArticle(
      spaceId: string,
      input: WebitelKnowledgebaseInputArticle,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelKnowledgebaseArticleList>
    > {
      const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(
        configuration
      ).createArticle(spaceId, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove the space\'s Article association.
     * @param {string} spaceId Space ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteArticle(
      spaceId: string,
      etag: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelKnowledgebaseArticle>
    > {
      const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(
        configuration
      ).deleteArticle(spaceId, etag, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of the Space\'s Article(s).
     * @param {string} spaceId Space ID associated with.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {string} [q] Search term: location name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {string} [articleId] Record(s) with unique ID only.
     * @param {boolean} [state] Active Article only.
     * @param {Array<string>} [tags] Tags associated with the article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listArticles(
      spaceId: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      fields?: Array<string>,
      q?: string,
      articleId?: string,
      state?: boolean,
      tags?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelKnowledgebaseArticleList>
    > {
      const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(
        configuration
      ).listArticles(
        spaceId,
        page,
        size,
        sort,
        fields,
        q,
        articleId,
        state,
        tags,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of the Space\'s Article(s).
     * @param {string} spaceId Space ID associated with.
     * @param {string} articleId Record(s) with unique ID only.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {string} [q] Search term: location name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {boolean} [state] Active Article only.
     * @param {Array<string>} [tags] Tags associated with the article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listArticles2(
      spaceId: string,
      articleId: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      fields?: Array<string>,
      q?: string,
      state?: boolean,
      tags?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelKnowledgebaseArticleList>
    > {
      const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(
        configuration
      ).listArticles2(
        spaceId,
        articleId,
        page,
        size,
        sort,
        fields,
        q,
        state,
        tags,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Locate the space\'s Article association.
     * @param {string} spaceId Space ID associated with.
     * @param {string} etag Unique Article link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locateArticle(
      spaceId: string,
      etag: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelKnowledgebaseArticle>
    > {
      const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(
        configuration
      ).locateArticle(spaceId, etag, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update the space\'s Article details.
     * @param {string} spaceId Link space ID.
     * @param {string} etag Unique ID of the latest version of an existing resource.
     * @param {NEWUpdateOfTheArticleLink} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateArticle(
      spaceId: string,
      etag: string,
      input: NEWUpdateOfTheArticleLink,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelKnowledgebaseArticleList>
    > {
      const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(
        configuration
      ).updateArticle(spaceId, etag, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * ArticlesApi - factory interface
 * @export
 */
export const ArticlesApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {string} spaceId Space ID associated with.
     * @param {string} articleId Record(s) with unique ID only.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesAttachmentList(
      spaceId: string,
      articleId: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelKnowledgebaseAttachmentList> {
      return ArticlesApiFp(configuration)
        .articlesAttachmentList(spaceId, articleId, page, size, sort, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} spaceId Link space ID.
     * @param {WebitelKnowledgebaseInputArticle} input NEW Update of the Article link.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticle(
      spaceId: string,
      input: WebitelKnowledgebaseInputArticle,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelKnowledgebaseArticleList> {
      return ArticlesApiFp(configuration)
        .createArticle(spaceId, input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove the space\'s Article association.
     * @param {string} spaceId Space ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticle(
      spaceId: string,
      etag: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelKnowledgebaseArticle> {
      return ArticlesApiFp(configuration)
        .deleteArticle(spaceId, etag, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List of the Space\'s Article(s).
     * @param {string} spaceId Space ID associated with.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {string} [q] Search term: location name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {string} [articleId] Record(s) with unique ID only.
     * @param {boolean} [state] Active Article only.
     * @param {Array<string>} [tags] Tags associated with the article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listArticles(
      spaceId: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      fields?: Array<string>,
      q?: string,
      articleId?: string,
      state?: boolean,
      tags?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelKnowledgebaseArticleList> {
      return ArticlesApiFp(configuration)
        .listArticles(
          spaceId,
          page,
          size,
          sort,
          fields,
          q,
          articleId,
          state,
          tags,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List of the Space\'s Article(s).
     * @param {string} spaceId Space ID associated with.
     * @param {string} articleId Record(s) with unique ID only.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {string} [q] Search term: location name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {boolean} [state] Active Article only.
     * @param {Array<string>} [tags] Tags associated with the article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listArticles2(
      spaceId: string,
      articleId: string,
      page?: number,
      size?: number,
      sort?: Array<string>,
      fields?: Array<string>,
      q?: string,
      state?: boolean,
      tags?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelKnowledgebaseArticleList> {
      return ArticlesApiFp(configuration)
        .listArticles2(
          spaceId,
          articleId,
          page,
          size,
          sort,
          fields,
          q,
          state,
          tags,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Locate the space\'s Article association.
     * @param {string} spaceId Space ID associated with.
     * @param {string} etag Unique Article link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateArticle(
      spaceId: string,
      etag: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelKnowledgebaseArticle> {
      return ArticlesApiFp(configuration)
        .locateArticle(spaceId, etag, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update the space\'s Article details.
     * @param {string} spaceId Link space ID.
     * @param {string} etag Unique ID of the latest version of an existing resource.
     * @param {NEWUpdateOfTheArticleLink} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArticle(
      spaceId: string,
      etag: string,
      input: NEWUpdateOfTheArticleLink,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelKnowledgebaseArticleList> {
      return ArticlesApiFp(configuration)
        .updateArticle(spaceId, etag, input, fields, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
export class ArticlesApi extends BaseAPI {
  /**
   *
   * @param {string} spaceId Space ID associated with.
   * @param {string} articleId Record(s) with unique ID only.
   * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
   * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
   * @param {Array<string>} [sort] Sort the result according to fields.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articlesAttachmentList(
    spaceId: string,
    articleId: string,
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: any
  ) {
    return ArticlesApiFp(this.configuration)
      .articlesAttachmentList(spaceId, articleId, page, size, sort, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} spaceId Link space ID.
   * @param {WebitelKnowledgebaseInputArticle} input NEW Update of the Article link.
   * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public createArticle(
    spaceId: string,
    input: WebitelKnowledgebaseInputArticle,
    fields?: Array<string>,
    options?: any
  ) {
    return ArticlesApiFp(this.configuration)
      .createArticle(spaceId, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove the space\'s Article association.
   * @param {string} spaceId Space ID associated with.
   * @param {string} etag Unique ID to remove.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public deleteArticle(
    spaceId: string,
    etag: string,
    fields?: Array<string>,
    options?: any
  ) {
    return ArticlesApiFp(this.configuration)
      .deleteArticle(spaceId, etag, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List of the Space\'s Article(s).
   * @param {string} spaceId Space ID associated with.
   * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
   * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
   * @param {Array<string>} [sort] Sort the result according to fields.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {string} [q] Search term: location name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
   * @param {string} [articleId] Record(s) with unique ID only.
   * @param {boolean} [state] Active Article only.
   * @param {Array<string>} [tags] Tags associated with the article.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public listArticles(
    spaceId: string,
    page?: number,
    size?: number,
    sort?: Array<string>,
    fields?: Array<string>,
    q?: string,
    articleId?: string,
    state?: boolean,
    tags?: Array<string>,
    options?: any
  ) {
    return ArticlesApiFp(this.configuration)
      .listArticles(
        spaceId,
        page,
        size,
        sort,
        fields,
        q,
        articleId,
        state,
        tags,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List of the Space\'s Article(s).
   * @param {string} spaceId Space ID associated with.
   * @param {string} articleId Record(s) with unique ID only.
   * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
   * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
   * @param {Array<string>} [sort] Sort the result according to fields.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {string} [q] Search term: location name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
   * @param {boolean} [state] Active Article only.
   * @param {Array<string>} [tags] Tags associated with the article.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public listArticles2(
    spaceId: string,
    articleId: string,
    page?: number,
    size?: number,
    sort?: Array<string>,
    fields?: Array<string>,
    q?: string,
    state?: boolean,
    tags?: Array<string>,
    options?: any
  ) {
    return ArticlesApiFp(this.configuration)
      .listArticles2(
        spaceId,
        articleId,
        page,
        size,
        sort,
        fields,
        q,
        state,
        tags,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Locate the space\'s Article association.
   * @param {string} spaceId Space ID associated with.
   * @param {string} etag Unique Article link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
   * @param {Array<string>} [fields] Fields to be retrieved into result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public locateArticle(
    spaceId: string,
    etag: string,
    fields?: Array<string>,
    options?: any
  ) {
    return ArticlesApiFp(this.configuration)
      .locateArticle(spaceId, etag, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update the space\'s Article details.
   * @param {string} spaceId Link space ID.
   * @param {string} etag Unique ID of the latest version of an existing resource.
   * @param {NEWUpdateOfTheArticleLink} input
   * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public updateArticle(
    spaceId: string,
    etag: string,
    input: NEWUpdateOfTheArticleLink,
    fields?: Array<string>,
    options?: any
  ) {
    return ArticlesApiFp(this.configuration)
      .updateArticle(spaceId, etag, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
