// tslint:disable
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 22.05.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { EngineCreateOutboundResourceDisplayRequest } from '../api'
// @ts-ignore
import { EngineCreateOutboundResourceRequest } from '../api'
// @ts-ignore
import { EngineListOutboundResource } from '../api'
// @ts-ignore
import { EngineListOutboundResourceDisplay } from '../api'
// @ts-ignore
import { EngineOutboundResource } from '../api'
// @ts-ignore
import { EnginePatchOutboundResourceRequest } from '../api'
// @ts-ignore
import { EngineResourceDisplay } from '../api'
// @ts-ignore
import { EngineUpdateOutboundResourceDisplayRequest } from '../api'
// @ts-ignore
import { EngineUpdateOutboundResourceRequest } from '../api'
// @ts-ignore
import { RuntimeError } from '../api'
/**
 * OutboundResourceServiceApi - axios parameter creator
 * @export
 */
export const OutboundResourceServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceCreateOutboundResource: async (
      body: EngineCreateOutboundResourceRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling outboundResourceServiceCreateOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resourceId
     * @param {EngineCreateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceCreateOutboundResourceDisplay: async (
      resourceId: string,
      body: EngineCreateOutboundResourceDisplayRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'resourceId' is not null or undefined
      if (resourceId === null || resourceId === undefined) {
        throw new RequiredError(
          'resourceId',
          'Required parameter resourceId was null or undefined when calling outboundResourceServiceCreateOutboundResourceDisplay.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling outboundResourceServiceCreateOutboundResourceDisplay.'
        )
      }
      const localVarPath = `/call_center/resources/{resource_id}/display`.replace(
        `{${'resource_id'}}`,
        encodeURIComponent(String(resourceId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceDeleteOutboundResource: async (
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling outboundResourceServiceDeleteOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceDeleteOutboundResourceDisplay: async (
      resourceId: string,
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'resourceId' is not null or undefined
      if (resourceId === null || resourceId === undefined) {
        throw new RequiredError(
          'resourceId',
          'Required parameter resourceId was null or undefined when calling outboundResourceServiceDeleteOutboundResourceDisplay.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling outboundResourceServiceDeleteOutboundResourceDisplay.'
        )
      }
      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch OutboundResource
     * @param {string} id
     * @param {EnginePatchOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServicePatchOutboundResource: async (
      id: string,
      body: EnginePatchOutboundResourceRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling outboundResourceServicePatchOutboundResource.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling outboundResourceServicePatchOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceReadOutboundResource: async (
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling outboundResourceServiceReadOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary ResourceDisplay item
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceReadOutboundResourceDisplay: async (
      resourceId: string,
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'resourceId' is not null or undefined
      if (resourceId === null || resourceId === undefined) {
        throw new RequiredError(
          'resourceId',
          'Required parameter resourceId was null or undefined when calling outboundResourceServiceReadOutboundResourceDisplay.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling outboundResourceServiceReadOutboundResourceDisplay.'
        )
      }
      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceSearchOutboundResource: async (
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/call_center/resources`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of ResourceDisplay
     * @param {string} resourceId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceSearchOutboundResourceDisplay: async (
      resourceId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'resourceId' is not null or undefined
      if (resourceId === null || resourceId === undefined) {
        throw new RequiredError(
          'resourceId',
          'Required parameter resourceId was null or undefined when calling outboundResourceServiceSearchOutboundResourceDisplay.'
        )
      }
      const localVarPath = `/call_center/resources/{resource_id}/display`.replace(
        `{${'resource_id'}}`,
        encodeURIComponent(String(resourceId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceUpdateOutboundResource: async (
      id: string,
      body: EngineUpdateOutboundResourceRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling outboundResourceServiceUpdateOutboundResource.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling outboundResourceServiceUpdateOutboundResource.'
        )
      }
      const localVarPath = `/call_center/resources/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {EngineUpdateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceUpdateOutboundResourceDisplay: async (
      resourceId: string,
      id: string,
      body: EngineUpdateOutboundResourceDisplayRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'resourceId' is not null or undefined
      if (resourceId === null || resourceId === undefined) {
        throw new RequiredError(
          'resourceId',
          'Required parameter resourceId was null or undefined when calling outboundResourceServiceUpdateOutboundResourceDisplay.'
        )
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling outboundResourceServiceUpdateOutboundResourceDisplay.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling outboundResourceServiceUpdateOutboundResourceDisplay.'
        )
      }
      const localVarPath = `/call_center/resources/{resource_id}/display/{id}`
        .replace(`{${'resource_id'}}`, encodeURIComponent(String(resourceId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OutboundResourceServiceApi - functional programming interface
 * @export
 */
export const OutboundResourceServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServiceCreateOutboundResource(
      body: EngineCreateOutboundResourceRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineOutboundResource>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServiceCreateOutboundResource(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resourceId
     * @param {EngineCreateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServiceCreateOutboundResourceDisplay(
      resourceId: string,
      body: EngineCreateOutboundResourceDisplayRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceDisplay>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServiceCreateOutboundResourceDisplay(
        resourceId,
        body,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServiceDeleteOutboundResource(
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineOutboundResource>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServiceDeleteOutboundResource(id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServiceDeleteOutboundResourceDisplay(
      resourceId: string,
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceDisplay>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServiceDeleteOutboundResourceDisplay(
        resourceId,
        id,
        domainId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch OutboundResource
     * @param {string} id
     * @param {EnginePatchOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServicePatchOutboundResource(
      id: string,
      body: EnginePatchOutboundResourceRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineOutboundResource>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServicePatchOutboundResource(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServiceReadOutboundResource(
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineOutboundResource>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServiceReadOutboundResource(id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary ResourceDisplay item
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServiceReadOutboundResourceDisplay(
      resourceId: string,
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceDisplay>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServiceReadOutboundResourceDisplay(
        resourceId,
        id,
        domainId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServiceSearchOutboundResource(
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListOutboundResource>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServiceSearchOutboundResource(
        page,
        size,
        q,
        sort,
        fields,
        id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of ResourceDisplay
     * @param {string} resourceId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServiceSearchOutboundResourceDisplay(
      resourceId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListOutboundResourceDisplay>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServiceSearchOutboundResourceDisplay(
        resourceId,
        page,
        size,
        q,
        sort,
        fields,
        id,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServiceUpdateOutboundResource(
      id: string,
      body: EngineUpdateOutboundResourceRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineOutboundResource>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServiceUpdateOutboundResource(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {EngineUpdateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outboundResourceServiceUpdateOutboundResourceDisplay(
      resourceId: string,
      id: string,
      body: EngineUpdateOutboundResourceDisplayRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineResourceDisplay>
    > {
      const localVarAxiosArgs = await OutboundResourceServiceApiAxiosParamCreator(
        configuration
      ).outboundResourceServiceUpdateOutboundResourceDisplay(
        resourceId,
        id,
        body,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * OutboundResourceServiceApi - factory interface
 * @export
 */
export const OutboundResourceServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceCreateOutboundResource(
      body: EngineCreateOutboundResourceRequest,
      options?: any
    ): AxiosPromise<EngineOutboundResource> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServiceCreateOutboundResource(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resourceId
     * @param {EngineCreateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceCreateOutboundResourceDisplay(
      resourceId: string,
      body: EngineCreateOutboundResourceDisplayRequest,
      options?: any
    ): AxiosPromise<EngineResourceDisplay> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServiceCreateOutboundResourceDisplay(
          resourceId,
          body,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceDeleteOutboundResource(
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineOutboundResource> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServiceDeleteOutboundResource(id, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceDeleteOutboundResourceDisplay(
      resourceId: string,
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineResourceDisplay> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServiceDeleteOutboundResourceDisplay(
          resourceId,
          id,
          domainId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Patch OutboundResource
     * @param {string} id
     * @param {EnginePatchOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServicePatchOutboundResource(
      id: string,
      body: EnginePatchOutboundResourceRequest,
      options?: any
    ): AxiosPromise<EngineOutboundResource> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServicePatchOutboundResource(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceReadOutboundResource(
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineOutboundResource> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServiceReadOutboundResource(id, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary ResourceDisplay item
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceReadOutboundResourceDisplay(
      resourceId: string,
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineResourceDisplay> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServiceReadOutboundResourceDisplay(
          resourceId,
          id,
          domainId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceSearchOutboundResource(
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      options?: any
    ): AxiosPromise<EngineListOutboundResource> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServiceSearchOutboundResource(
          page,
          size,
          q,
          sort,
          fields,
          id,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List of ResourceDisplay
     * @param {string} resourceId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceSearchOutboundResourceDisplay(
      resourceId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      options?: any
    ): AxiosPromise<EngineListOutboundResourceDisplay> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServiceSearchOutboundResourceDisplay(
          resourceId,
          page,
          size,
          q,
          sort,
          fields,
          id,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceUpdateOutboundResource(
      id: string,
      body: EngineUpdateOutboundResourceRequest,
      options?: any
    ): AxiosPromise<EngineOutboundResource> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServiceUpdateOutboundResource(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {EngineUpdateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outboundResourceServiceUpdateOutboundResourceDisplay(
      resourceId: string,
      id: string,
      body: EngineUpdateOutboundResourceDisplayRequest,
      options?: any
    ): AxiosPromise<EngineResourceDisplay> {
      return OutboundResourceServiceApiFp(configuration)
        .outboundResourceServiceUpdateOutboundResourceDisplay(
          resourceId,
          id,
          body,
          options
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * OutboundResourceServiceApi - object-oriented interface
 * @export
 * @class OutboundResourceServiceApi
 * @extends {BaseAPI}
 */
export class OutboundResourceServiceApi extends BaseAPI {
  /**
   *
   * @summary Create OutboundResource
   * @param {EngineCreateOutboundResourceRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServiceCreateOutboundResource(
    body: EngineCreateOutboundResourceRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServiceCreateOutboundResource(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Create CreateOutboundResourceDisplay
   * @param {string} resourceId
   * @param {EngineCreateOutboundResourceDisplayRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServiceCreateOutboundResourceDisplay(
    resourceId: string,
    body: EngineCreateOutboundResourceDisplayRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServiceCreateOutboundResourceDisplay(
        resourceId,
        body,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove OutboundResource
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServiceDeleteOutboundResource(
    id: string,
    domainId?: string,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServiceDeleteOutboundResource(id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove ResourceDisplay
   * @param {string} resourceId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServiceDeleteOutboundResourceDisplay(
    resourceId: string,
    id: string,
    domainId?: string,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServiceDeleteOutboundResourceDisplay(
        resourceId,
        id,
        domainId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Patch OutboundResource
   * @param {string} id
   * @param {EnginePatchOutboundResourceRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServicePatchOutboundResource(
    id: string,
    body: EnginePatchOutboundResourceRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServicePatchOutboundResource(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary OutboundResource item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServiceReadOutboundResource(
    id: string,
    domainId?: string,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServiceReadOutboundResource(id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary ResourceDisplay item
   * @param {string} resourceId
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServiceReadOutboundResourceDisplay(
    resourceId: string,
    id: string,
    domainId?: string,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServiceReadOutboundResourceDisplay(
        resourceId,
        id,
        domainId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List of OutboundResource
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {Array<number>} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServiceSearchOutboundResource(
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    id?: Array<number>,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServiceSearchOutboundResource(
        page,
        size,
        q,
        sort,
        fields,
        id,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List of ResourceDisplay
   * @param {string} resourceId
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {Array<number>} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServiceSearchOutboundResourceDisplay(
    resourceId: string,
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    id?: Array<number>,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServiceSearchOutboundResourceDisplay(
        resourceId,
        page,
        size,
        q,
        sort,
        fields,
        id,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update OutboundResource
   * @param {string} id
   * @param {EngineUpdateOutboundResourceRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServiceUpdateOutboundResource(
    id: string,
    body: EngineUpdateOutboundResourceRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServiceUpdateOutboundResource(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update ResourceDisplay
   * @param {string} resourceId
   * @param {string} id
   * @param {EngineUpdateOutboundResourceDisplayRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OutboundResourceServiceApi
   */
  public outboundResourceServiceUpdateOutboundResourceDisplay(
    resourceId: string,
    id: string,
    body: EngineUpdateOutboundResourceDisplayRequest,
    options?: any
  ) {
    return OutboundResourceServiceApiFp(this.configuration)
      .outboundResourceServiceUpdateOutboundResourceDisplay(
        resourceId,
        id,
        body,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
