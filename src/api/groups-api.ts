// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { WebitelContactsContactList } from '../api'
// @ts-ignore
import { WebitelContactsCreateGroupRequest } from '../api'
// @ts-ignore
import { WebitelContactsGroup } from '../api'
// @ts-ignore
import { WebitelContactsGroupList } from '../api'
// @ts-ignore
import { WebitelContactsInputGroup } from '../api'
// @ts-ignore
import { WebitelContactsLocateGroupResponse } from '../api'
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Add contacts to a group
     * @param {string} groupId The unique ID of the group.
     * @param {Array<string>} [contactIds] List of contact IDs to add to the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContactsToGroup: async (
      groupId: string,
      contactIds?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling addContactsToGroup.'
        )
      }
      const localVarPath = `/contacts/groups/{group_id}/contact`.replace(
        `{${'group_id'}}`,
        encodeURIComponent(String(groupId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (contactIds) {
        localVarQueryParameter['contact_ids'] = contactIds
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create a new group
     * @param {WebitelContactsCreateGroupRequest} body Request message for creating a new group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup: async (
      body: WebitelContactsCreateGroupRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createGroup.'
        )
      }
      const localVarPath = `/contacts/groups`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete a group
     * @param {string} id The unique ID of the group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteGroup.'
        )
      }
      const localVarPath = `/contacts/groups/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Retrieve a list of groups or search groups
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search term: group name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {string} [name] Filter by group name.
     * @param {'GROUP_TYPE_UNSPECIFIED' | 'STATIC' | 'DYNAMIC'} [type] Filter by group type.   - GROUP_TYPE_UNSPECIFIED: Default value  - STATIC: Static group  - DYNAMIC: Dynamic group
     * @param {boolean} [enabled] Filter by only enabled group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGroups: async (
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      name?: string,
      type?: 'GROUP_TYPE_UNSPECIFIED' | 'STATIC' | 'DYNAMIC',
      enabled?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/contacts/groups`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type
      }

      if (enabled !== undefined) {
        localVarQueryParameter['enabled'] = enabled
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Locate a group by ID
     * @param {string} id The unique ID of the group to locate.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateGroup: async (
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling locateGroup.'
        )
      }
      const localVarPath = `/contacts/groups/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove contacts from a group
     * @param {string} groupId The unique ID of the group.
     * @param {Array<string>} [contactIds] List of contact IDs to remove from the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeContactsFromGroup: async (
      groupId: string,
      contactIds?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling removeContactsFromGroup.'
        )
      }
      const localVarPath = `/contacts/groups/{group_id}/contact`.replace(
        `{${'group_id'}}`,
        encodeURIComponent(String(groupId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (contactIds) {
        localVarQueryParameter['contact_ids'] = contactIds
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update an existing group
     * @param {string} id The unique ID of the group to update.
     * @param {WebitelContactsInputGroup} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup: async (
      id: string,
      input: WebitelContactsInputGroup,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateGroup.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateGroup.'
        )
      }
      const localVarPath = `/contacts/groups/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update an existing group
     * @param {string} id The unique ID of the group to update.
     * @param {WebitelContactsInputGroup} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup2: async (
      id: string,
      input: WebitelContactsInputGroup,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateGroup2.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateGroup2.'
        )
      }
      const localVarPath = `/contacts/groups/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add contacts to a group
     * @param {string} groupId The unique ID of the group.
     * @param {Array<string>} [contactIds] List of contact IDs to add to the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addContactsToGroup(
      groupId: string,
      contactIds?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsContactList>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).addContactsToGroup(groupId, contactIds, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create a new group
     * @param {WebitelContactsCreateGroupRequest} body Request message for creating a new group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createGroup(
      body: WebitelContactsCreateGroupRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsGroup>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).createGroup(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Delete a group
     * @param {string} id The unique ID of the group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGroup(
      id: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsGroup>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).deleteGroup(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Retrieve a list of groups or search groups
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search term: group name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {string} [name] Filter by group name.
     * @param {'GROUP_TYPE_UNSPECIFIED' | 'STATIC' | 'DYNAMIC'} [type] Filter by group type.   - GROUP_TYPE_UNSPECIFIED: Default value  - STATIC: Static group  - DYNAMIC: Dynamic group
     * @param {boolean} [enabled] Filter by only enabled group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listGroups(
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      name?: string,
      type?: 'GROUP_TYPE_UNSPECIFIED' | 'STATIC' | 'DYNAMIC',
      enabled?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsGroupList>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).listGroups(
        page,
        size,
        fields,
        sort,
        id,
        q,
        name,
        type,
        enabled,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Locate a group by ID
     * @param {string} id The unique ID of the group to locate.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locateGroup(
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsLocateGroupResponse>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).locateGroup(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove contacts from a group
     * @param {string} groupId The unique ID of the group.
     * @param {Array<string>} [contactIds] List of contact IDs to remove from the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeContactsFromGroup(
      groupId: string,
      contactIds?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsContactList>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).removeContactsFromGroup(groupId, contactIds, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update an existing group
     * @param {string} id The unique ID of the group to update.
     * @param {WebitelContactsInputGroup} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateGroup(
      id: string,
      input: WebitelContactsInputGroup,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsGroup>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).updateGroup(id, input, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update an existing group
     * @param {string} id The unique ID of the group to update.
     * @param {WebitelContactsInputGroup} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateGroup2(
      id: string,
      input: WebitelContactsInputGroup,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsGroup>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).updateGroup2(id, input, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Add contacts to a group
     * @param {string} groupId The unique ID of the group.
     * @param {Array<string>} [contactIds] List of contact IDs to add to the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addContactsToGroup(
      groupId: string,
      contactIds?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsContactList> {
      return GroupsApiFp(configuration)
        .addContactsToGroup(groupId, contactIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create a new group
     * @param {WebitelContactsCreateGroupRequest} body Request message for creating a new group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      body: WebitelContactsCreateGroupRequest,
      options?: any
    ): AxiosPromise<WebitelContactsGroup> {
      return GroupsApiFp(configuration)
        .createGroup(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete a group
     * @param {string} id The unique ID of the group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(id: string, options?: any): AxiosPromise<WebitelContactsGroup> {
      return GroupsApiFp(configuration)
        .deleteGroup(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Retrieve a list of groups or search groups
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search term: group name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {string} [name] Filter by group name.
     * @param {'GROUP_TYPE_UNSPECIFIED' | 'STATIC' | 'DYNAMIC'} [type] Filter by group type.   - GROUP_TYPE_UNSPECIFIED: Default value  - STATIC: Static group  - DYNAMIC: Dynamic group
     * @param {boolean} [enabled] Filter by only enabled group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGroups(
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      name?: string,
      type?: 'GROUP_TYPE_UNSPECIFIED' | 'STATIC' | 'DYNAMIC',
      enabled?: boolean,
      options?: any
    ): AxiosPromise<WebitelContactsGroupList> {
      return GroupsApiFp(configuration)
        .listGroups(
          page,
          size,
          fields,
          sort,
          id,
          q,
          name,
          type,
          enabled,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Locate a group by ID
     * @param {string} id The unique ID of the group to locate.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateGroup(
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsLocateGroupResponse> {
      return GroupsApiFp(configuration)
        .locateGroup(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove contacts from a group
     * @param {string} groupId The unique ID of the group.
     * @param {Array<string>} [contactIds] List of contact IDs to remove from the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeContactsFromGroup(
      groupId: string,
      contactIds?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsContactList> {
      return GroupsApiFp(configuration)
        .removeContactsFromGroup(groupId, contactIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update an existing group
     * @param {string} id The unique ID of the group to update.
     * @param {WebitelContactsInputGroup} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      id: string,
      input: WebitelContactsInputGroup,
      options?: any
    ): AxiosPromise<WebitelContactsGroup> {
      return GroupsApiFp(configuration)
        .updateGroup(id, input, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update an existing group
     * @param {string} id The unique ID of the group to update.
     * @param {WebitelContactsInputGroup} input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup2(
      id: string,
      input: WebitelContactsInputGroup,
      options?: any
    ): AxiosPromise<WebitelContactsGroup> {
      return GroupsApiFp(configuration)
        .updateGroup2(id, input, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
  /**
   *
   * @summary Add contacts to a group
   * @param {string} groupId The unique ID of the group.
   * @param {Array<string>} [contactIds] List of contact IDs to add to the group.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public addContactsToGroup(
    groupId: string,
    contactIds?: Array<string>,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .addContactsToGroup(groupId, contactIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Create a new group
   * @param {WebitelContactsCreateGroupRequest} body Request message for creating a new group.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public createGroup(body: WebitelContactsCreateGroupRequest, options?: any) {
    return GroupsApiFp(this.configuration)
      .createGroup(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete a group
   * @param {string} id The unique ID of the group to delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public deleteGroup(id: string, options?: any) {
    return GroupsApiFp(this.configuration)
      .deleteGroup(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Retrieve a list of groups or search groups
   * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
   * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {Array<string>} [sort] Sort the result according to fields.
   * @param {Array<string>} [id] Filter by unique IDs.
   * @param {string} [q] Search term: group name; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
   * @param {string} [name] Filter by group name.
   * @param {'GROUP_TYPE_UNSPECIFIED' | 'STATIC' | 'DYNAMIC'} [type] Filter by group type.   - GROUP_TYPE_UNSPECIFIED: Default value  - STATIC: Static group  - DYNAMIC: Dynamic group
   * @param {boolean} [enabled] Filter by only enabled group
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public listGroups(
    page?: number,
    size?: number,
    fields?: Array<string>,
    sort?: Array<string>,
    id?: Array<string>,
    q?: string,
    name?: string,
    type?: 'GROUP_TYPE_UNSPECIFIED' | 'STATIC' | 'DYNAMIC',
    enabled?: boolean,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .listGroups(page, size, fields, sort, id, q, name, type, enabled, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Locate a group by ID
   * @param {string} id The unique ID of the group to locate.
   * @param {Array<string>} [fields] Fields to be retrieved into result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public locateGroup(id: string, fields?: Array<string>, options?: any) {
    return GroupsApiFp(this.configuration)
      .locateGroup(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove contacts from a group
   * @param {string} groupId The unique ID of the group.
   * @param {Array<string>} [contactIds] List of contact IDs to remove from the group.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public removeContactsFromGroup(
    groupId: string,
    contactIds?: Array<string>,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .removeContactsFromGroup(groupId, contactIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update an existing group
   * @param {string} id The unique ID of the group to update.
   * @param {WebitelContactsInputGroup} input
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public updateGroup(
    id: string,
    input: WebitelContactsInputGroup,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .updateGroup(id, input, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update an existing group
   * @param {string} id The unique ID of the group to update.
   * @param {WebitelContactsInputGroup} input
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public updateGroup2(
    id: string,
    input: WebitelContactsInputGroup,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .updateGroup2(id, input, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
