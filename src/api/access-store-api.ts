// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { ApiAccessStoreToggleDefaultAccessBody } from '../api'
// @ts-ignore
import { ApiGrantAccessRequestV1 } from '../api'
// @ts-ignore
import { ApiListAccessResponseV1 } from '../api'
// @ts-ignore
import { ApiToggleDefaultAccessResponse } from '../api'
// @ts-ignore
import { ApiUpdateAccessResponseV1 } from '../api'
/**
 * AccessStoreApi - axios parameter creator
 * @export
 */
export const AccessStoreApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary default: TODO: indicate objclass=default as a default rights repo
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {Array<string>} [grantor] --- filters ---  [optional] [FROM] each rule owner is any of role(s) id; user -or- role
     * @param {Array<string>} [grantee] [optional] [TO] subject role(s) id; user -or- role
     * @param {Array<string>} [granted] [xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)
     * @param {string} [q] [optional] [TO] subject.name ILIKE ?q&#x3D;; user -or- role
     * @param {Array<string>} [fields] ----- Select Options -------------------------  attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {number} [size] pagedResultsControl  default: 16
     * @param {number} [page] default: 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDefaultAccess: async (
      objectName: string,
      objectId: string,
      grantor?: Array<string>,
      grantee?: Array<string>,
      granted?: Array<string>,
      q?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      size?: number,
      page?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'objectName' is not null or undefined
      if (objectName === null || objectName === undefined) {
        throw new RequiredError(
          'objectName',
          'Required parameter objectName was null or undefined when calling listDefaultAccess.'
        )
      }
      // verify required parameter 'objectId' is not null or undefined
      if (objectId === null || objectId === undefined) {
        throw new RequiredError(
          'objectId',
          'Required parameter objectId was null or undefined when calling listDefaultAccess.'
        )
      }
      const localVarPath = `/acl/{object.name}/{object.id}`
        .replace(`{${'object.name'}}`, encodeURIComponent(String(objectName)))
        .replace(`{${'object.id'}}`, encodeURIComponent(String(objectId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (grantor) {
        localVarQueryParameter['grantor'] = grantor
      }

      if (grantee) {
        localVarQueryParameter['grantee'] = grantee
      }

      if (granted) {
        localVarQueryParameter['granted'] = granted
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {Array<string>} [grantor] --- filters ---  [optional] [FROM] each rule owner is any of role(s) id; user -or- role
     * @param {Array<string>} [grantee] [optional] [TO] subject role(s) id; user -or- role
     * @param {Array<string>} [granted] [xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)
     * @param {string} [q] [optional] [TO] subject.name ILIKE ?q&#x3D;; user -or- role
     * @param {Array<string>} [fields] ----- Select Options -------------------------  attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {number} [size] pagedResultsControl  default: 16
     * @param {number} [page] default: 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listObjectAccess: async (
      objectName: string,
      objectId: string,
      grantor?: Array<string>,
      grantee?: Array<string>,
      granted?: Array<string>,
      q?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      size?: number,
      page?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'objectName' is not null or undefined
      if (objectName === null || objectName === undefined) {
        throw new RequiredError(
          'objectName',
          'Required parameter objectName was null or undefined when calling listObjectAccess.'
        )
      }
      // verify required parameter 'objectId' is not null or undefined
      if (objectId === null || objectId === undefined) {
        throw new RequiredError(
          'objectId',
          'Required parameter objectId was null or undefined when calling listObjectAccess.'
        )
      }
      const localVarPath = `/{object.name}/{object.id}/acl`
        .replace(`{${'object.name'}}`, encodeURIComponent(String(objectName)))
        .replace(`{${'object.id'}}`, encodeURIComponent(String(objectId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (grantor) {
        localVarQueryParameter['grantor'] = grantor
      }

      if (grantee) {
        localVarQueryParameter['grantee'] = grantee
      }

      if (granted) {
        localVarQueryParameter['granted'] = granted
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Same as UpdateAccess except for DEFAULT access control system
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {string} grantor [FOR] creator user/role
     * @param {ApiAccessStoreToggleDefaultAccessBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleDefaultAccess: async (
      objectName: string,
      objectId: string,
      grantor: string,
      body: ApiAccessStoreToggleDefaultAccessBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'objectName' is not null or undefined
      if (objectName === null || objectName === undefined) {
        throw new RequiredError(
          'objectName',
          'Required parameter objectName was null or undefined when calling toggleDefaultAccess.'
        )
      }
      // verify required parameter 'objectId' is not null or undefined
      if (objectId === null || objectId === undefined) {
        throw new RequiredError(
          'objectId',
          'Required parameter objectId was null or undefined when calling toggleDefaultAccess.'
        )
      }
      // verify required parameter 'grantor' is not null or undefined
      if (grantor === null || grantor === undefined) {
        throw new RequiredError(
          'grantor',
          'Required parameter grantor was null or undefined when calling toggleDefaultAccess.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling toggleDefaultAccess.'
        )
      }
      const localVarPath = `/acl/{object.name}/{object.id}/grantor/{grantor}`
        .replace(`{${'object.name'}}`, encodeURIComponent(String(objectName)))
        .replace(`{${'object.id'}}`, encodeURIComponent(String(objectId)))
        .replace(`{${'grantor'}}`, encodeURIComponent(String(grantor)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {Array<ApiGrantAccessRequestV1>} list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleObjectAccess: async (
      objectName: string,
      objectId: string,
      list: Array<ApiGrantAccessRequestV1>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'objectName' is not null or undefined
      if (objectName === null || objectName === undefined) {
        throw new RequiredError(
          'objectName',
          'Required parameter objectName was null or undefined when calling toggleObjectAccess.'
        )
      }
      // verify required parameter 'objectId' is not null or undefined
      if (objectId === null || objectId === undefined) {
        throw new RequiredError(
          'objectId',
          'Required parameter objectId was null or undefined when calling toggleObjectAccess.'
        )
      }
      // verify required parameter 'list' is not null or undefined
      if (list === null || list === undefined) {
        throw new RequiredError(
          'list',
          'Required parameter list was null or undefined when calling toggleObjectAccess.'
        )
      }
      const localVarPath = `/{object.name}/{object.id}/acl`
        .replace(`{${'object.name'}}`, encodeURIComponent(String(objectName)))
        .replace(`{${'object.id'}}`, encodeURIComponent(String(objectId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof list !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(list !== undefined ? list : {})
        : list || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AccessStoreApi - functional programming interface
 * @export
 */
export const AccessStoreApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary default: TODO: indicate objclass=default as a default rights repo
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {Array<string>} [grantor] --- filters ---  [optional] [FROM] each rule owner is any of role(s) id; user -or- role
     * @param {Array<string>} [grantee] [optional] [TO] subject role(s) id; user -or- role
     * @param {Array<string>} [granted] [xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)
     * @param {string} [q] [optional] [TO] subject.name ILIKE ?q&#x3D;; user -or- role
     * @param {Array<string>} [fields] ----- Select Options -------------------------  attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {number} [size] pagedResultsControl  default: 16
     * @param {number} [page] default: 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listDefaultAccess(
      objectName: string,
      objectId: string,
      grantor?: Array<string>,
      grantee?: Array<string>,
      granted?: Array<string>,
      q?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      size?: number,
      page?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiListAccessResponseV1>
    > {
      const localVarAxiosArgs = await AccessStoreApiAxiosParamCreator(
        configuration
      ).listDefaultAccess(
        objectName,
        objectId,
        grantor,
        grantee,
        granted,
        q,
        fields,
        sort,
        size,
        page,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {Array<string>} [grantor] --- filters ---  [optional] [FROM] each rule owner is any of role(s) id; user -or- role
     * @param {Array<string>} [grantee] [optional] [TO] subject role(s) id; user -or- role
     * @param {Array<string>} [granted] [xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)
     * @param {string} [q] [optional] [TO] subject.name ILIKE ?q&#x3D;; user -or- role
     * @param {Array<string>} [fields] ----- Select Options -------------------------  attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {number} [size] pagedResultsControl  default: 16
     * @param {number} [page] default: 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listObjectAccess(
      objectName: string,
      objectId: string,
      grantor?: Array<string>,
      grantee?: Array<string>,
      granted?: Array<string>,
      q?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      size?: number,
      page?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiListAccessResponseV1>
    > {
      const localVarAxiosArgs = await AccessStoreApiAxiosParamCreator(
        configuration
      ).listObjectAccess(
        objectName,
        objectId,
        grantor,
        grantee,
        granted,
        q,
        fields,
        sort,
        size,
        page,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Same as UpdateAccess except for DEFAULT access control system
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {string} grantor [FOR] creator user/role
     * @param {ApiAccessStoreToggleDefaultAccessBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async toggleDefaultAccess(
      objectName: string,
      objectId: string,
      grantor: string,
      body: ApiAccessStoreToggleDefaultAccessBody,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiToggleDefaultAccessResponse>
    > {
      const localVarAxiosArgs = await AccessStoreApiAxiosParamCreator(
        configuration
      ).toggleDefaultAccess(objectName, objectId, grantor, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {Array<ApiGrantAccessRequestV1>} list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async toggleObjectAccess(
      objectName: string,
      objectId: string,
      list: Array<ApiGrantAccessRequestV1>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiUpdateAccessResponseV1>
    > {
      const localVarAxiosArgs = await AccessStoreApiAxiosParamCreator(
        configuration
      ).toggleObjectAccess(objectName, objectId, list, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AccessStoreApi - factory interface
 * @export
 */
export const AccessStoreApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary default: TODO: indicate objclass=default as a default rights repo
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {Array<string>} [grantor] --- filters ---  [optional] [FROM] each rule owner is any of role(s) id; user -or- role
     * @param {Array<string>} [grantee] [optional] [TO] subject role(s) id; user -or- role
     * @param {Array<string>} [granted] [xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)
     * @param {string} [q] [optional] [TO] subject.name ILIKE ?q&#x3D;; user -or- role
     * @param {Array<string>} [fields] ----- Select Options -------------------------  attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {number} [size] pagedResultsControl  default: 16
     * @param {number} [page] default: 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDefaultAccess(
      objectName: string,
      objectId: string,
      grantor?: Array<string>,
      grantee?: Array<string>,
      granted?: Array<string>,
      q?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      size?: number,
      page?: number,
      options?: any
    ): AxiosPromise<ApiListAccessResponseV1> {
      return AccessStoreApiFp(configuration)
        .listDefaultAccess(
          objectName,
          objectId,
          grantor,
          grantee,
          granted,
          q,
          fields,
          sort,
          size,
          page,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {Array<string>} [grantor] --- filters ---  [optional] [FROM] each rule owner is any of role(s) id; user -or- role
     * @param {Array<string>} [grantee] [optional] [TO] subject role(s) id; user -or- role
     * @param {Array<string>} [granted] [xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)
     * @param {string} [q] [optional] [TO] subject.name ILIKE ?q&#x3D;; user -or- role
     * @param {Array<string>} [fields] ----- Select Options -------------------------  attributes list
     * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
     * @param {number} [size] pagedResultsControl  default: 16
     * @param {number} [page] default: 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listObjectAccess(
      objectName: string,
      objectId: string,
      grantor?: Array<string>,
      grantee?: Array<string>,
      granted?: Array<string>,
      q?: string,
      fields?: Array<string>,
      sort?: Array<string>,
      size?: number,
      page?: number,
      options?: any
    ): AxiosPromise<ApiListAccessResponseV1> {
      return AccessStoreApiFp(configuration)
        .listObjectAccess(
          objectName,
          objectId,
          grantor,
          grantee,
          granted,
          q,
          fields,
          sort,
          size,
          page,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Same as UpdateAccess except for DEFAULT access control system
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {string} grantor [FOR] creator user/role
     * @param {ApiAccessStoreToggleDefaultAccessBody} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleDefaultAccess(
      objectName: string,
      objectId: string,
      grantor: string,
      body: ApiAccessStoreToggleDefaultAccessBody,
      options?: any
    ): AxiosPromise<ApiToggleDefaultAccessResponse> {
      return AccessStoreApiFp(configuration)
        .toggleDefaultAccess(objectName, objectId, grantor, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string
     * @param {string} objectName display name
     * @param {string} objectId identifier
     * @param {Array<ApiGrantAccessRequestV1>} list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleObjectAccess(
      objectName: string,
      objectId: string,
      list: Array<ApiGrantAccessRequestV1>,
      options?: any
    ): AxiosPromise<ApiUpdateAccessResponseV1> {
      return AccessStoreApiFp(configuration)
        .toggleObjectAccess(objectName, objectId, list, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AccessStoreApi - object-oriented interface
 * @export
 * @class AccessStoreApi
 * @extends {BaseAPI}
 */
export class AccessStoreApi extends BaseAPI {
  /**
   *
   * @summary default: TODO: indicate objclass=default as a default rights repo
   * @param {string} objectName display name
   * @param {string} objectId identifier
   * @param {Array<string>} [grantor] --- filters ---  [optional] [FROM] each rule owner is any of role(s) id; user -or- role
   * @param {Array<string>} [grantee] [optional] [TO] subject role(s) id; user -or- role
   * @param {Array<string>} [granted] [xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)
   * @param {string} [q] [optional] [TO] subject.name ILIKE ?q&#x3D;; user -or- role
   * @param {Array<string>} [fields] ----- Select Options -------------------------  attributes list
   * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
   * @param {number} [size] pagedResultsControl  default: 16
   * @param {number} [page] default: 1
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccessStoreApi
   */
  public listDefaultAccess(
    objectName: string,
    objectId: string,
    grantor?: Array<string>,
    grantee?: Array<string>,
    granted?: Array<string>,
    q?: string,
    fields?: Array<string>,
    sort?: Array<string>,
    size?: number,
    page?: number,
    options?: any
  ) {
    return AccessStoreApiFp(this.configuration)
      .listDefaultAccess(
        objectName,
        objectId,
        grantor,
        grantee,
        granted,
        q,
        fields,
        sort,
        size,
        page,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} objectName display name
   * @param {string} objectId identifier
   * @param {Array<string>} [grantor] --- filters ---  [optional] [FROM] each rule owner is any of role(s) id; user -or- role
   * @param {Array<string>} [grantee] [optional] [TO] subject role(s) id; user -or- role
   * @param {Array<string>} [granted] [xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)
   * @param {string} [q] [optional] [TO] subject.name ILIKE ?q&#x3D;; user -or- role
   * @param {Array<string>} [fields] ----- Select Options -------------------------  attributes list
   * @param {Array<string>} [sort] e.g.: \&quot;updated_at\&quot; - ASC; \&quot;!updated_at\&quot; - DESC;
   * @param {number} [size] pagedResultsControl  default: 16
   * @param {number} [page] default: 1
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccessStoreApi
   */
  public listObjectAccess(
    objectName: string,
    objectId: string,
    grantor?: Array<string>,
    grantee?: Array<string>,
    granted?: Array<string>,
    q?: string,
    fields?: Array<string>,
    sort?: Array<string>,
    size?: number,
    page?: number,
    options?: any
  ) {
    return AccessStoreApiFp(this.configuration)
      .listObjectAccess(
        objectName,
        objectId,
        grantor,
        grantee,
        granted,
        q,
        fields,
        sort,
        size,
        page,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Same as UpdateAccess except for DEFAULT access control system
   * @param {string} objectName display name
   * @param {string} objectId identifier
   * @param {string} grantor [FOR] creator user/role
   * @param {ApiAccessStoreToggleDefaultAccessBody} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccessStoreApi
   */
  public toggleDefaultAccess(
    objectName: string,
    objectId: string,
    grantor: string,
    body: ApiAccessStoreToggleDefaultAccessBody,
    options?: any
  ) {
    return AccessStoreApiFp(this.configuration)
      .toggleDefaultAccess(objectName, objectId, grantor, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string
   * @param {string} objectName display name
   * @param {string} objectId identifier
   * @param {Array<ApiGrantAccessRequestV1>} list
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccessStoreApi
   */
  public toggleObjectAccess(
    objectName: string,
    objectId: string,
    list: Array<ApiGrantAccessRequestV1>,
    options?: any
  ) {
    return AccessStoreApiFp(this.configuration)
      .toggleObjectAccess(objectName, objectId, list, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
