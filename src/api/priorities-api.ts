// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.04.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { CasesInputPriority } from '../api'
// @ts-ignore
import { CasesLocatePriorityResponse } from '../api'
// @ts-ignore
import { CasesPriority } from '../api'
// @ts-ignore
import { CasesPriorityList } from '../api'
// @ts-ignore
import { GooglerpcStatus } from '../api'
/**
 * PrioritiesApi - axios parameter creator
 * @export
 */
export const PrioritiesApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create a new priority
     * @param {CasesInputPriority} input
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPriority: async (
      input: CasesInputPriority,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling createPriority.'
        )
      }
      const localVarPath = `/cases/priorities`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete a priority
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePriority: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deletePriority.'
        )
      }
      const localVarPath = `/cases/priorities/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Retrieve a list of priorities or search priorities
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {string} [notInSla] Filter priorities that are not in filtered SLA
     * @param {string} [inSla] Filter priorities that are in filtered SLA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPriorities: async (
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      notInSla?: string,
      inSla?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cases/priorities`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (notInSla !== undefined) {
        localVarQueryParameter['notInSla'] = notInSla
      }

      if (inSla !== undefined) {
        localVarQueryParameter['inSla'] = inSla
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Locate a priority by ID
     * @param {string} id ID of the priority to be located
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locatePriority: async (
      id: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling locatePriority.'
        )
      }
      const localVarPath = `/cases/priorities/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update an existing priority
     * @param {string} id
     * @param {CasesInputPriority} input
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePriority: async (
      id: string,
      input: CasesInputPriority,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updatePriority.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updatePriority.'
        )
      }
      const localVarPath = `/cases/priorities/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update an existing priority
     * @param {string} id
     * @param {CasesInputPriority} input
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePriority2: async (
      id: string,
      input: CasesInputPriority,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updatePriority2.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updatePriority2.'
        )
      }
      const localVarPath = `/cases/priorities/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PrioritiesApi - functional programming interface
 * @export
 */
export const PrioritiesApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create a new priority
     * @param {CasesInputPriority} input
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPriority(
      input: CasesInputPriority,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesPriority>
    > {
      const localVarAxiosArgs = await PrioritiesApiAxiosParamCreator(
        configuration
      ).createPriority(input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Delete a priority
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePriority(
      id: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesPriority>
    > {
      const localVarAxiosArgs = await PrioritiesApiAxiosParamCreator(
        configuration
      ).deletePriority(id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Retrieve a list of priorities or search priorities
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {string} [notInSla] Filter priorities that are not in filtered SLA
     * @param {string} [inSla] Filter priorities that are in filtered SLA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPriorities(
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      notInSla?: string,
      inSla?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesPriorityList>
    > {
      const localVarAxiosArgs = await PrioritiesApiAxiosParamCreator(
        configuration
      ).listPriorities(
        page,
        size,
        fields,
        sort,
        id,
        q,
        notInSla,
        inSla,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Locate a priority by ID
     * @param {string} id ID of the priority to be located
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async locatePriority(
      id: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CasesLocatePriorityResponse>
    > {
      const localVarAxiosArgs = await PrioritiesApiAxiosParamCreator(
        configuration
      ).locatePriority(id, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update an existing priority
     * @param {string} id
     * @param {CasesInputPriority} input
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePriority(
      id: string,
      input: CasesInputPriority,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesPriority>
    > {
      const localVarAxiosArgs = await PrioritiesApiAxiosParamCreator(
        configuration
      ).updatePriority(id, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update an existing priority
     * @param {string} id
     * @param {CasesInputPriority} input
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePriority2(
      id: string,
      input: CasesInputPriority,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CasesPriority>
    > {
      const localVarAxiosArgs = await PrioritiesApiAxiosParamCreator(
        configuration
      ).updatePriority2(id, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * PrioritiesApi - factory interface
 * @export
 */
export const PrioritiesApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create a new priority
     * @param {CasesInputPriority} input
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPriority(
      input: CasesInputPriority,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesPriority> {
      return PrioritiesApiFp(configuration)
        .createPriority(input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete a priority
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePriority(id: string, options?: any): AxiosPromise<CasesPriority> {
      return PrioritiesApiFp(configuration)
        .deletePriority(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Retrieve a list of priorities or search priorities
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [id] Filter by unique IDs.
     * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
     * @param {string} [notInSla] Filter priorities that are not in filtered SLA
     * @param {string} [inSla] Filter priorities that are in filtered SLA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPriorities(
      page?: number,
      size?: number,
      fields?: Array<string>,
      sort?: Array<string>,
      id?: Array<string>,
      q?: string,
      notInSla?: string,
      inSla?: string,
      options?: any
    ): AxiosPromise<CasesPriorityList> {
      return PrioritiesApiFp(configuration)
        .listPriorities(
          page,
          size,
          fields,
          sort,
          id,
          q,
          notInSla,
          inSla,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Locate a priority by ID
     * @param {string} id ID of the priority to be located
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locatePriority(
      id: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesLocatePriorityResponse> {
      return PrioritiesApiFp(configuration)
        .locatePriority(id, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update an existing priority
     * @param {string} id
     * @param {CasesInputPriority} input
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePriority(
      id: string,
      input: CasesInputPriority,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesPriority> {
      return PrioritiesApiFp(configuration)
        .updatePriority(id, input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update an existing priority
     * @param {string} id
     * @param {CasesInputPriority} input
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePriority2(
      id: string,
      input: CasesInputPriority,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<CasesPriority> {
      return PrioritiesApiFp(configuration)
        .updatePriority2(id, input, fields, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PrioritiesApi - object-oriented interface
 * @export
 * @class PrioritiesApi
 * @extends {BaseAPI}
 */
export class PrioritiesApi extends BaseAPI {
  /**
   *
   * @summary Create a new priority
   * @param {CasesInputPriority} input
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrioritiesApi
   */
  public createPriority(
    input: CasesInputPriority,
    fields?: Array<string>,
    options?: any
  ) {
    return PrioritiesApiFp(this.configuration)
      .createPriority(input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete a priority
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrioritiesApi
   */
  public deletePriority(id: string, options?: any) {
    return PrioritiesApiFp(this.configuration)
      .deletePriority(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Retrieve a list of priorities or search priorities
   * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
   * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {Array<string>} [sort] Sort the result according to fields.
   * @param {Array<string>} [id] Filter by unique IDs.
   * @param {string} [q] Search query string for filtering by name. Supports: - Wildcards (*) for substring matching - Placeholder (?) for single character substitution - Exact match for full names
   * @param {string} [notInSla] Filter priorities that are not in filtered SLA
   * @param {string} [inSla] Filter priorities that are in filtered SLA
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrioritiesApi
   */
  public listPriorities(
    page?: number,
    size?: number,
    fields?: Array<string>,
    sort?: Array<string>,
    id?: Array<string>,
    q?: string,
    notInSla?: string,
    inSla?: string,
    options?: any
  ) {
    return PrioritiesApiFp(this.configuration)
      .listPriorities(page, size, fields, sort, id, q, notInSla, inSla, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Locate a priority by ID
   * @param {string} id ID of the priority to be located
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrioritiesApi
   */
  public locatePriority(id: string, fields?: Array<string>, options?: any) {
    return PrioritiesApiFp(this.configuration)
      .locatePriority(id, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update an existing priority
   * @param {string} id
   * @param {CasesInputPriority} input
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrioritiesApi
   */
  public updatePriority(
    id: string,
    input: CasesInputPriority,
    fields?: Array<string>,
    options?: any
  ) {
    return PrioritiesApiFp(this.configuration)
      .updatePriority(id, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update an existing priority
   * @param {string} id
   * @param {CasesInputPriority} input
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrioritiesApi
   */
  public updatePriority2(
    id: string,
    input: CasesInputPriority,
    fields?: Array<string>,
    options?: any
  ) {
    return PrioritiesApiFp(this.configuration)
      .updatePriority2(id, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
