// tslint:disable
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20.12.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { EngineCreateRoutingOutboundCallRequest } from '../api'
// @ts-ignore
import { EngineListRoutingOutboundCall } from '../api'
// @ts-ignore
import { EngineMovePositionRoutingOutboundCallRequest } from '../api'
// @ts-ignore
import { EngineMovePositionRoutingOutboundCallResponse } from '../api'
// @ts-ignore
import { EnginePatchRoutingOutboundCallRequest } from '../api'
// @ts-ignore
import { EngineRoutingOutboundCall } from '../api'
// @ts-ignore
import { EngineUpdateRoutingOutboundCallRequest } from '../api'
// @ts-ignore
import { RuntimeError } from '../api'
/**
 * RoutingOutboundCallServiceApi - axios parameter creator
 * @export
 */
export const RoutingOutboundCallServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceCreateRoutingOutboundCall: async (
      body: EngineCreateRoutingOutboundCallRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling routingOutboundCallServiceCreateRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceDeleteRoutingOutboundCall: async (
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling routingOutboundCallServiceDeleteRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Move RoutingOutboundCall
     * @param {string} fromId
     * @param {string} toId
     * @param {EngineMovePositionRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceMovePositionRoutingOutboundCall: async (
      fromId: string,
      toId: string,
      body: EngineMovePositionRoutingOutboundCallRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fromId' is not null or undefined
      if (fromId === null || fromId === undefined) {
        throw new RequiredError(
          'fromId',
          'Required parameter fromId was null or undefined when calling routingOutboundCallServiceMovePositionRoutingOutboundCall.'
        )
      }
      // verify required parameter 'toId' is not null or undefined
      if (toId === null || toId === undefined) {
        throw new RequiredError(
          'toId',
          'Required parameter toId was null or undefined when calling routingOutboundCallServiceMovePositionRoutingOutboundCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling routingOutboundCallServiceMovePositionRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{from_id}/to/{to_id}`
        .replace(`{${'from_id'}}`, encodeURIComponent(String(fromId)))
        .replace(`{${'to_id'}}`, encodeURIComponent(String(toId)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Patch RoutingOutboundCall
     * @param {string} id
     * @param {EnginePatchRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServicePatchRoutingOutboundCall: async (
      id: string,
      body: EnginePatchRoutingOutboundCallRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling routingOutboundCallServicePatchRoutingOutboundCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling routingOutboundCallServicePatchRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceReadRoutingOutboundCall: async (
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling routingOutboundCallServiceReadRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {Array<number>} [schemaId]
     * @param {string} [pattern]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceSearchRoutingOutboundCall: async (
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      name?: string,
      schemaId?: Array<number>,
      pattern?: string,
      description?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/routing/outbound/calls`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      if (schemaId) {
        localVarQueryParameter['schema_id'] = schemaId
      }

      if (pattern !== undefined) {
        localVarQueryParameter['pattern'] = pattern
      }

      if (description !== undefined) {
        localVarQueryParameter['description'] = description
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceUpdateRoutingOutboundCall: async (
      id: string,
      body: EngineUpdateRoutingOutboundCallRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling routingOutboundCallServiceUpdateRoutingOutboundCall.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling routingOutboundCallServiceUpdateRoutingOutboundCall.'
        )
      }
      const localVarPath = `/routing/outbound/calls/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RoutingOutboundCallServiceApi - functional programming interface
 * @export
 */
export const RoutingOutboundCallServiceApiFp = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routingOutboundCallServiceCreateRoutingOutboundCall(
      body: EngineCreateRoutingOutboundCallRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineRoutingOutboundCall>
    > {
      const localVarAxiosArgs = await RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).routingOutboundCallServiceCreateRoutingOutboundCall(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routingOutboundCallServiceDeleteRoutingOutboundCall(
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineRoutingOutboundCall>
    > {
      const localVarAxiosArgs = await RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).routingOutboundCallServiceDeleteRoutingOutboundCall(
        id,
        domainId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Move RoutingOutboundCall
     * @param {string} fromId
     * @param {string} toId
     * @param {EngineMovePositionRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routingOutboundCallServiceMovePositionRoutingOutboundCall(
      fromId: string,
      toId: string,
      body: EngineMovePositionRoutingOutboundCallRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineMovePositionRoutingOutboundCallResponse>
    > {
      const localVarAxiosArgs = await RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).routingOutboundCallServiceMovePositionRoutingOutboundCall(
        fromId,
        toId,
        body,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Patch RoutingOutboundCall
     * @param {string} id
     * @param {EnginePatchRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routingOutboundCallServicePatchRoutingOutboundCall(
      id: string,
      body: EnginePatchRoutingOutboundCallRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineRoutingOutboundCall>
    > {
      const localVarAxiosArgs = await RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).routingOutboundCallServicePatchRoutingOutboundCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routingOutboundCallServiceReadRoutingOutboundCall(
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineRoutingOutboundCall>
    > {
      const localVarAxiosArgs = await RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).routingOutboundCallServiceReadRoutingOutboundCall(id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {Array<number>} [schemaId]
     * @param {string} [pattern]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routingOutboundCallServiceSearchRoutingOutboundCall(
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      name?: string,
      schemaId?: Array<number>,
      pattern?: string,
      description?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListRoutingOutboundCall>
    > {
      const localVarAxiosArgs = await RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).routingOutboundCallServiceSearchRoutingOutboundCall(
        page,
        size,
        q,
        sort,
        fields,
        id,
        name,
        schemaId,
        pattern,
        description,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routingOutboundCallServiceUpdateRoutingOutboundCall(
      id: string,
      body: EngineUpdateRoutingOutboundCallRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineRoutingOutboundCall>
    > {
      const localVarAxiosArgs = await RoutingOutboundCallServiceApiAxiosParamCreator(
        configuration
      ).routingOutboundCallServiceUpdateRoutingOutboundCall(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * RoutingOutboundCallServiceApi - factory interface
 * @export
 */
export const RoutingOutboundCallServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceCreateRoutingOutboundCall(
      body: EngineCreateRoutingOutboundCallRequest,
      options?: any
    ): AxiosPromise<EngineRoutingOutboundCall> {
      return RoutingOutboundCallServiceApiFp(configuration)
        .routingOutboundCallServiceCreateRoutingOutboundCall(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceDeleteRoutingOutboundCall(
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineRoutingOutboundCall> {
      return RoutingOutboundCallServiceApiFp(configuration)
        .routingOutboundCallServiceDeleteRoutingOutboundCall(
          id,
          domainId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Move RoutingOutboundCall
     * @param {string} fromId
     * @param {string} toId
     * @param {EngineMovePositionRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceMovePositionRoutingOutboundCall(
      fromId: string,
      toId: string,
      body: EngineMovePositionRoutingOutboundCallRequest,
      options?: any
    ): AxiosPromise<EngineMovePositionRoutingOutboundCallResponse> {
      return RoutingOutboundCallServiceApiFp(configuration)
        .routingOutboundCallServiceMovePositionRoutingOutboundCall(
          fromId,
          toId,
          body,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Patch RoutingOutboundCall
     * @param {string} id
     * @param {EnginePatchRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServicePatchRoutingOutboundCall(
      id: string,
      body: EnginePatchRoutingOutboundCallRequest,
      options?: any
    ): AxiosPromise<EngineRoutingOutboundCall> {
      return RoutingOutboundCallServiceApiFp(configuration)
        .routingOutboundCallServicePatchRoutingOutboundCall(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceReadRoutingOutboundCall(
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineRoutingOutboundCall> {
      return RoutingOutboundCallServiceApiFp(configuration)
        .routingOutboundCallServiceReadRoutingOutboundCall(
          id,
          domainId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {Array<number>} [schemaId]
     * @param {string} [pattern]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceSearchRoutingOutboundCall(
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<number>,
      name?: string,
      schemaId?: Array<number>,
      pattern?: string,
      description?: string,
      options?: any
    ): AxiosPromise<EngineListRoutingOutboundCall> {
      return RoutingOutboundCallServiceApiFp(configuration)
        .routingOutboundCallServiceSearchRoutingOutboundCall(
          page,
          size,
          q,
          sort,
          fields,
          id,
          name,
          schemaId,
          pattern,
          description,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routingOutboundCallServiceUpdateRoutingOutboundCall(
      id: string,
      body: EngineUpdateRoutingOutboundCallRequest,
      options?: any
    ): AxiosPromise<EngineRoutingOutboundCall> {
      return RoutingOutboundCallServiceApiFp(configuration)
        .routingOutboundCallServiceUpdateRoutingOutboundCall(id, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * RoutingOutboundCallServiceApi - object-oriented interface
 * @export
 * @class RoutingOutboundCallServiceApi
 * @extends {BaseAPI}
 */
export class RoutingOutboundCallServiceApi extends BaseAPI {
  /**
   *
   * @summary Create RoutingOutboundCall
   * @param {EngineCreateRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public routingOutboundCallServiceCreateRoutingOutboundCall(
    body: EngineCreateRoutingOutboundCallRequest,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(this.configuration)
      .routingOutboundCallServiceCreateRoutingOutboundCall(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove RoutingOutboundCall
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public routingOutboundCallServiceDeleteRoutingOutboundCall(
    id: string,
    domainId?: string,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(this.configuration)
      .routingOutboundCallServiceDeleteRoutingOutboundCall(
        id,
        domainId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Move RoutingOutboundCall
   * @param {string} fromId
   * @param {string} toId
   * @param {EngineMovePositionRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public routingOutboundCallServiceMovePositionRoutingOutboundCall(
    fromId: string,
    toId: string,
    body: EngineMovePositionRoutingOutboundCallRequest,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(this.configuration)
      .routingOutboundCallServiceMovePositionRoutingOutboundCall(
        fromId,
        toId,
        body,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Patch RoutingOutboundCall
   * @param {string} id
   * @param {EnginePatchRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public routingOutboundCallServicePatchRoutingOutboundCall(
    id: string,
    body: EnginePatchRoutingOutboundCallRequest,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(this.configuration)
      .routingOutboundCallServicePatchRoutingOutboundCall(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary RoutingOutboundCall item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public routingOutboundCallServiceReadRoutingOutboundCall(
    id: string,
    domainId?: string,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(this.configuration)
      .routingOutboundCallServiceReadRoutingOutboundCall(id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List of RoutingOutboundCall
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {Array<number>} [id]
   * @param {string} [name]
   * @param {Array<number>} [schemaId]
   * @param {string} [pattern]
   * @param {string} [description]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public routingOutboundCallServiceSearchRoutingOutboundCall(
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    id?: Array<number>,
    name?: string,
    schemaId?: Array<number>,
    pattern?: string,
    description?: string,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(this.configuration)
      .routingOutboundCallServiceSearchRoutingOutboundCall(
        page,
        size,
        q,
        sort,
        fields,
        id,
        name,
        schemaId,
        pattern,
        description,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update RoutingOutboundCall
   * @param {string} id
   * @param {EngineUpdateRoutingOutboundCallRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoutingOutboundCallServiceApi
   */
  public routingOutboundCallServiceUpdateRoutingOutboundCall(
    id: string,
    body: EngineUpdateRoutingOutboundCallRequest,
    options?: any
  ) {
    return RoutingOutboundCallServiceApiFp(this.configuration)
      .routingOutboundCallServiceUpdateRoutingOutboundCall(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
