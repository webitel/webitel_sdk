// tslint:disable
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.07.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { NEWVariableUpdate } from '../api'
// @ts-ignore
import { NEWVariableUpdate1 } from '../api'
// @ts-ignore
import { WebitelContactsInputVariable } from '../api'
// @ts-ignore
import { WebitelContactsVariable } from '../api'
// @ts-ignore
import { WebitelContactsVariableList } from '../api'
/**
 * VariablesApi - axios parameter creator
 * @export
 */
export const VariablesApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Remove the contact\'s variable by etag
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariable: async (
      contactId: string,
      etag: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling deleteVariable.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling deleteVariable.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/variables/{etag}`
        .replace(`{${'contact_id'}}`, encodeURIComponent(String(contactId)))
        .replace(`{${'etag'}}`, encodeURIComponent(String(etag)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove variable(s) of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariables: async (
      contactId: string,
      etag: Array<string>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling deleteVariables.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling deleteVariables.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/variables`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (etag) {
        localVarQueryParameter['etag'] = etag
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size of result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: variable key; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [id] Record(s) with unique ID only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVariables: async (
      contactId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: Array<string>,
      fields?: Array<string>,
      id?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling listVariables.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/variables`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update or append variables to the contact
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact and listed here will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeVariables: async (
      contactId: string,
      input: Array<WebitelContactsInputVariable>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling mergeVariables.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling mergeVariables.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/variables`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Reset all variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact but not listed here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetVariables: async (
      contactId: string,
      input: Array<WebitelContactsInputVariable>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling resetVariables.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling resetVariables.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/variables`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariable: async (
      contactId: string,
      etag: string,
      input: NEWVariableUpdate,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling updateVariable.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling updateVariable.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateVariable.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/variables/{etag}`
        .replace(`{${'contact_id'}}`, encodeURIComponent(String(contactId)))
        .replace(`{${'etag'}}`, encodeURIComponent(String(etag)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariable2: async (
      contactId: string,
      etag: string,
      input: NEWVariableUpdate1,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling updateVariable2.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling updateVariable2.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling updateVariable2.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/variables/{etag}`
        .replace(`{${'contact_id'}}`, encodeURIComponent(String(contactId)))
        .replace(`{${'etag'}}`, encodeURIComponent(String(etag)))
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * VariablesApi - functional programming interface
 * @export
 */
export const VariablesApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Remove the contact\'s variable by etag
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVariable(
      contactId: string,
      etag: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsVariable>
    > {
      const localVarAxiosArgs = await VariablesApiAxiosParamCreator(
        configuration
      ).deleteVariable(contactId, etag, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove variable(s) of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVariables(
      contactId: string,
      etag: Array<string>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsVariableList>
    > {
      const localVarAxiosArgs = await VariablesApiAxiosParamCreator(
        configuration
      ).deleteVariables(contactId, etag, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size of result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: variable key; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [id] Record(s) with unique ID only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listVariables(
      contactId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: Array<string>,
      fields?: Array<string>,
      id?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsVariableList>
    > {
      const localVarAxiosArgs = await VariablesApiAxiosParamCreator(
        configuration
      ).listVariables(contactId, page, size, q, sort, fields, id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update or append variables to the contact
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact and listed here will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mergeVariables(
      contactId: string,
      input: Array<WebitelContactsInputVariable>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsVariableList>
    > {
      const localVarAxiosArgs = await VariablesApiAxiosParamCreator(
        configuration
      ).mergeVariables(contactId, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Reset all variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact but not listed here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetVariables(
      contactId: string,
      input: Array<WebitelContactsInputVariable>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsVariableList>
    > {
      const localVarAxiosArgs = await VariablesApiAxiosParamCreator(
        configuration
      ).resetVariables(contactId, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateVariable(
      contactId: string,
      etag: string,
      input: NEWVariableUpdate,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsVariableList>
    > {
      const localVarAxiosArgs = await VariablesApiAxiosParamCreator(
        configuration
      ).updateVariable(contactId, etag, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateVariable2(
      contactId: string,
      etag: string,
      input: NEWVariableUpdate1,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsVariableList>
    > {
      const localVarAxiosArgs = await VariablesApiAxiosParamCreator(
        configuration
      ).updateVariable2(contactId, etag, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * VariablesApi - factory interface
 * @export
 */
export const VariablesApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Remove the contact\'s variable by etag
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariable(
      contactId: string,
      etag: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsVariable> {
      return VariablesApiFp(configuration)
        .deleteVariable(contactId, etag, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove variable(s) of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariables(
      contactId: string,
      etag: Array<string>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsVariableList> {
      return VariablesApiFp(configuration)
        .deleteVariables(contactId, etag, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size of result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: variable key; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [id] Record(s) with unique ID only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVariables(
      contactId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: Array<string>,
      fields?: Array<string>,
      id?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsVariableList> {
      return VariablesApiFp(configuration)
        .listVariables(contactId, page, size, q, sort, fields, id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update or append variables to the contact
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact and listed here will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeVariables(
      contactId: string,
      input: Array<WebitelContactsInputVariable>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsVariableList> {
      return VariablesApiFp(configuration)
        .mergeVariables(contactId, input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Reset all variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact but not listed here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetVariables(
      contactId: string,
      input: Array<WebitelContactsInputVariable>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsVariableList> {
      return VariablesApiFp(configuration)
        .resetVariables(contactId, input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariable(
      contactId: string,
      etag: string,
      input: NEWVariableUpdate,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsVariableList> {
      return VariablesApiFp(configuration)
        .updateVariable(contactId, etag, input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariable2(
      contactId: string,
      etag: string,
      input: NEWVariableUpdate1,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsVariableList> {
      return VariablesApiFp(configuration)
        .updateVariable2(contactId, etag, input, fields, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * VariablesApi - object-oriented interface
 * @export
 * @class VariablesApi
 * @extends {BaseAPI}
 */
export class VariablesApi extends BaseAPI {
  /**
   *
   * @summary Remove the contact\'s variable by etag
   * @param {string} contactId Contact ID associated with.
   * @param {string} etag Unique ID to remove.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariablesApi
   */
  public deleteVariable(
    contactId: string,
    etag: string,
    fields?: Array<string>,
    options?: any
  ) {
    return VariablesApiFp(this.configuration)
      .deleteVariable(contactId, etag, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove variable(s) of the contact
   * @param {string} contactId Contact ID associated with.
   * @param {Array<string>} etag Set of unique ID(s) to remove.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariablesApi
   */
  public deleteVariables(
    contactId: string,
    etag: Array<string>,
    fields?: Array<string>,
    options?: any
  ) {
    return VariablesApiFp(this.configuration)
      .deleteVariables(contactId, etag, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List variables of the contact
   * @param {string} contactId Contact ID associated with.
   * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
   * @param {number} [size] Size of result page. limit &#x3D; (size++)
   * @param {string} [q] Search term: variable key; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
   * @param {Array<string>} [sort] Sort the result according to fields.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {Array<string>} [id] Record(s) with unique ID only.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariablesApi
   */
  public listVariables(
    contactId: string,
    page?: number,
    size?: number,
    q?: string,
    sort?: Array<string>,
    fields?: Array<string>,
    id?: Array<string>,
    options?: any
  ) {
    return VariablesApiFp(this.configuration)
      .listVariables(contactId, page, size, q, sort, fields, id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update or append variables to the contact
   * @param {string} contactId Link contact ID.
   * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact and listed here will be updated.
   * @param {Array<string>} [fields] Fields to be retrieved as a result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariablesApi
   */
  public mergeVariables(
    contactId: string,
    input: Array<WebitelContactsInputVariable>,
    fields?: Array<string>,
    options?: any
  ) {
    return VariablesApiFp(this.configuration)
      .mergeVariables(contactId, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Reset all variables of the contact
   * @param {string} contactId Contact ID associated with.
   * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact but not listed here will be removed.
   * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariablesApi
   */
  public resetVariables(
    contactId: string,
    input: Array<WebitelContactsInputVariable>,
    fields?: Array<string>,
    options?: any
  ) {
    return VariablesApiFp(this.configuration)
      .resetVariables(contactId, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update contact variable
   * @param {string} contactId Contact ID associated with.
   * @param {string} etag Unique ID of the latest version of an existing resorce.
   * @param {NEWVariableUpdate} input
   * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariablesApi
   */
  public updateVariable(
    contactId: string,
    etag: string,
    input: NEWVariableUpdate,
    fields?: Array<string>,
    options?: any
  ) {
    return VariablesApiFp(this.configuration)
      .updateVariable(contactId, etag, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update contact variable
   * @param {string} contactId Contact ID associated with.
   * @param {string} etag Unique ID of the latest version of an existing resorce.
   * @param {NEWVariableUpdate1} input
   * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariablesApi
   */
  public updateVariable2(
    contactId: string,
    etag: string,
    input: NEWVariableUpdate1,
    fields?: Array<string>,
    options?: any
  ) {
    return VariablesApiFp(this.configuration)
      .updateVariable2(contactId, etag, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
