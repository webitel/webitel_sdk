// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.09.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { EngineBroadcastRequest } from '../api'
// @ts-ignore
import { RuntimeError } from '../api'
/**
 * ChatHelperServiceApi - axios parameter creator
 * @export
 */
export const ChatHelperServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} profileId
     * @param {EngineBroadcastRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcast: async (
      profileId: string,
      body: EngineBroadcastRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'profileId' is not null or undefined
      if (profileId === null || profileId === undefined) {
        throw new RequiredError(
          'profileId',
          'Required parameter profileId was null or undefined when calling broadcast.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling broadcast.'
        )
      }
      const localVarPath = `/chat/bots/{profile_id}/broadcast`.replace(
        `{${'profile_id'}}`,
        encodeURIComponent(String(profileId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ChatHelperServiceApi - functional programming interface
 * @export
 */
export const ChatHelperServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} profileId
     * @param {EngineBroadcastRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async broadcast(
      profileId: string,
      body: EngineBroadcastRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await ChatHelperServiceApiAxiosParamCreator(
        configuration
      ).broadcast(profileId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * ChatHelperServiceApi - factory interface
 * @export
 */
export const ChatHelperServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {string} profileId
     * @param {EngineBroadcastRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcast(
      profileId: string,
      body: EngineBroadcastRequest,
      options?: any
    ): AxiosPromise<object> {
      return ChatHelperServiceApiFp(configuration)
        .broadcast(profileId, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ChatHelperServiceApi - object-oriented interface
 * @export
 * @class ChatHelperServiceApi
 * @extends {BaseAPI}
 */
export class ChatHelperServiceApi extends BaseAPI {
  /**
   *
   * @param {string} profileId
   * @param {EngineBroadcastRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatHelperServiceApi
   */
  public broadcast(
    profileId: string,
    body: EngineBroadcastRequest,
    options?: any
  ) {
    return ChatHelperServiceApiFp(this.configuration)
      .broadcast(profileId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
