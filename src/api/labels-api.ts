// tslint:disable
/**
 * Webitel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.07.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { WebitelContactsInputLabel } from '../api'
// @ts-ignore
import { WebitelContactsLabelList } from '../api'
// @ts-ignore
import { WebitelContactsLabelTags } from '../api'
/**
 * LabelsApi - axios parameter creator
 * @export
 */
export const LabelsApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Remove Contact Labels associations.
     * @param {string} contactId Link contact ID.
     * @param {Array<string>} etag Set of unique label(s).etag identifiers.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLabels: async (
      contactId: string,
      etag: Array<string>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling deleteLabels.'
        )
      }
      // verify required parameter 'etag' is not null or undefined
      if (etag === null || etag === undefined) {
        throw new RequiredError(
          'etag',
          'Required parameter etag was null or undefined when calling deleteLabels.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/labels`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (etag) {
        localVarQueryParameter['etag'] = etag
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Search for Contacts engaged Label(s).
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLabels: async (
      page?: number,
      size?: number,
      q?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/contacts/labels`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Locate the Contact\'s associated Label(s).
     * @param {string} contactId Link contact ID.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label tag. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {Array<string>} [id] Record(s) with unique ID or ETag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLabels: async (
      contactId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: Array<string>,
      fields?: Array<string>,
      id?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling listLabels.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/labels`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Associate NEW Labels to the Contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Fixed set of label(s) to be linked with the contact. Label(s) that conflicts with already linked will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeLabels: async (
      contactId: string,
      input: Array<WebitelContactsInputLabel>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling mergeLabels.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling mergeLabels.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/labels`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Reset Labels to fit the specified final set.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Final set of labels(s) to be linked with the contact. Label(s) that are already linked with the contact but not given in here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetLabels: async (
      contactId: string,
      input: Array<WebitelContactsInputLabel>,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      if (contactId === null || contactId === undefined) {
        throw new RequiredError(
          'contactId',
          'Required parameter contactId was null or undefined when calling resetLabels.'
        )
      }
      // verify required parameter 'input' is not null or undefined
      if (input === null || input === undefined) {
        throw new RequiredError(
          'input',
          'Required parameter input was null or undefined when calling resetLabels.'
        )
      }
      const localVarPath = `/contacts/{contact_id}/labels`.replace(
        `{${'contact_id'}}`,
        encodeURIComponent(String(contactId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof input !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : input || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LabelsApi - functional programming interface
 * @export
 */
export const LabelsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Remove Contact Labels associations.
     * @param {string} contactId Link contact ID.
     * @param {Array<string>} etag Set of unique label(s).etag identifiers.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteLabels(
      contactId: string,
      etag: Array<string>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsLabelList>
    > {
      const localVarAxiosArgs = await LabelsApiAxiosParamCreator(
        configuration
      ).deleteLabels(contactId, etag, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Search for Contacts engaged Label(s).
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLabels(
      page?: number,
      size?: number,
      q?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsLabelTags>
    > {
      const localVarAxiosArgs = await LabelsApiAxiosParamCreator(
        configuration
      ).getLabels(page, size, q, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Locate the Contact\'s associated Label(s).
     * @param {string} contactId Link contact ID.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label tag. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {Array<string>} [id] Record(s) with unique ID or ETag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listLabels(
      contactId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: Array<string>,
      fields?: Array<string>,
      id?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsLabelList>
    > {
      const localVarAxiosArgs = await LabelsApiAxiosParamCreator(
        configuration
      ).listLabels(contactId, page, size, q, sort, fields, id, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Associate NEW Labels to the Contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Fixed set of label(s) to be linked with the contact. Label(s) that conflicts with already linked will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mergeLabels(
      contactId: string,
      input: Array<WebitelContactsInputLabel>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsLabelList>
    > {
      const localVarAxiosArgs = await LabelsApiAxiosParamCreator(
        configuration
      ).mergeLabels(contactId, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Reset Labels to fit the specified final set.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Final set of labels(s) to be linked with the contact. Label(s) that are already linked with the contact but not given in here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetLabels(
      contactId: string,
      input: Array<WebitelContactsInputLabel>,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<WebitelContactsLabelList>
    > {
      const localVarAxiosArgs = await LabelsApiAxiosParamCreator(
        configuration
      ).resetLabels(contactId, input, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * LabelsApi - factory interface
 * @export
 */
export const LabelsApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Remove Contact Labels associations.
     * @param {string} contactId Link contact ID.
     * @param {Array<string>} etag Set of unique label(s).etag identifiers.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLabels(
      contactId: string,
      etag: Array<string>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsLabelList> {
      return LabelsApiFp(configuration)
        .deleteLabels(contactId, etag, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Search for Contacts engaged Label(s).
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLabels(
      page?: number,
      size?: number,
      q?: string,
      options?: any
    ): AxiosPromise<WebitelContactsLabelTags> {
      return LabelsApiFp(configuration)
        .getLabels(page, size, q, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Locate the Contact\'s associated Label(s).
     * @param {string} contactId Link contact ID.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label tag. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {Array<string>} [id] Record(s) with unique ID or ETag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLabels(
      contactId: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: Array<string>,
      fields?: Array<string>,
      id?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsLabelList> {
      return LabelsApiFp(configuration)
        .listLabels(contactId, page, size, q, sort, fields, id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Associate NEW Labels to the Contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Fixed set of label(s) to be linked with the contact. Label(s) that conflicts with already linked will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeLabels(
      contactId: string,
      input: Array<WebitelContactsInputLabel>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsLabelList> {
      return LabelsApiFp(configuration)
        .mergeLabels(contactId, input, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Reset Labels to fit the specified final set.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Final set of labels(s) to be linked with the contact. Label(s) that are already linked with the contact but not given in here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetLabels(
      contactId: string,
      input: Array<WebitelContactsInputLabel>,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<WebitelContactsLabelList> {
      return LabelsApiFp(configuration)
        .resetLabels(contactId, input, fields, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * LabelsApi - object-oriented interface
 * @export
 * @class LabelsApi
 * @extends {BaseAPI}
 */
export class LabelsApi extends BaseAPI {
  /**
   *
   * @summary Remove Contact Labels associations.
   * @param {string} contactId Link contact ID.
   * @param {Array<string>} etag Set of unique label(s).etag identifiers.
   * @param {Array<string>} [fields] Fields to be retrieved into result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public deleteLabels(
    contactId: string,
    etag: Array<string>,
    fields?: Array<string>,
    options?: any
  ) {
    return LabelsApiFp(this.configuration)
      .deleteLabels(contactId, etag, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Search for Contacts engaged Label(s).
   * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
   * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
   * @param {string} [q] Search term: label. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public getLabels(page?: number, size?: number, q?: string, options?: any) {
    return LabelsApiFp(this.configuration)
      .getLabels(page, size, q, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Locate the Contact\'s associated Label(s).
   * @param {string} contactId Link contact ID.
   * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
   * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
   * @param {string} [q] Search term: label tag. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
   * @param {Array<string>} [sort] Sort the result according to fields.
   * @param {Array<string>} [fields] Fields to be retrieved into result.
   * @param {Array<string>} [id] Record(s) with unique ID or ETag.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public listLabels(
    contactId: string,
    page?: number,
    size?: number,
    q?: string,
    sort?: Array<string>,
    fields?: Array<string>,
    id?: Array<string>,
    options?: any
  ) {
    return LabelsApiFp(this.configuration)
      .listLabels(contactId, page, size, q, sort, fields, id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Associate NEW Labels to the Contact.
   * @param {string} contactId Link contact ID.
   * @param {Array<WebitelContactsInputLabel>} input Fixed set of label(s) to be linked with the contact. Label(s) that conflicts with already linked will be updated.
   * @param {Array<string>} [fields] Fields to be retrieved into result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public mergeLabels(
    contactId: string,
    input: Array<WebitelContactsInputLabel>,
    fields?: Array<string>,
    options?: any
  ) {
    return LabelsApiFp(this.configuration)
      .mergeLabels(contactId, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Reset Labels to fit the specified final set.
   * @param {string} contactId Link contact ID.
   * @param {Array<WebitelContactsInputLabel>} input Final set of labels(s) to be linked with the contact. Label(s) that are already linked with the contact but not given in here will be removed.
   * @param {Array<string>} [fields] Fields to be retrieved into result.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LabelsApi
   */
  public resetLabels(
    contactId: string,
    input: Array<WebitelContactsInputLabel>,
    fields?: Array<string>,
    options?: any
  ) {
    return LabelsApiFp(this.configuration)
      .resetLabels(contactId, input, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
