// tslint:disable
/**
 * Webitel engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.07.0
 * Contact: support@webitel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base'
// @ts-ignore
import { EngineAgent } from '../api'
// @ts-ignore
import { EngineAgentCallStatisticsList } from '../api'
// @ts-ignore
import { EngineAgentInQueueStatisticsList } from '../api'
// @ts-ignore
import { EngineAgentSetStateRequest } from '../api'
// @ts-ignore
import { EngineAgentStatusRequest } from '../api'
// @ts-ignore
import { EngineAgentStatusStatisticItem } from '../api'
// @ts-ignore
import { EngineAgentTodayStatisticsResponse } from '../api'
// @ts-ignore
import { EngineCreateAgentRequest } from '../api'
// @ts-ignore
import { EngineForAgentPauseCauseList } from '../api'
// @ts-ignore
import { EngineListAgent } from '../api'
// @ts-ignore
import { EngineListAgentInQueue } from '../api'
// @ts-ignore
import { EngineListAgentInTeam } from '../api'
// @ts-ignore
import { EngineListAgentStateHistory } from '../api'
// @ts-ignore
import { EngineListAgentStatsStatistic } from '../api'
// @ts-ignore
import { EngineListAgentUser } from '../api'
// @ts-ignore
import { EnginePatchAgentRequest } from '../api'
// @ts-ignore
import { EngineResponse } from '../api'
// @ts-ignore
import { EngineUpdateAgentRequest } from '../api'
// @ts-ignore
import { RuntimeError } from '../api'
/**
 * AgentServiceApi - axios parameter creator
 * @export
 */
export const AgentServiceApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} agentId
     * @param {EngineAgentSetStateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentSetState: async (
      agentId: number,
      body: EngineAgentSetStateRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling agentSetState.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling agentSetState.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/states/waiting`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agentId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentStateHistory: async (
      agentId: string,
      page?: number,
      size?: number,
      timeFrom?: string,
      timeTo?: string,
      q?: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling agentStateHistory.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/states/history`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agentId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (timeFrom !== undefined) {
        localVarQueryParameter['time_from'] = timeFrom
      }

      if (timeTo !== undefined) {
        localVarQueryParameter['time_to'] = timeTo
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentTodayStatistics: async (
      agentId: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling agentTodayStatistics.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/statistics/today`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agentId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent: async (
      body: EngineCreateAgentRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling createAgent.'
        )
      }
      const localVarPath = `/call_center/agents`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent: async (
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling deleteAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EnginePatchAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgent: async (
      id: string,
      body: EnginePatchAgentRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patchAgent.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patchAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent: async (
      id: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling readAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List of Agent
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [allowChannels]
     * @param {Array<number>} [supervisorId]
     * @param {Array<number>} [teamId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [auditorId]
     * @param {boolean} [isSupervisor]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [queueId]
     * @param {boolean} [notSupervisor]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [extension]
     * @param {Array<number>} [notTeamId]
     * @param {Array<number>} [notSkillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent: async (
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<string>,
      allowChannels?: Array<string>,
      supervisorId?: Array<number>,
      teamId?: Array<number>,
      regionId?: Array<number>,
      auditorId?: Array<number>,
      isSupervisor?: boolean,
      skillId?: Array<number>,
      queueId?: Array<number>,
      notSupervisor?: boolean,
      userId?: Array<string>,
      extension?: Array<string>,
      notTeamId?: Array<number>,
      notSkillId?: Array<number>,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/call_center/agents`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (id) {
        localVarQueryParameter['id'] = id
      }

      if (allowChannels) {
        localVarQueryParameter['allow_channels'] = allowChannels
      }

      if (supervisorId) {
        localVarQueryParameter['supervisor_id'] = supervisorId
      }

      if (teamId) {
        localVarQueryParameter['team_id'] = teamId
      }

      if (regionId) {
        localVarQueryParameter['region_id'] = regionId
      }

      if (auditorId) {
        localVarQueryParameter['auditor_id'] = auditorId
      }

      if (isSupervisor !== undefined) {
        localVarQueryParameter['is_supervisor'] = isSupervisor
      }

      if (skillId) {
        localVarQueryParameter['skill_id'] = skillId
      }

      if (queueId) {
        localVarQueryParameter['queue_id'] = queueId
      }

      if (notSupervisor !== undefined) {
        localVarQueryParameter['not_supervisor'] = notSupervisor
      }

      if (userId) {
        localVarQueryParameter['user_id'] = userId
      }

      if (extension) {
        localVarQueryParameter['extension'] = extension
      }

      if (notTeamId) {
        localVarQueryParameter['not_team_id'] = notTeamId
      }

      if (notSkillId) {
        localVarQueryParameter['not_skill_id'] = notSkillId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<number>} [agentId]
     * @param {string} [domainId]
     * @param {string} [q]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentCallStatistics: async (
      page?: number,
      size?: number,
      timeFrom?: string,
      timeTo?: string,
      agentId?: Array<number>,
      domainId?: string,
      q?: string,
      fields?: Array<string>,
      sort?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/call_center/agents/reports/call`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (timeFrom !== undefined) {
        localVarQueryParameter['time.from'] = timeFrom
      }

      if (timeTo !== undefined) {
        localVarQueryParameter['time.to'] = timeTo
      }

      if (agentId) {
        localVarQueryParameter['agent_id'] = agentId
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueue: async (
      id: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling searchAgentInQueue.'
        )
      }
      const localVarPath = `/call_center/agents/{id}/queues`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueueStatistics: async (
      agentId: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling searchAgentInQueueStatistics.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/statistics/queues`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agentId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary todo deprecated ?
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInTeam: async (
      id: string,
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling searchAgentInTeam.'
        )
      }
      const localVarPath = `/call_center/agents/{id}/teams`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [agentId]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {string} [fromId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStateHistory: async (
      page?: number,
      size?: number,
      joinedAtFrom?: string,
      joinedAtTo?: string,
      agentId?: Array<string>,
      sort?: string,
      domainId?: string,
      fromId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/call_center/agents/states/history`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (joinedAtFrom !== undefined) {
        localVarQueryParameter['joined_at.from'] = joinedAtFrom
      }

      if (joinedAtTo !== undefined) {
        localVarQueryParameter['joined_at.to'] = joinedAtTo
      }

      if (agentId) {
        localVarQueryParameter['agent_id'] = agentId
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      if (fromId !== undefined) {
        localVarQueryParameter['from_id'] = fromId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [agentId]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<string>} [status]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [teamId]
     * @param {string} [utilizationFrom]
     * @param {string} [utilizationTo]
     * @param {boolean} [hasCall]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [supervisorId]
     * @param {Array<string>} [auditorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatistic: async (
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      agentId?: Array<string>,
      timeFrom?: string,
      timeTo?: string,
      status?: Array<string>,
      queueId?: Array<number>,
      teamId?: Array<number>,
      utilizationFrom?: string,
      utilizationTo?: string,
      hasCall?: boolean,
      skillId?: Array<number>,
      regionId?: Array<number>,
      supervisorId?: Array<number>,
      auditorId?: Array<string>,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/call_center/agents/reports/status`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort
      }

      if (fields) {
        localVarQueryParameter['fields'] = fields
      }

      if (agentId) {
        localVarQueryParameter['agent_id'] = agentId
      }

      if (timeFrom !== undefined) {
        localVarQueryParameter['time.from'] = timeFrom
      }

      if (timeTo !== undefined) {
        localVarQueryParameter['time.to'] = timeTo
      }

      if (status) {
        localVarQueryParameter['status'] = status
      }

      if (queueId) {
        localVarQueryParameter['queue_id'] = queueId
      }

      if (teamId) {
        localVarQueryParameter['team_id'] = teamId
      }

      if (utilizationFrom !== undefined) {
        localVarQueryParameter['utilization.from'] = utilizationFrom
      }

      if (utilizationTo !== undefined) {
        localVarQueryParameter['utilization.to'] = utilizationTo
      }

      if (hasCall !== undefined) {
        localVarQueryParameter['has_call'] = hasCall
      }

      if (skillId) {
        localVarQueryParameter['skill_id'] = skillId
      }

      if (regionId) {
        localVarQueryParameter['region_id'] = regionId
      }

      if (supervisorId) {
        localVarQueryParameter['supervisor_id'] = supervisorId
      }

      if (auditorId) {
        localVarQueryParameter['auditor_id'] = auditorId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatisticItem: async (
      agentId: string,
      timeFrom?: string,
      timeTo?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling searchAgentStatusStatisticItem.'
        )
      }
      const localVarPath = `/call_center/agents/reports/status/{agent_id}`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agentId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (timeFrom !== undefined) {
        localVarQueryParameter['time.from'] = timeFrom
      }

      if (timeTo !== undefined) {
        localVarQueryParameter['time.to'] = timeTo
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsUser
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupUsersAgentNotExists: async (
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/call_center/lookups/agents/users`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (q !== undefined) {
        localVarQueryParameter['q'] = q
      }

      if (domainId !== undefined) {
        localVarQueryParameter['domain_id'] = domainId
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {boolean} [allowChange]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPauseCauseForAgent: async (
      agentId: string,
      allowChange?: boolean,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'agentId' is not null or undefined
      if (agentId === null || agentId === undefined) {
        throw new RequiredError(
          'agentId',
          'Required parameter agentId was null or undefined when calling searchPauseCauseForAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{agent_id}/pause_causes`.replace(
        `{${'agent_id'}}`,
        encodeURIComponent(String(agentId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      if (allowChange !== undefined) {
        localVarQueryParameter['allow_change'] = allowChange
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent: async (
      id: string,
      body: EngineUpdateAgentRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgent.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgent.'
        )
      }
      const localVarPath = `/call_center/agents/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus: async (
      id: string,
      body: EngineAgentStatusRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling updateAgentStatus.'
        )
      }
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling updateAgentStatus.'
        )
      }
      const localVarPath = `/call_center/agents/{id}/status`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication AccessToken required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Webitel-Access')
            : await configuration.apiKey
        localVarHeaderParameter['X-Webitel-Access'] = localVarApiKeyValue
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AgentServiceApi - functional programming interface
 * @export
 */
export const AgentServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} agentId
     * @param {EngineAgentSetStateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async agentSetState(
      agentId: number,
      body: EngineAgentSetStateRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).agentSetState(agentId, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async agentStateHistory(
      agentId: string,
      page?: number,
      size?: number,
      timeFrom?: string,
      timeTo?: string,
      q?: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListAgentStateHistory>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).agentStateHistory(
        agentId,
        page,
        size,
        timeFrom,
        timeTo,
        q,
        domainId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async agentTodayStatistics(
      agentId: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAgentTodayStatisticsResponse>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).agentTodayStatistics(agentId, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAgent(
      body: EngineCreateAgentRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).createAgent(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAgent(
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).deleteAgent(id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EnginePatchAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchAgent(
      id: string,
      body: EnginePatchAgentRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).patchAgent(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readAgent(
      id: string,
      domainId?: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).readAgent(id, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary List of Agent
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [allowChannels]
     * @param {Array<number>} [supervisorId]
     * @param {Array<number>} [teamId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [auditorId]
     * @param {boolean} [isSupervisor]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [queueId]
     * @param {boolean} [notSupervisor]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [extension]
     * @param {Array<number>} [notTeamId]
     * @param {Array<number>} [notSkillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAgent(
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<string>,
      allowChannels?: Array<string>,
      supervisorId?: Array<number>,
      teamId?: Array<number>,
      regionId?: Array<number>,
      auditorId?: Array<number>,
      isSupervisor?: boolean,
      skillId?: Array<number>,
      queueId?: Array<number>,
      notSupervisor?: boolean,
      userId?: Array<string>,
      extension?: Array<string>,
      notTeamId?: Array<number>,
      notSkillId?: Array<number>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListAgent>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgent(
        page,
        size,
        q,
        sort,
        fields,
        id,
        allowChannels,
        supervisorId,
        teamId,
        regionId,
        auditorId,
        isSupervisor,
        skillId,
        queueId,
        notSupervisor,
        userId,
        extension,
        notTeamId,
        notSkillId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<number>} [agentId]
     * @param {string} [domainId]
     * @param {string} [q]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAgentCallStatistics(
      page?: number,
      size?: number,
      timeFrom?: string,
      timeTo?: string,
      agentId?: Array<number>,
      domainId?: string,
      q?: string,
      fields?: Array<string>,
      sort?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAgentCallStatisticsList>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentCallStatistics(
        page,
        size,
        timeFrom,
        timeTo,
        agentId,
        domainId,
        q,
        fields,
        sort,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAgentInQueue(
      id: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListAgentInQueue>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentInQueue(id, page, size, q, sort, fields, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAgentInQueueStatistics(
      agentId: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAgentInQueueStatisticsList>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentInQueueStatistics(agentId, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary todo deprecated ?
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAgentInTeam(
      id: string,
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListAgentInTeam>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentInTeam(id, page, size, q, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [agentId]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {string} [fromId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAgentStateHistory(
      page?: number,
      size?: number,
      joinedAtFrom?: string,
      joinedAtTo?: string,
      agentId?: Array<string>,
      sort?: string,
      domainId?: string,
      fromId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListAgentStateHistory>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentStateHistory(
        page,
        size,
        joinedAtFrom,
        joinedAtTo,
        agentId,
        sort,
        domainId,
        fromId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [agentId]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<string>} [status]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [teamId]
     * @param {string} [utilizationFrom]
     * @param {string} [utilizationTo]
     * @param {boolean} [hasCall]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [supervisorId]
     * @param {Array<string>} [auditorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAgentStatusStatistic(
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      agentId?: Array<string>,
      timeFrom?: string,
      timeTo?: string,
      status?: Array<string>,
      queueId?: Array<number>,
      teamId?: Array<number>,
      utilizationFrom?: string,
      utilizationTo?: string,
      hasCall?: boolean,
      skillId?: Array<number>,
      regionId?: Array<number>,
      supervisorId?: Array<number>,
      auditorId?: Array<string>,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListAgentStatsStatistic>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentStatusStatistic(
        page,
        size,
        q,
        sort,
        fields,
        agentId,
        timeFrom,
        timeTo,
        status,
        queueId,
        teamId,
        utilizationFrom,
        utilizationTo,
        hasCall,
        skillId,
        regionId,
        supervisorId,
        auditorId,
        options
      )
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchAgentStatusStatisticItem(
      agentId: string,
      timeFrom?: string,
      timeTo?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineAgentStatusStatisticItem>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).searchAgentStatusStatisticItem(agentId, timeFrom, timeTo, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsUser
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchLookupUsersAgentNotExists(
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineListAgentUser>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).searchLookupUsersAgentNotExists(page, size, q, domainId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {string} agentId
     * @param {boolean} [allowChange]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchPauseCauseForAgent(
      agentId: string,
      allowChange?: boolean,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EngineForAgentPauseCauseList>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).searchPauseCauseForAgent(agentId, allowChange, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAgent(
      id: string,
      body: EngineUpdateAgentRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineAgent>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).updateAgent(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAgentStatus(
      id: string,
      body: EngineAgentStatusRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineResponse>
    > {
      const localVarAxiosArgs = await AgentServiceApiAxiosParamCreator(
        configuration
      ).updateAgentStatus(id, body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AgentServiceApi - factory interface
 * @export
 */
export const AgentServiceApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {number} agentId
     * @param {EngineAgentSetStateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentSetState(
      agentId: number,
      body: EngineAgentSetStateRequest,
      options?: any
    ): AxiosPromise<object> {
      return AgentServiceApiFp(configuration)
        .agentSetState(agentId, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentStateHistory(
      agentId: string,
      page?: number,
      size?: number,
      timeFrom?: string,
      timeTo?: string,
      q?: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineListAgentStateHistory> {
      return AgentServiceApiFp(configuration)
        .agentStateHistory(
          agentId,
          page,
          size,
          timeFrom,
          timeTo,
          q,
          domainId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} agentId
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentTodayStatistics(
      agentId: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<EngineAgentTodayStatisticsResponse> {
      return AgentServiceApiFp(configuration)
        .agentTodayStatistics(agentId, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent(
      body: EngineCreateAgentRequest,
      options?: any
    ): AxiosPromise<EngineAgent> {
      return AgentServiceApiFp(configuration)
        .createAgent(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent(
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineAgent> {
      return AgentServiceApiFp(configuration)
        .deleteAgent(id, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EnginePatchAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgent(
      id: string,
      body: EnginePatchAgentRequest,
      options?: any
    ): AxiosPromise<EngineAgent> {
      return AgentServiceApiFp(configuration)
        .patchAgent(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent(
      id: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineAgent> {
      return AgentServiceApiFp(configuration)
        .readAgent(id, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List of Agent
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [allowChannels]
     * @param {Array<number>} [supervisorId]
     * @param {Array<number>} [teamId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [auditorId]
     * @param {boolean} [isSupervisor]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [queueId]
     * @param {boolean} [notSupervisor]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [extension]
     * @param {Array<number>} [notTeamId]
     * @param {Array<number>} [notSkillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent(
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      id?: Array<string>,
      allowChannels?: Array<string>,
      supervisorId?: Array<number>,
      teamId?: Array<number>,
      regionId?: Array<number>,
      auditorId?: Array<number>,
      isSupervisor?: boolean,
      skillId?: Array<number>,
      queueId?: Array<number>,
      notSupervisor?: boolean,
      userId?: Array<string>,
      extension?: Array<string>,
      notTeamId?: Array<number>,
      notSkillId?: Array<number>,
      options?: any
    ): AxiosPromise<EngineListAgent> {
      return AgentServiceApiFp(configuration)
        .searchAgent(
          page,
          size,
          q,
          sort,
          fields,
          id,
          allowChannels,
          supervisorId,
          teamId,
          regionId,
          auditorId,
          isSupervisor,
          skillId,
          queueId,
          notSupervisor,
          userId,
          extension,
          notTeamId,
          notSkillId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<number>} [agentId]
     * @param {string} [domainId]
     * @param {string} [q]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentCallStatistics(
      page?: number,
      size?: number,
      timeFrom?: string,
      timeTo?: string,
      agentId?: Array<number>,
      domainId?: string,
      q?: string,
      fields?: Array<string>,
      sort?: string,
      options?: any
    ): AxiosPromise<EngineAgentCallStatisticsList> {
      return AgentServiceApiFp(configuration)
        .searchAgentCallStatistics(
          page,
          size,
          timeFrom,
          timeTo,
          agentId,
          domainId,
          q,
          fields,
          sort,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueue(
      id: string,
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      options?: any
    ): AxiosPromise<EngineListAgentInQueue> {
      return AgentServiceApiFp(configuration)
        .searchAgentInQueue(id, page, size, q, sort, fields, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueueStatistics(
      agentId: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineAgentInQueueStatisticsList> {
      return AgentServiceApiFp(configuration)
        .searchAgentInQueueStatistics(agentId, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary todo deprecated ?
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInTeam(
      id: string,
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineListAgentInTeam> {
      return AgentServiceApiFp(configuration)
        .searchAgentInTeam(id, page, size, q, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [agentId]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {string} [fromId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStateHistory(
      page?: number,
      size?: number,
      joinedAtFrom?: string,
      joinedAtTo?: string,
      agentId?: Array<string>,
      sort?: string,
      domainId?: string,
      fromId?: string,
      options?: any
    ): AxiosPromise<EngineListAgentStateHistory> {
      return AgentServiceApiFp(configuration)
        .searchAgentStateHistory(
          page,
          size,
          joinedAtFrom,
          joinedAtTo,
          agentId,
          sort,
          domainId,
          fromId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [agentId]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<string>} [status]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [teamId]
     * @param {string} [utilizationFrom]
     * @param {string} [utilizationTo]
     * @param {boolean} [hasCall]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [supervisorId]
     * @param {Array<string>} [auditorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatistic(
      page?: number,
      size?: number,
      q?: string,
      sort?: string,
      fields?: Array<string>,
      agentId?: Array<string>,
      timeFrom?: string,
      timeTo?: string,
      status?: Array<string>,
      queueId?: Array<number>,
      teamId?: Array<number>,
      utilizationFrom?: string,
      utilizationTo?: string,
      hasCall?: boolean,
      skillId?: Array<number>,
      regionId?: Array<number>,
      supervisorId?: Array<number>,
      auditorId?: Array<string>,
      options?: any
    ): AxiosPromise<EngineListAgentStatsStatistic> {
      return AgentServiceApiFp(configuration)
        .searchAgentStatusStatistic(
          page,
          size,
          q,
          sort,
          fields,
          agentId,
          timeFrom,
          timeTo,
          status,
          queueId,
          teamId,
          utilizationFrom,
          utilizationTo,
          hasCall,
          skillId,
          regionId,
          supervisorId,
          auditorId,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatisticItem(
      agentId: string,
      timeFrom?: string,
      timeTo?: string,
      options?: any
    ): AxiosPromise<EngineAgentStatusStatisticItem> {
      return AgentServiceApiFp(configuration)
        .searchAgentStatusStatisticItem(agentId, timeFrom, timeTo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsUser
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupUsersAgentNotExists(
      page?: number,
      size?: number,
      q?: string,
      domainId?: string,
      options?: any
    ): AxiosPromise<EngineListAgentUser> {
      return AgentServiceApiFp(configuration)
        .searchLookupUsersAgentNotExists(page, size, q, domainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} agentId
     * @param {boolean} [allowChange]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPauseCauseForAgent(
      agentId: string,
      allowChange?: boolean,
      options?: any
    ): AxiosPromise<EngineForAgentPauseCauseList> {
      return AgentServiceApiFp(configuration)
        .searchPauseCauseForAgent(agentId, allowChange, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent(
      id: string,
      body: EngineUpdateAgentRequest,
      options?: any
    ): AxiosPromise<EngineAgent> {
      return AgentServiceApiFp(configuration)
        .updateAgent(id, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus(
      id: string,
      body: EngineAgentStatusRequest,
      options?: any
    ): AxiosPromise<EngineResponse> {
      return AgentServiceApiFp(configuration)
        .updateAgentStatus(id, body, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AgentServiceApi - object-oriented interface
 * @export
 * @class AgentServiceApi
 * @extends {BaseAPI}
 */
export class AgentServiceApi extends BaseAPI {
  /**
   *
   * @param {number} agentId
   * @param {EngineAgentSetStateRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public agentSetState(
    agentId: number,
    body: EngineAgentSetStateRequest,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .agentSetState(agentId, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} agentId
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [timeFrom]
   * @param {string} [timeTo]
   * @param {string} [q]
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public agentStateHistory(
    agentId: string,
    page?: number,
    size?: number,
    timeFrom?: string,
    timeTo?: string,
    q?: string,
    domainId?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .agentStateHistory(
        agentId,
        page,
        size,
        timeFrom,
        timeTo,
        q,
        domainId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} agentId
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public agentTodayStatistics(
    agentId: string,
    fields?: Array<string>,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .agentTodayStatistics(agentId, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Create Agent
   * @param {EngineCreateAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public createAgent(body: EngineCreateAgentRequest, options?: any) {
    return AgentServiceApiFp(this.configuration)
      .createAgent(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Remove Agent
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public deleteAgent(id: string, domainId?: string, options?: any) {
    return AgentServiceApiFp(this.configuration)
      .deleteAgent(id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update Agent
   * @param {string} id
   * @param {EnginePatchAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public patchAgent(id: string, body: EnginePatchAgentRequest, options?: any) {
    return AgentServiceApiFp(this.configuration)
      .patchAgent(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Agent item
   * @param {string} id
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public readAgent(id: string, domainId?: string, options?: any) {
    return AgentServiceApiFp(this.configuration)
      .readAgent(id, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List of Agent
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {Array<string>} [id]
   * @param {Array<string>} [allowChannels]
   * @param {Array<number>} [supervisorId]
   * @param {Array<number>} [teamId]
   * @param {Array<number>} [regionId]
   * @param {Array<number>} [auditorId]
   * @param {boolean} [isSupervisor]
   * @param {Array<number>} [skillId]
   * @param {Array<number>} [queueId]
   * @param {boolean} [notSupervisor]
   * @param {Array<string>} [userId]
   * @param {Array<string>} [extension]
   * @param {Array<number>} [notTeamId]
   * @param {Array<number>} [notSkillId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgent(
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    id?: Array<string>,
    allowChannels?: Array<string>,
    supervisorId?: Array<number>,
    teamId?: Array<number>,
    regionId?: Array<number>,
    auditorId?: Array<number>,
    isSupervisor?: boolean,
    skillId?: Array<number>,
    queueId?: Array<number>,
    notSupervisor?: boolean,
    userId?: Array<string>,
    extension?: Array<string>,
    notTeamId?: Array<number>,
    notSkillId?: Array<number>,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .searchAgent(
        page,
        size,
        q,
        sort,
        fields,
        id,
        allowChannels,
        supervisorId,
        teamId,
        regionId,
        auditorId,
        isSupervisor,
        skillId,
        queueId,
        notSupervisor,
        userId,
        extension,
        notTeamId,
        notSkillId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [timeFrom]
   * @param {string} [timeTo]
   * @param {Array<number>} [agentId]
   * @param {string} [domainId]
   * @param {string} [q]
   * @param {Array<string>} [fields]
   * @param {string} [sort]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentCallStatistics(
    page?: number,
    size?: number,
    timeFrom?: string,
    timeTo?: string,
    agentId?: Array<number>,
    domainId?: string,
    q?: string,
    fields?: Array<string>,
    sort?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .searchAgentCallStatistics(
        page,
        size,
        timeFrom,
        timeTo,
        agentId,
        domainId,
        q,
        fields,
        sort,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentInQueue(
    id: string,
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .searchAgentInQueue(id, page, size, q, sort, fields, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} agentId
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentInQueueStatistics(
    agentId: string,
    domainId?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .searchAgentInQueueStatistics(agentId, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary todo deprecated ?
   * @param {string} id
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentInTeam(
    id: string,
    page?: number,
    size?: number,
    q?: string,
    domainId?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .searchAgentInTeam(id, page, size, q, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [joinedAtFrom]
   * @param {string} [joinedAtTo]
   * @param {Array<string>} [agentId]
   * @param {string} [sort]
   * @param {string} [domainId]
   * @param {string} [fromId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentStateHistory(
    page?: number,
    size?: number,
    joinedAtFrom?: string,
    joinedAtTo?: string,
    agentId?: Array<string>,
    sort?: string,
    domainId?: string,
    fromId?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .searchAgentStateHistory(
        page,
        size,
        joinedAtFrom,
        joinedAtTo,
        agentId,
        sort,
        domainId,
        fromId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [sort]
   * @param {Array<string>} [fields]
   * @param {Array<string>} [agentId]
   * @param {string} [timeFrom]
   * @param {string} [timeTo]
   * @param {Array<string>} [status]
   * @param {Array<number>} [queueId]
   * @param {Array<number>} [teamId]
   * @param {string} [utilizationFrom]
   * @param {string} [utilizationTo]
   * @param {boolean} [hasCall]
   * @param {Array<number>} [skillId]
   * @param {Array<number>} [regionId]
   * @param {Array<number>} [supervisorId]
   * @param {Array<string>} [auditorId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentStatusStatistic(
    page?: number,
    size?: number,
    q?: string,
    sort?: string,
    fields?: Array<string>,
    agentId?: Array<string>,
    timeFrom?: string,
    timeTo?: string,
    status?: Array<string>,
    queueId?: Array<number>,
    teamId?: Array<number>,
    utilizationFrom?: string,
    utilizationTo?: string,
    hasCall?: boolean,
    skillId?: Array<number>,
    regionId?: Array<number>,
    supervisorId?: Array<number>,
    auditorId?: Array<string>,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .searchAgentStatusStatistic(
        page,
        size,
        q,
        sort,
        fields,
        agentId,
        timeFrom,
        timeTo,
        status,
        queueId,
        teamId,
        utilizationFrom,
        utilizationTo,
        hasCall,
        skillId,
        regionId,
        supervisorId,
        auditorId,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} agentId
   * @param {string} [timeFrom]
   * @param {string} [timeTo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchAgentStatusStatisticItem(
    agentId: string,
    timeFrom?: string,
    timeTo?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .searchAgentStatusStatisticItem(agentId, timeFrom, timeTo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary SearchLookupAgentNotExistsUser
   * @param {number} [page]
   * @param {number} [size]
   * @param {string} [q]
   * @param {string} [domainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchLookupUsersAgentNotExists(
    page?: number,
    size?: number,
    q?: string,
    domainId?: string,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .searchLookupUsersAgentNotExists(page, size, q, domainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} agentId
   * @param {boolean} [allowChange]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public searchPauseCauseForAgent(
    agentId: string,
    allowChange?: boolean,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .searchPauseCauseForAgent(agentId, allowChange, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update Agent
   * @param {string} id
   * @param {EngineUpdateAgentRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public updateAgent(
    id: string,
    body: EngineUpdateAgentRequest,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .updateAgent(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Change agent status
   * @param {string} id
   * @param {EngineAgentStatusRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AgentServiceApi
   */
  public updateAgentStatus(
    id: string,
    body: EngineAgentStatusRequest,
    options?: any
  ) {
    return AgentServiceApiFp(this.configuration)
      .updateAgentStatus(id, body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
